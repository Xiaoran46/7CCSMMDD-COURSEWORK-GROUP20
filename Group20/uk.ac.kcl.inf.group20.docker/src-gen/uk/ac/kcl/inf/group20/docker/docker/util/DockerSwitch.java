/**
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.inf.group20.docker.docker.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import uk.ac.kcl.inf.group20.docker.docker.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see uk.ac.kcl.inf.group20.docker.docker.DockerPackage
 * @generated
 */
public class DockerSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static DockerPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DockerSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = DockerPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case DockerPackage.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DockerPackage.STATEMENTS:
      {
        Statements statements = (Statements)theEObject;
        T result = caseStatements(statements);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DockerPackage.REMOVE_IMAGE_STATEMENT:
      {
        RemoveImageStatement removeImageStatement = (RemoveImageStatement)theEObject;
        T result = caseRemoveImageStatement(removeImageStatement);
        if (result == null) result = caseStatements(removeImageStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DockerPackage.IMAGE_STATEMENT:
      {
        ImageStatement imageStatement = (ImageStatement)theEObject;
        T result = caseImageStatement(imageStatement);
        if (result == null) result = caseStatements(imageStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DockerPackage.IMAGE_OPTIONS:
      {
        ImageOptions imageOptions = (ImageOptions)theEObject;
        T result = caseImageOptions(imageOptions);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DockerPackage.DIFF_STATEMENT:
      {
        DiffStatement diffStatement = (DiffStatement)theEObject;
        T result = caseDiffStatement(diffStatement);
        if (result == null) result = caseStatements(diffStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DockerPackage.CP_STATEMENT:
      {
        CpStatement cpStatement = (CpStatement)theEObject;
        T result = caseCpStatement(cpStatement);
        if (result == null) result = caseStatements(cpStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DockerPackage.SOURCE_OPTION:
      {
        SourceOption sourceOption = (SourceOption)theEObject;
        T result = caseSourceOption(sourceOption);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DockerPackage.COMMIT_STATEMENT:
      {
        CommitStatement commitStatement = (CommitStatement)theEObject;
        T result = caseCommitStatement(commitStatement);
        if (result == null) result = caseStatements(commitStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DockerPackage.COMMIT_OPTIONS:
      {
        CommitOptions commitOptions = (CommitOptions)theEObject;
        T result = caseCommitOptions(commitOptions);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DockerPackage.PORT_STATEMENT:
      {
        PortStatement portStatement = (PortStatement)theEObject;
        T result = casePortStatement(portStatement);
        if (result == null) result = caseStatements(portStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DockerPackage.EXPORT_STATEMENT:
      {
        ExportStatement exportStatement = (ExportStatement)theEObject;
        T result = caseExportStatement(exportStatement);
        if (result == null) result = caseStatements(exportStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DockerPackage.WAIT_STATEMENT:
      {
        WaitStatement waitStatement = (WaitStatement)theEObject;
        T result = caseWaitStatement(waitStatement);
        if (result == null) result = caseStatements(waitStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DockerPackage.LOGS_STATEMENT:
      {
        LogsStatement logsStatement = (LogsStatement)theEObject;
        T result = caseLogsStatement(logsStatement);
        if (result == null) result = caseStatements(logsStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DockerPackage.LOG_OPTIONS:
      {
        LogOptions logOptions = (LogOptions)theEObject;
        T result = caseLogOptions(logOptions);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DockerPackage.EVENT_STATEMENT:
      {
        EventStatement eventStatement = (EventStatement)theEObject;
        T result = caseEventStatement(eventStatement);
        if (result == null) result = caseStatements(eventStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DockerPackage.EVENT_OPTIONS:
      {
        EventOptions eventOptions = (EventOptions)theEObject;
        T result = caseEventOptions(eventOptions);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DockerPackage.ATTACH_STATEMENT:
      {
        AttachStatement attachStatement = (AttachStatement)theEObject;
        T result = caseAttachStatement(attachStatement);
        if (result == null) result = caseStatements(attachStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DockerPackage.INSPECT_STATEMENT:
      {
        InspectStatement inspectStatement = (InspectStatement)theEObject;
        T result = caseInspectStatement(inspectStatement);
        if (result == null) result = caseStatements(inspectStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DockerPackage.INSPECT_OPTIONS:
      {
        InspectOptions inspectOptions = (InspectOptions)theEObject;
        T result = caseInspectOptions(inspectOptions);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DockerPackage.PS_STATEMENT:
      {
        PsStatement psStatement = (PsStatement)theEObject;
        T result = casePsStatement(psStatement);
        if (result == null) result = caseStatements(psStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DockerPackage.PS_OPTIONS:
      {
        PsOptions psOptions = (PsOptions)theEObject;
        T result = casePsOptions(psOptions);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DockerPackage.EXEC_STATEMENT:
      {
        ExecStatement execStatement = (ExecStatement)theEObject;
        T result = caseExecStatement(execStatement);
        if (result == null) result = caseStatements(execStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DockerPackage.UNPAUSE_STATEMENT:
      {
        UnpauseStatement unpauseStatement = (UnpauseStatement)theEObject;
        T result = caseUnpauseStatement(unpauseStatement);
        if (result == null) result = caseStatements(unpauseStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DockerPackage.PAUSE_STATEMENT:
      {
        PauseStatement pauseStatement = (PauseStatement)theEObject;
        T result = casePauseStatement(pauseStatement);
        if (result == null) result = caseStatements(pauseStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DockerPackage.RESTART_STATEMENT:
      {
        RestartStatement restartStatement = (RestartStatement)theEObject;
        T result = caseRestartStatement(restartStatement);
        if (result == null) result = caseStatements(restartStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DockerPackage.STOP_STATEMENT:
      {
        StopStatement stopStatement = (StopStatement)theEObject;
        T result = caseStopStatement(stopStatement);
        if (result == null) result = caseStatements(stopStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DockerPackage.START_STATEMENT:
      {
        StartStatement startStatement = (StartStatement)theEObject;
        T result = caseStartStatement(startStatement);
        if (result == null) result = caseStatements(startStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DockerPackage.KILL_STATEMENT:
      {
        KillStatement killStatement = (KillStatement)theEObject;
        T result = caseKillStatement(killStatement);
        if (result == null) result = caseStatements(killStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DockerPackage.REMOVE_STATEMENT:
      {
        RemoveStatement removeStatement = (RemoveStatement)theEObject;
        T result = caseRemoveStatement(removeStatement);
        if (result == null) result = caseStatements(removeStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DockerPackage.RUN_CREATE_STATEMENT:
      {
        RunCreateStatement runCreateStatement = (RunCreateStatement)theEObject;
        T result = caseRunCreateStatement(runCreateStatement);
        if (result == null) result = caseStatements(runCreateStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DockerPackage.RUN_OPTION:
      {
        RunOption runOption = (RunOption)theEObject;
        T result = caseRunOption(runOption);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DockerPackage.CONTAINER_NAME_DECLARATION:
      {
        ContainerNameDeclaration containerNameDeclaration = (ContainerNameDeclaration)theEObject;
        T result = caseContainerNameDeclaration(containerNameDeclaration);
        if (result == null) result = caseStatements(containerNameDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statements</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statements</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatements(Statements object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Remove Image Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Remove Image Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRemoveImageStatement(RemoveImageStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Image Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Image Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImageStatement(ImageStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Image Options</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Image Options</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImageOptions(ImageOptions object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Diff Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Diff Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDiffStatement(DiffStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Cp Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Cp Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCpStatement(CpStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Source Option</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Source Option</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSourceOption(SourceOption object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Commit Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Commit Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCommitStatement(CommitStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Commit Options</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Commit Options</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCommitOptions(CommitOptions object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Port Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Port Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePortStatement(PortStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Export Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Export Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExportStatement(ExportStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Wait Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Wait Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWaitStatement(WaitStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logs Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logs Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogsStatement(LogsStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Log Options</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Log Options</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogOptions(LogOptions object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Event Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Event Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEventStatement(EventStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Event Options</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Event Options</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEventOptions(EventOptions object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Attach Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Attach Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAttachStatement(AttachStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Inspect Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Inspect Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInspectStatement(InspectStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Inspect Options</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Inspect Options</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInspectOptions(InspectOptions object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ps Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ps Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePsStatement(PsStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ps Options</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ps Options</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePsOptions(PsOptions object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exec Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exec Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExecStatement(ExecStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unpause Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unpause Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnpauseStatement(UnpauseStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pause Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pause Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePauseStatement(PauseStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Restart Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Restart Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRestartStatement(RestartStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Stop Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Stop Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStopStatement(StopStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Start Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Start Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStartStatement(StartStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Kill Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Kill Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseKillStatement(KillStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Remove Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Remove Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRemoveStatement(RemoveStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Run Create Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Run Create Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRunCreateStatement(RunCreateStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Run Option</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Run Option</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRunOption(RunOption object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Container Name Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Container Name Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContainerNameDeclaration(ContainerNameDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //DockerSwitch
