/**
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.inf.group20.docker.docker.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import uk.ac.kcl.inf.group20.docker.docker.ContainerNameDeclaration;
import uk.ac.kcl.inf.group20.docker.docker.DockerPackage;
import uk.ac.kcl.inf.group20.docker.docker.SourceOption;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Source Option</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.inf.group20.docker.docker.impl.SourceOptionImpl#getOption1 <em>Option1</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.group20.docker.docker.impl.SourceOptionImpl#getOption2 <em>Option2</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SourceOptionImpl extends MinimalEObjectImpl.Container implements SourceOption
{
  /**
   * The default value of the '{@link #getOption1() <em>Option1</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOption1()
   * @generated
   * @ordered
   */
  protected static final String OPTION1_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getOption1() <em>Option1</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOption1()
   * @generated
   * @ordered
   */
  protected String option1 = OPTION1_EDEFAULT;

  /**
   * The cached value of the '{@link #getOption2() <em>Option2</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOption2()
   * @generated
   * @ordered
   */
  protected ContainerNameDeclaration option2;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SourceOptionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DockerPackage.Literals.SOURCE_OPTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getOption1()
  {
    return option1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOption1(String newOption1)
  {
    String oldOption1 = option1;
    option1 = newOption1;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DockerPackage.SOURCE_OPTION__OPTION1, oldOption1, option1));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ContainerNameDeclaration getOption2()
  {
    if (option2 != null && option2.eIsProxy())
    {
      InternalEObject oldOption2 = (InternalEObject)option2;
      option2 = (ContainerNameDeclaration)eResolveProxy(oldOption2);
      if (option2 != oldOption2)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, DockerPackage.SOURCE_OPTION__OPTION2, oldOption2, option2));
      }
    }
    return option2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ContainerNameDeclaration basicGetOption2()
  {
    return option2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOption2(ContainerNameDeclaration newOption2)
  {
    ContainerNameDeclaration oldOption2 = option2;
    option2 = newOption2;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DockerPackage.SOURCE_OPTION__OPTION2, oldOption2, option2));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DockerPackage.SOURCE_OPTION__OPTION1:
        return getOption1();
      case DockerPackage.SOURCE_OPTION__OPTION2:
        if (resolve) return getOption2();
        return basicGetOption2();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DockerPackage.SOURCE_OPTION__OPTION1:
        setOption1((String)newValue);
        return;
      case DockerPackage.SOURCE_OPTION__OPTION2:
        setOption2((ContainerNameDeclaration)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DockerPackage.SOURCE_OPTION__OPTION1:
        setOption1(OPTION1_EDEFAULT);
        return;
      case DockerPackage.SOURCE_OPTION__OPTION2:
        setOption2((ContainerNameDeclaration)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DockerPackage.SOURCE_OPTION__OPTION1:
        return OPTION1_EDEFAULT == null ? option1 != null : !OPTION1_EDEFAULT.equals(option1);
      case DockerPackage.SOURCE_OPTION__OPTION2:
        return option2 != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (option1: ");
    result.append(option1);
    result.append(')');
    return result.toString();
  }

} //SourceOptionImpl
