/**
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.inf.group20.docker.docker.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import uk.ac.kcl.inf.group20.docker.docker.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class DockerFactoryImpl extends EFactoryImpl implements DockerFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static DockerFactory init()
  {
    try
    {
      DockerFactory theDockerFactory = (DockerFactory)EPackage.Registry.INSTANCE.getEFactory(DockerPackage.eNS_URI);
      if (theDockerFactory != null)
      {
        return theDockerFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new DockerFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DockerFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case DockerPackage.MODEL: return createModel();
      case DockerPackage.STATEMENTS: return createStatements();
      case DockerPackage.REMOVE_IMAGE_STATEMENT: return createRemoveImageStatement();
      case DockerPackage.IMAGE_STATEMENT: return createImageStatement();
      case DockerPackage.IMAGE_OPTIONS: return createImageOptions();
      case DockerPackage.DIFF_STATEMENT: return createDiffStatement();
      case DockerPackage.CP_STATEMENT: return createCpStatement();
      case DockerPackage.SOURCE_OPTION: return createSourceOption();
      case DockerPackage.COMMIT_STATEMENT: return createCommitStatement();
      case DockerPackage.COMMIT_OPTIONS: return createCommitOptions();
      case DockerPackage.PORT_STATEMENT: return createPortStatement();
      case DockerPackage.EXPORT_STATEMENT: return createExportStatement();
      case DockerPackage.WAIT_STATEMENT: return createWaitStatement();
      case DockerPackage.LOGS_STATEMENT: return createLogsStatement();
      case DockerPackage.LOG_OPTIONS: return createLogOptions();
      case DockerPackage.EVENT_STATEMENT: return createEventStatement();
      case DockerPackage.EVENT_OPTIONS: return createEventOptions();
      case DockerPackage.ATTACH_STATEMENT: return createAttachStatement();
      case DockerPackage.INSPECT_STATEMENT: return createInspectStatement();
      case DockerPackage.INSPECT_OPTIONS: return createInspectOptions();
      case DockerPackage.PS_STATEMENT: return createPsStatement();
      case DockerPackage.PS_OPTIONS: return createPsOptions();
      case DockerPackage.EXEC_STATEMENT: return createExecStatement();
      case DockerPackage.UNPAUSE_STATEMENT: return createUnpauseStatement();
      case DockerPackage.PAUSE_STATEMENT: return createPauseStatement();
      case DockerPackage.RESTART_STATEMENT: return createRestartStatement();
      case DockerPackage.STOP_STATEMENT: return createStopStatement();
      case DockerPackage.START_STATEMENT: return createStartStatement();
      case DockerPackage.KILL_STATEMENT: return createKillStatement();
      case DockerPackage.REMOVE_STATEMENT: return createRemoveStatement();
      case DockerPackage.RUN_CREATE_STATEMENT: return createRunCreateStatement();
      case DockerPackage.RUN_OPTION: return createRunOption();
      case DockerPackage.CONTAINER_NAME_DECLARATION: return createContainerNameDeclaration();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case DockerPackage.REMOVE_IMAGE_OPTIONS:
        return createRemoveImageOptionsFromString(eDataType, initialValue);
      case DockerPackage.LINK_OPTION:
        return createLinkOptionFromString(eDataType, initialValue);
      case DockerPackage.SIG_OPTION:
        return createSigOptionFromString(eDataType, initialValue);
      case DockerPackage.ATTACH_OPTION:
        return createAttachOptionFromString(eDataType, initialValue);
      case DockerPackage.EXEC_OPTION:
        return createExecOptionFromString(eDataType, initialValue);
      case DockerPackage.KILL_OPTION:
        return createKillOptionFromString(eDataType, initialValue);
      case DockerPackage.RM_OPTIONS:
        return createRmOptionsFromString(eDataType, initialValue);
      case DockerPackage.RUNOR_CREATE:
        return createRunorCreateFromString(eDataType, initialValue);
      case DockerPackage.IMAGE:
        return createImageFromString(eDataType, initialValue);
      case DockerPackage.OUT_TYPE:
        return createOutTypeFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case DockerPackage.REMOVE_IMAGE_OPTIONS:
        return convertRemoveImageOptionsToString(eDataType, instanceValue);
      case DockerPackage.LINK_OPTION:
        return convertLinkOptionToString(eDataType, instanceValue);
      case DockerPackage.SIG_OPTION:
        return convertSigOptionToString(eDataType, instanceValue);
      case DockerPackage.ATTACH_OPTION:
        return convertAttachOptionToString(eDataType, instanceValue);
      case DockerPackage.EXEC_OPTION:
        return convertExecOptionToString(eDataType, instanceValue);
      case DockerPackage.KILL_OPTION:
        return convertKillOptionToString(eDataType, instanceValue);
      case DockerPackage.RM_OPTIONS:
        return convertRmOptionsToString(eDataType, instanceValue);
      case DockerPackage.RUNOR_CREATE:
        return convertRunorCreateToString(eDataType, instanceValue);
      case DockerPackage.IMAGE:
        return convertImageToString(eDataType, instanceValue);
      case DockerPackage.OUT_TYPE:
        return convertOutTypeToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statements createStatements()
  {
    StatementsImpl statements = new StatementsImpl();
    return statements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RemoveImageStatement createRemoveImageStatement()
  {
    RemoveImageStatementImpl removeImageStatement = new RemoveImageStatementImpl();
    return removeImageStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ImageStatement createImageStatement()
  {
    ImageStatementImpl imageStatement = new ImageStatementImpl();
    return imageStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ImageOptions createImageOptions()
  {
    ImageOptionsImpl imageOptions = new ImageOptionsImpl();
    return imageOptions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DiffStatement createDiffStatement()
  {
    DiffStatementImpl diffStatement = new DiffStatementImpl();
    return diffStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CpStatement createCpStatement()
  {
    CpStatementImpl cpStatement = new CpStatementImpl();
    return cpStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SourceOption createSourceOption()
  {
    SourceOptionImpl sourceOption = new SourceOptionImpl();
    return sourceOption;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CommitStatement createCommitStatement()
  {
    CommitStatementImpl commitStatement = new CommitStatementImpl();
    return commitStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CommitOptions createCommitOptions()
  {
    CommitOptionsImpl commitOptions = new CommitOptionsImpl();
    return commitOptions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PortStatement createPortStatement()
  {
    PortStatementImpl portStatement = new PortStatementImpl();
    return portStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExportStatement createExportStatement()
  {
    ExportStatementImpl exportStatement = new ExportStatementImpl();
    return exportStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WaitStatement createWaitStatement()
  {
    WaitStatementImpl waitStatement = new WaitStatementImpl();
    return waitStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LogsStatement createLogsStatement()
  {
    LogsStatementImpl logsStatement = new LogsStatementImpl();
    return logsStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LogOptions createLogOptions()
  {
    LogOptionsImpl logOptions = new LogOptionsImpl();
    return logOptions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EventStatement createEventStatement()
  {
    EventStatementImpl eventStatement = new EventStatementImpl();
    return eventStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EventOptions createEventOptions()
  {
    EventOptionsImpl eventOptions = new EventOptionsImpl();
    return eventOptions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AttachStatement createAttachStatement()
  {
    AttachStatementImpl attachStatement = new AttachStatementImpl();
    return attachStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InspectStatement createInspectStatement()
  {
    InspectStatementImpl inspectStatement = new InspectStatementImpl();
    return inspectStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InspectOptions createInspectOptions()
  {
    InspectOptionsImpl inspectOptions = new InspectOptionsImpl();
    return inspectOptions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PsStatement createPsStatement()
  {
    PsStatementImpl psStatement = new PsStatementImpl();
    return psStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PsOptions createPsOptions()
  {
    PsOptionsImpl psOptions = new PsOptionsImpl();
    return psOptions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExecStatement createExecStatement()
  {
    ExecStatementImpl execStatement = new ExecStatementImpl();
    return execStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UnpauseStatement createUnpauseStatement()
  {
    UnpauseStatementImpl unpauseStatement = new UnpauseStatementImpl();
    return unpauseStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PauseStatement createPauseStatement()
  {
    PauseStatementImpl pauseStatement = new PauseStatementImpl();
    return pauseStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RestartStatement createRestartStatement()
  {
    RestartStatementImpl restartStatement = new RestartStatementImpl();
    return restartStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StopStatement createStopStatement()
  {
    StopStatementImpl stopStatement = new StopStatementImpl();
    return stopStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StartStatement createStartStatement()
  {
    StartStatementImpl startStatement = new StartStatementImpl();
    return startStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public KillStatement createKillStatement()
  {
    KillStatementImpl killStatement = new KillStatementImpl();
    return killStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RemoveStatement createRemoveStatement()
  {
    RemoveStatementImpl removeStatement = new RemoveStatementImpl();
    return removeStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RunCreateStatement createRunCreateStatement()
  {
    RunCreateStatementImpl runCreateStatement = new RunCreateStatementImpl();
    return runCreateStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RunOption createRunOption()
  {
    RunOptionImpl runOption = new RunOptionImpl();
    return runOption;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ContainerNameDeclaration createContainerNameDeclaration()
  {
    ContainerNameDeclarationImpl containerNameDeclaration = new ContainerNameDeclarationImpl();
    return containerNameDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RemoveImageOptions createRemoveImageOptionsFromString(EDataType eDataType, String initialValue)
  {
    RemoveImageOptions result = RemoveImageOptions.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertRemoveImageOptionsToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LinkOption createLinkOptionFromString(EDataType eDataType, String initialValue)
  {
    LinkOption result = LinkOption.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertLinkOptionToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SigOption createSigOptionFromString(EDataType eDataType, String initialValue)
  {
    SigOption result = SigOption.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertSigOptionToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AttachOption createAttachOptionFromString(EDataType eDataType, String initialValue)
  {
    AttachOption result = AttachOption.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertAttachOptionToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExecOption createExecOptionFromString(EDataType eDataType, String initialValue)
  {
    ExecOption result = ExecOption.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertExecOptionToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public KillOption createKillOptionFromString(EDataType eDataType, String initialValue)
  {
    KillOption result = KillOption.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertKillOptionToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RmOptions createRmOptionsFromString(EDataType eDataType, String initialValue)
  {
    RmOptions result = RmOptions.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertRmOptionsToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RunorCreate createRunorCreateFromString(EDataType eDataType, String initialValue)
  {
    RunorCreate result = RunorCreate.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertRunorCreateToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Image createImageFromString(EDataType eDataType, String initialValue)
  {
    Image result = Image.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertImageToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OutType createOutTypeFromString(EDataType eDataType, String initialValue)
  {
    OutType result = OutType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertOutTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DockerPackage getDockerPackage()
  {
    return (DockerPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static DockerPackage getPackage()
  {
    return DockerPackage.eINSTANCE;
  }

} //DockerFactoryImpl
