/**
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.inf.group20.docker.docker.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import uk.ac.kcl.inf.group20.docker.docker.ContainerNameDeclaration;
import uk.ac.kcl.inf.group20.docker.docker.DockerPackage;
import uk.ac.kcl.inf.group20.docker.docker.OutType;
import uk.ac.kcl.inf.group20.docker.docker.RunOption;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Run Option</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.inf.group20.docker.docker.impl.RunOptionImpl#getCondition <em>Condition</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.group20.docker.docker.impl.RunOptionImpl#getOutType <em>Out Type</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.group20.docker.docker.impl.RunOptionImpl#getPortName <em>Port Name</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.group20.docker.docker.impl.RunOptionImpl#getServer <em>Server</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.group20.docker.docker.impl.RunOptionImpl#getDomainName <em>Domain Name</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.group20.docker.docker.impl.RunOptionImpl#getHostname <em>Hostname</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.group20.docker.docker.impl.RunOptionImpl#getEnvironmentVariable <em>Environment Variable</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.group20.docker.docker.impl.RunOptionImpl#getSetEnvironmentVariable <em>Set Environment Variable</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.group20.docker.docker.impl.RunOptionImpl#getConnectType <em>Connect Type</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.group20.docker.docker.impl.RunOptionImpl#getContainerName <em>Container Name</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RunOptionImpl extends MinimalEObjectImpl.Container implements RunOption
{
  /**
   * The default value of the '{@link #getCondition() <em>Condition</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondition()
   * @generated
   * @ordered
   */
  protected static final String CONDITION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCondition() <em>Condition</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondition()
   * @generated
   * @ordered
   */
  protected String condition = CONDITION_EDEFAULT;

  /**
   * The default value of the '{@link #getOutType() <em>Out Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOutType()
   * @generated
   * @ordered
   */
  protected static final OutType OUT_TYPE_EDEFAULT = OutType.IN;

  /**
   * The cached value of the '{@link #getOutType() <em>Out Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOutType()
   * @generated
   * @ordered
   */
  protected OutType outType = OUT_TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #getPortName() <em>Port Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPortName()
   * @generated
   * @ordered
   */
  protected static final String PORT_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPortName() <em>Port Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPortName()
   * @generated
   * @ordered
   */
  protected String portName = PORT_NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getServer() <em>Server</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getServer()
   * @generated
   * @ordered
   */
  protected static final String SERVER_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getServer() <em>Server</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getServer()
   * @generated
   * @ordered
   */
  protected String server = SERVER_EDEFAULT;

  /**
   * The default value of the '{@link #getDomainName() <em>Domain Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDomainName()
   * @generated
   * @ordered
   */
  protected static final String DOMAIN_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDomainName() <em>Domain Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDomainName()
   * @generated
   * @ordered
   */
  protected String domainName = DOMAIN_NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getHostname() <em>Hostname</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHostname()
   * @generated
   * @ordered
   */
  protected static final String HOSTNAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getHostname() <em>Hostname</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHostname()
   * @generated
   * @ordered
   */
  protected String hostname = HOSTNAME_EDEFAULT;

  /**
   * The default value of the '{@link #getEnvironmentVariable() <em>Environment Variable</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEnvironmentVariable()
   * @generated
   * @ordered
   */
  protected static final String ENVIRONMENT_VARIABLE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getEnvironmentVariable() <em>Environment Variable</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEnvironmentVariable()
   * @generated
   * @ordered
   */
  protected String environmentVariable = ENVIRONMENT_VARIABLE_EDEFAULT;

  /**
   * The default value of the '{@link #getSetEnvironmentVariable() <em>Set Environment Variable</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSetEnvironmentVariable()
   * @generated
   * @ordered
   */
  protected static final String SET_ENVIRONMENT_VARIABLE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSetEnvironmentVariable() <em>Set Environment Variable</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSetEnvironmentVariable()
   * @generated
   * @ordered
   */
  protected String setEnvironmentVariable = SET_ENVIRONMENT_VARIABLE_EDEFAULT;

  /**
   * The default value of the '{@link #getConnectType() <em>Connect Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConnectType()
   * @generated
   * @ordered
   */
  protected static final String CONNECT_TYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getConnectType() <em>Connect Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConnectType()
   * @generated
   * @ordered
   */
  protected String connectType = CONNECT_TYPE_EDEFAULT;

  /**
   * The cached value of the '{@link #getContainerName() <em>Container Name</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContainerName()
   * @generated
   * @ordered
   */
  protected ContainerNameDeclaration containerName;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RunOptionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DockerPackage.Literals.RUN_OPTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getCondition()
  {
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCondition(String newCondition)
  {
    String oldCondition = condition;
    condition = newCondition;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DockerPackage.RUN_OPTION__CONDITION, oldCondition, condition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OutType getOutType()
  {
    return outType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOutType(OutType newOutType)
  {
    OutType oldOutType = outType;
    outType = newOutType == null ? OUT_TYPE_EDEFAULT : newOutType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DockerPackage.RUN_OPTION__OUT_TYPE, oldOutType, outType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getPortName()
  {
    return portName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPortName(String newPortName)
  {
    String oldPortName = portName;
    portName = newPortName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DockerPackage.RUN_OPTION__PORT_NAME, oldPortName, portName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getServer()
  {
    return server;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setServer(String newServer)
  {
    String oldServer = server;
    server = newServer;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DockerPackage.RUN_OPTION__SERVER, oldServer, server));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDomainName()
  {
    return domainName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDomainName(String newDomainName)
  {
    String oldDomainName = domainName;
    domainName = newDomainName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DockerPackage.RUN_OPTION__DOMAIN_NAME, oldDomainName, domainName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getHostname()
  {
    return hostname;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setHostname(String newHostname)
  {
    String oldHostname = hostname;
    hostname = newHostname;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DockerPackage.RUN_OPTION__HOSTNAME, oldHostname, hostname));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getEnvironmentVariable()
  {
    return environmentVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEnvironmentVariable(String newEnvironmentVariable)
  {
    String oldEnvironmentVariable = environmentVariable;
    environmentVariable = newEnvironmentVariable;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DockerPackage.RUN_OPTION__ENVIRONMENT_VARIABLE, oldEnvironmentVariable, environmentVariable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getSetEnvironmentVariable()
  {
    return setEnvironmentVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSetEnvironmentVariable(String newSetEnvironmentVariable)
  {
    String oldSetEnvironmentVariable = setEnvironmentVariable;
    setEnvironmentVariable = newSetEnvironmentVariable;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DockerPackage.RUN_OPTION__SET_ENVIRONMENT_VARIABLE, oldSetEnvironmentVariable, setEnvironmentVariable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getConnectType()
  {
    return connectType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConnectType(String newConnectType)
  {
    String oldConnectType = connectType;
    connectType = newConnectType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DockerPackage.RUN_OPTION__CONNECT_TYPE, oldConnectType, connectType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ContainerNameDeclaration getContainerName()
  {
    if (containerName != null && containerName.eIsProxy())
    {
      InternalEObject oldContainerName = (InternalEObject)containerName;
      containerName = (ContainerNameDeclaration)eResolveProxy(oldContainerName);
      if (containerName != oldContainerName)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, DockerPackage.RUN_OPTION__CONTAINER_NAME, oldContainerName, containerName));
      }
    }
    return containerName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ContainerNameDeclaration basicGetContainerName()
  {
    return containerName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setContainerName(ContainerNameDeclaration newContainerName)
  {
    ContainerNameDeclaration oldContainerName = containerName;
    containerName = newContainerName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DockerPackage.RUN_OPTION__CONTAINER_NAME, oldContainerName, containerName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DockerPackage.RUN_OPTION__CONDITION:
        return getCondition();
      case DockerPackage.RUN_OPTION__OUT_TYPE:
        return getOutType();
      case DockerPackage.RUN_OPTION__PORT_NAME:
        return getPortName();
      case DockerPackage.RUN_OPTION__SERVER:
        return getServer();
      case DockerPackage.RUN_OPTION__DOMAIN_NAME:
        return getDomainName();
      case DockerPackage.RUN_OPTION__HOSTNAME:
        return getHostname();
      case DockerPackage.RUN_OPTION__ENVIRONMENT_VARIABLE:
        return getEnvironmentVariable();
      case DockerPackage.RUN_OPTION__SET_ENVIRONMENT_VARIABLE:
        return getSetEnvironmentVariable();
      case DockerPackage.RUN_OPTION__CONNECT_TYPE:
        return getConnectType();
      case DockerPackage.RUN_OPTION__CONTAINER_NAME:
        if (resolve) return getContainerName();
        return basicGetContainerName();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DockerPackage.RUN_OPTION__CONDITION:
        setCondition((String)newValue);
        return;
      case DockerPackage.RUN_OPTION__OUT_TYPE:
        setOutType((OutType)newValue);
        return;
      case DockerPackage.RUN_OPTION__PORT_NAME:
        setPortName((String)newValue);
        return;
      case DockerPackage.RUN_OPTION__SERVER:
        setServer((String)newValue);
        return;
      case DockerPackage.RUN_OPTION__DOMAIN_NAME:
        setDomainName((String)newValue);
        return;
      case DockerPackage.RUN_OPTION__HOSTNAME:
        setHostname((String)newValue);
        return;
      case DockerPackage.RUN_OPTION__ENVIRONMENT_VARIABLE:
        setEnvironmentVariable((String)newValue);
        return;
      case DockerPackage.RUN_OPTION__SET_ENVIRONMENT_VARIABLE:
        setSetEnvironmentVariable((String)newValue);
        return;
      case DockerPackage.RUN_OPTION__CONNECT_TYPE:
        setConnectType((String)newValue);
        return;
      case DockerPackage.RUN_OPTION__CONTAINER_NAME:
        setContainerName((ContainerNameDeclaration)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DockerPackage.RUN_OPTION__CONDITION:
        setCondition(CONDITION_EDEFAULT);
        return;
      case DockerPackage.RUN_OPTION__OUT_TYPE:
        setOutType(OUT_TYPE_EDEFAULT);
        return;
      case DockerPackage.RUN_OPTION__PORT_NAME:
        setPortName(PORT_NAME_EDEFAULT);
        return;
      case DockerPackage.RUN_OPTION__SERVER:
        setServer(SERVER_EDEFAULT);
        return;
      case DockerPackage.RUN_OPTION__DOMAIN_NAME:
        setDomainName(DOMAIN_NAME_EDEFAULT);
        return;
      case DockerPackage.RUN_OPTION__HOSTNAME:
        setHostname(HOSTNAME_EDEFAULT);
        return;
      case DockerPackage.RUN_OPTION__ENVIRONMENT_VARIABLE:
        setEnvironmentVariable(ENVIRONMENT_VARIABLE_EDEFAULT);
        return;
      case DockerPackage.RUN_OPTION__SET_ENVIRONMENT_VARIABLE:
        setSetEnvironmentVariable(SET_ENVIRONMENT_VARIABLE_EDEFAULT);
        return;
      case DockerPackage.RUN_OPTION__CONNECT_TYPE:
        setConnectType(CONNECT_TYPE_EDEFAULT);
        return;
      case DockerPackage.RUN_OPTION__CONTAINER_NAME:
        setContainerName((ContainerNameDeclaration)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DockerPackage.RUN_OPTION__CONDITION:
        return CONDITION_EDEFAULT == null ? condition != null : !CONDITION_EDEFAULT.equals(condition);
      case DockerPackage.RUN_OPTION__OUT_TYPE:
        return outType != OUT_TYPE_EDEFAULT;
      case DockerPackage.RUN_OPTION__PORT_NAME:
        return PORT_NAME_EDEFAULT == null ? portName != null : !PORT_NAME_EDEFAULT.equals(portName);
      case DockerPackage.RUN_OPTION__SERVER:
        return SERVER_EDEFAULT == null ? server != null : !SERVER_EDEFAULT.equals(server);
      case DockerPackage.RUN_OPTION__DOMAIN_NAME:
        return DOMAIN_NAME_EDEFAULT == null ? domainName != null : !DOMAIN_NAME_EDEFAULT.equals(domainName);
      case DockerPackage.RUN_OPTION__HOSTNAME:
        return HOSTNAME_EDEFAULT == null ? hostname != null : !HOSTNAME_EDEFAULT.equals(hostname);
      case DockerPackage.RUN_OPTION__ENVIRONMENT_VARIABLE:
        return ENVIRONMENT_VARIABLE_EDEFAULT == null ? environmentVariable != null : !ENVIRONMENT_VARIABLE_EDEFAULT.equals(environmentVariable);
      case DockerPackage.RUN_OPTION__SET_ENVIRONMENT_VARIABLE:
        return SET_ENVIRONMENT_VARIABLE_EDEFAULT == null ? setEnvironmentVariable != null : !SET_ENVIRONMENT_VARIABLE_EDEFAULT.equals(setEnvironmentVariable);
      case DockerPackage.RUN_OPTION__CONNECT_TYPE:
        return CONNECT_TYPE_EDEFAULT == null ? connectType != null : !CONNECT_TYPE_EDEFAULT.equals(connectType);
      case DockerPackage.RUN_OPTION__CONTAINER_NAME:
        return containerName != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (condition: ");
    result.append(condition);
    result.append(", outType: ");
    result.append(outType);
    result.append(", portName: ");
    result.append(portName);
    result.append(", server: ");
    result.append(server);
    result.append(", domainName: ");
    result.append(domainName);
    result.append(", hostname: ");
    result.append(hostname);
    result.append(", environmentVariable: ");
    result.append(environmentVariable);
    result.append(", setEnvironmentVariable: ");
    result.append(setEnvironmentVariable);
    result.append(", connectType: ");
    result.append(connectType);
    result.append(')');
    return result.toString();
  }

} //RunOptionImpl
