/**
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.inf.group20.docker.docker.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import uk.ac.kcl.inf.group20.docker.docker.CommitOptions;
import uk.ac.kcl.inf.group20.docker.docker.CommitStatement;
import uk.ac.kcl.inf.group20.docker.docker.ContainerNameDeclaration;
import uk.ac.kcl.inf.group20.docker.docker.DockerPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Commit Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.inf.group20.docker.docker.impl.CommitStatementImpl#getCommitOptions <em>Commit Options</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.group20.docker.docker.impl.CommitStatementImpl#getContainerName <em>Container Name</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.group20.docker.docker.impl.CommitStatementImpl#getRepository <em>Repository</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CommitStatementImpl extends StatementsImpl implements CommitStatement
{
  /**
   * The cached value of the '{@link #getCommitOptions() <em>Commit Options</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCommitOptions()
   * @generated
   * @ordered
   */
  protected EList<CommitOptions> commitOptions;

  /**
   * The cached value of the '{@link #getContainerName() <em>Container Name</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContainerName()
   * @generated
   * @ordered
   */
  protected ContainerNameDeclaration containerName;

  /**
   * The default value of the '{@link #getRepository() <em>Repository</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRepository()
   * @generated
   * @ordered
   */
  protected static final String REPOSITORY_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getRepository() <em>Repository</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRepository()
   * @generated
   * @ordered
   */
  protected String repository = REPOSITORY_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CommitStatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DockerPackage.Literals.COMMIT_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<CommitOptions> getCommitOptions()
  {
    if (commitOptions == null)
    {
      commitOptions = new EObjectContainmentEList<CommitOptions>(CommitOptions.class, this, DockerPackage.COMMIT_STATEMENT__COMMIT_OPTIONS);
    }
    return commitOptions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ContainerNameDeclaration getContainerName()
  {
    if (containerName != null && containerName.eIsProxy())
    {
      InternalEObject oldContainerName = (InternalEObject)containerName;
      containerName = (ContainerNameDeclaration)eResolveProxy(oldContainerName);
      if (containerName != oldContainerName)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, DockerPackage.COMMIT_STATEMENT__CONTAINER_NAME, oldContainerName, containerName));
      }
    }
    return containerName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ContainerNameDeclaration basicGetContainerName()
  {
    return containerName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setContainerName(ContainerNameDeclaration newContainerName)
  {
    ContainerNameDeclaration oldContainerName = containerName;
    containerName = newContainerName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DockerPackage.COMMIT_STATEMENT__CONTAINER_NAME, oldContainerName, containerName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getRepository()
  {
    return repository;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRepository(String newRepository)
  {
    String oldRepository = repository;
    repository = newRepository;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DockerPackage.COMMIT_STATEMENT__REPOSITORY, oldRepository, repository));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DockerPackage.COMMIT_STATEMENT__COMMIT_OPTIONS:
        return ((InternalEList<?>)getCommitOptions()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DockerPackage.COMMIT_STATEMENT__COMMIT_OPTIONS:
        return getCommitOptions();
      case DockerPackage.COMMIT_STATEMENT__CONTAINER_NAME:
        if (resolve) return getContainerName();
        return basicGetContainerName();
      case DockerPackage.COMMIT_STATEMENT__REPOSITORY:
        return getRepository();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DockerPackage.COMMIT_STATEMENT__COMMIT_OPTIONS:
        getCommitOptions().clear();
        getCommitOptions().addAll((Collection<? extends CommitOptions>)newValue);
        return;
      case DockerPackage.COMMIT_STATEMENT__CONTAINER_NAME:
        setContainerName((ContainerNameDeclaration)newValue);
        return;
      case DockerPackage.COMMIT_STATEMENT__REPOSITORY:
        setRepository((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DockerPackage.COMMIT_STATEMENT__COMMIT_OPTIONS:
        getCommitOptions().clear();
        return;
      case DockerPackage.COMMIT_STATEMENT__CONTAINER_NAME:
        setContainerName((ContainerNameDeclaration)null);
        return;
      case DockerPackage.COMMIT_STATEMENT__REPOSITORY:
        setRepository(REPOSITORY_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DockerPackage.COMMIT_STATEMENT__COMMIT_OPTIONS:
        return commitOptions != null && !commitOptions.isEmpty();
      case DockerPackage.COMMIT_STATEMENT__CONTAINER_NAME:
        return containerName != null;
      case DockerPackage.COMMIT_STATEMENT__REPOSITORY:
        return REPOSITORY_EDEFAULT == null ? repository != null : !REPOSITORY_EDEFAULT.equals(repository);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (repository: ");
    result.append(repository);
    result.append(')');
    return result.toString();
  }

} //CommitStatementImpl
