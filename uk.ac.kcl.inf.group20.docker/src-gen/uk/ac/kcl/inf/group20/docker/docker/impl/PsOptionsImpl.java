/**
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.inf.group20.docker.docker.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import uk.ac.kcl.inf.group20.docker.docker.DockerPackage;
import uk.ac.kcl.inf.group20.docker.docker.PsOptions;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Ps Options</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.inf.group20.docker.docker.impl.PsOptionsImpl#getOption <em>Option</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.group20.docker.docker.impl.PsOptionsImpl#getCommands <em>Commands</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.group20.docker.docker.impl.PsOptionsImpl#getFormats <em>Formats</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.group20.docker.docker.impl.PsOptionsImpl#getN <em>N</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PsOptionsImpl extends MinimalEObjectImpl.Container implements PsOptions
{
  /**
   * The default value of the '{@link #getOption() <em>Option</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOption()
   * @generated
   * @ordered
   */
  protected static final String OPTION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getOption() <em>Option</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOption()
   * @generated
   * @ordered
   */
  protected String option = OPTION_EDEFAULT;

  /**
   * The default value of the '{@link #getCommands() <em>Commands</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCommands()
   * @generated
   * @ordered
   */
  protected static final String COMMANDS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCommands() <em>Commands</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCommands()
   * @generated
   * @ordered
   */
  protected String commands = COMMANDS_EDEFAULT;

  /**
   * The default value of the '{@link #getFormats() <em>Formats</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFormats()
   * @generated
   * @ordered
   */
  protected static final String FORMATS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getFormats() <em>Formats</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFormats()
   * @generated
   * @ordered
   */
  protected String formats = FORMATS_EDEFAULT;

  /**
   * The default value of the '{@link #getN() <em>N</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getN()
   * @generated
   * @ordered
   */
  protected static final int N_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getN() <em>N</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getN()
   * @generated
   * @ordered
   */
  protected int n = N_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PsOptionsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DockerPackage.Literals.PS_OPTIONS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getOption()
  {
    return option;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOption(String newOption)
  {
    String oldOption = option;
    option = newOption;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DockerPackage.PS_OPTIONS__OPTION, oldOption, option));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getCommands()
  {
    return commands;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCommands(String newCommands)
  {
    String oldCommands = commands;
    commands = newCommands;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DockerPackage.PS_OPTIONS__COMMANDS, oldCommands, commands));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getFormats()
  {
    return formats;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFormats(String newFormats)
  {
    String oldFormats = formats;
    formats = newFormats;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DockerPackage.PS_OPTIONS__FORMATS, oldFormats, formats));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getN()
  {
    return n;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setN(int newN)
  {
    int oldN = n;
    n = newN;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DockerPackage.PS_OPTIONS__N, oldN, n));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DockerPackage.PS_OPTIONS__OPTION:
        return getOption();
      case DockerPackage.PS_OPTIONS__COMMANDS:
        return getCommands();
      case DockerPackage.PS_OPTIONS__FORMATS:
        return getFormats();
      case DockerPackage.PS_OPTIONS__N:
        return getN();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DockerPackage.PS_OPTIONS__OPTION:
        setOption((String)newValue);
        return;
      case DockerPackage.PS_OPTIONS__COMMANDS:
        setCommands((String)newValue);
        return;
      case DockerPackage.PS_OPTIONS__FORMATS:
        setFormats((String)newValue);
        return;
      case DockerPackage.PS_OPTIONS__N:
        setN((Integer)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DockerPackage.PS_OPTIONS__OPTION:
        setOption(OPTION_EDEFAULT);
        return;
      case DockerPackage.PS_OPTIONS__COMMANDS:
        setCommands(COMMANDS_EDEFAULT);
        return;
      case DockerPackage.PS_OPTIONS__FORMATS:
        setFormats(FORMATS_EDEFAULT);
        return;
      case DockerPackage.PS_OPTIONS__N:
        setN(N_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DockerPackage.PS_OPTIONS__OPTION:
        return OPTION_EDEFAULT == null ? option != null : !OPTION_EDEFAULT.equals(option);
      case DockerPackage.PS_OPTIONS__COMMANDS:
        return COMMANDS_EDEFAULT == null ? commands != null : !COMMANDS_EDEFAULT.equals(commands);
      case DockerPackage.PS_OPTIONS__FORMATS:
        return FORMATS_EDEFAULT == null ? formats != null : !FORMATS_EDEFAULT.equals(formats);
      case DockerPackage.PS_OPTIONS__N:
        return n != N_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (option: ");
    result.append(option);
    result.append(", commands: ");
    result.append(commands);
    result.append(", formats: ");
    result.append(formats);
    result.append(", n: ");
    result.append(n);
    result.append(')');
    return result.toString();
  }

} //PsOptionsImpl
