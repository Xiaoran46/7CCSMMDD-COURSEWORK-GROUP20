/**
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.inf.group20.docker.docker.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

import uk.ac.kcl.inf.group20.docker.docker.DockerPackage;
import uk.ac.kcl.inf.group20.docker.docker.RemoveImageOptions;
import uk.ac.kcl.inf.group20.docker.docker.RemoveImageStatement;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Remove Image Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.inf.group20.docker.docker.impl.RemoveImageStatementImpl#getRemoveimageOptions <em>Removeimage Options</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.group20.docker.docker.impl.RemoveImageStatementImpl#getImage <em>Image</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RemoveImageStatementImpl extends StatementsImpl implements RemoveImageStatement
{
  /**
   * The cached value of the '{@link #getRemoveimageOptions() <em>Removeimage Options</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRemoveimageOptions()
   * @generated
   * @ordered
   */
  protected EList<RemoveImageOptions> removeimageOptions;

  /**
   * The default value of the '{@link #getImage() <em>Image</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImage()
   * @generated
   * @ordered
   */
  protected static final String IMAGE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getImage() <em>Image</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImage()
   * @generated
   * @ordered
   */
  protected String image = IMAGE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RemoveImageStatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DockerPackage.Literals.REMOVE_IMAGE_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<RemoveImageOptions> getRemoveimageOptions()
  {
    if (removeimageOptions == null)
    {
      removeimageOptions = new EDataTypeEList<RemoveImageOptions>(RemoveImageOptions.class, this, DockerPackage.REMOVE_IMAGE_STATEMENT__REMOVEIMAGE_OPTIONS);
    }
    return removeimageOptions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getImage()
  {
    return image;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setImage(String newImage)
  {
    String oldImage = image;
    image = newImage;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DockerPackage.REMOVE_IMAGE_STATEMENT__IMAGE, oldImage, image));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DockerPackage.REMOVE_IMAGE_STATEMENT__REMOVEIMAGE_OPTIONS:
        return getRemoveimageOptions();
      case DockerPackage.REMOVE_IMAGE_STATEMENT__IMAGE:
        return getImage();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DockerPackage.REMOVE_IMAGE_STATEMENT__REMOVEIMAGE_OPTIONS:
        getRemoveimageOptions().clear();
        getRemoveimageOptions().addAll((Collection<? extends RemoveImageOptions>)newValue);
        return;
      case DockerPackage.REMOVE_IMAGE_STATEMENT__IMAGE:
        setImage((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DockerPackage.REMOVE_IMAGE_STATEMENT__REMOVEIMAGE_OPTIONS:
        getRemoveimageOptions().clear();
        return;
      case DockerPackage.REMOVE_IMAGE_STATEMENT__IMAGE:
        setImage(IMAGE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DockerPackage.REMOVE_IMAGE_STATEMENT__REMOVEIMAGE_OPTIONS:
        return removeimageOptions != null && !removeimageOptions.isEmpty();
      case DockerPackage.REMOVE_IMAGE_STATEMENT__IMAGE:
        return IMAGE_EDEFAULT == null ? image != null : !IMAGE_EDEFAULT.equals(image);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (removeimageOptions: ");
    result.append(removeimageOptions);
    result.append(", image: ");
    result.append(image);
    result.append(')');
    return result.toString();
  }

} //RemoveImageStatementImpl
