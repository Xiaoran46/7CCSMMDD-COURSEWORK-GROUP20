/**
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.inf.group20.docker.docker.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import uk.ac.kcl.inf.group20.docker.docker.ContainerNameDeclaration;
import uk.ac.kcl.inf.group20.docker.docker.DockerPackage;
import uk.ac.kcl.inf.group20.docker.docker.PortStatement;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Port Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.inf.group20.docker.docker.impl.PortStatementImpl#getContainerName <em>Container Name</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.group20.docker.docker.impl.PortStatementImpl#getPrivate_port <em>Private port</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PortStatementImpl extends StatementsImpl implements PortStatement
{
  /**
   * The cached value of the '{@link #getContainerName() <em>Container Name</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContainerName()
   * @generated
   * @ordered
   */
  protected ContainerNameDeclaration containerName;

  /**
   * The default value of the '{@link #getPrivate_port() <em>Private port</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPrivate_port()
   * @generated
   * @ordered
   */
  protected static final String PRIVATE_PORT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPrivate_port() <em>Private port</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPrivate_port()
   * @generated
   * @ordered
   */
  protected String private_port = PRIVATE_PORT_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PortStatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DockerPackage.Literals.PORT_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ContainerNameDeclaration getContainerName()
  {
    if (containerName != null && containerName.eIsProxy())
    {
      InternalEObject oldContainerName = (InternalEObject)containerName;
      containerName = (ContainerNameDeclaration)eResolveProxy(oldContainerName);
      if (containerName != oldContainerName)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, DockerPackage.PORT_STATEMENT__CONTAINER_NAME, oldContainerName, containerName));
      }
    }
    return containerName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ContainerNameDeclaration basicGetContainerName()
  {
    return containerName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setContainerName(ContainerNameDeclaration newContainerName)
  {
    ContainerNameDeclaration oldContainerName = containerName;
    containerName = newContainerName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DockerPackage.PORT_STATEMENT__CONTAINER_NAME, oldContainerName, containerName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getPrivate_port()
  {
    return private_port;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPrivate_port(String newPrivate_port)
  {
    String oldPrivate_port = private_port;
    private_port = newPrivate_port;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DockerPackage.PORT_STATEMENT__PRIVATE_PORT, oldPrivate_port, private_port));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DockerPackage.PORT_STATEMENT__CONTAINER_NAME:
        if (resolve) return getContainerName();
        return basicGetContainerName();
      case DockerPackage.PORT_STATEMENT__PRIVATE_PORT:
        return getPrivate_port();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DockerPackage.PORT_STATEMENT__CONTAINER_NAME:
        setContainerName((ContainerNameDeclaration)newValue);
        return;
      case DockerPackage.PORT_STATEMENT__PRIVATE_PORT:
        setPrivate_port((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DockerPackage.PORT_STATEMENT__CONTAINER_NAME:
        setContainerName((ContainerNameDeclaration)null);
        return;
      case DockerPackage.PORT_STATEMENT__PRIVATE_PORT:
        setPrivate_port(PRIVATE_PORT_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DockerPackage.PORT_STATEMENT__CONTAINER_NAME:
        return containerName != null;
      case DockerPackage.PORT_STATEMENT__PRIVATE_PORT:
        return PRIVATE_PORT_EDEFAULT == null ? private_port != null : !PRIVATE_PORT_EDEFAULT.equals(private_port);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (private_port: ");
    result.append(private_port);
    result.append(')');
    return result.toString();
  }

} //PortStatementImpl
