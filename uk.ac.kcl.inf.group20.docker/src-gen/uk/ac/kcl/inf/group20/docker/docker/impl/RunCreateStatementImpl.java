/**
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.inf.group20.docker.docker.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import uk.ac.kcl.inf.group20.docker.docker.DockerPackage;
import uk.ac.kcl.inf.group20.docker.docker.Image;
import uk.ac.kcl.inf.group20.docker.docker.RunCreateStatement;
import uk.ac.kcl.inf.group20.docker.docker.RunOption;
import uk.ac.kcl.inf.group20.docker.docker.RunorCreate;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Run Create Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.inf.group20.docker.docker.impl.RunCreateStatementImpl#getOrder <em>Order</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.group20.docker.docker.impl.RunCreateStatementImpl#getRunOptions <em>Run Options</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.group20.docker.docker.impl.RunCreateStatementImpl#getImage <em>Image</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.group20.docker.docker.impl.RunCreateStatementImpl#getCommands <em>Commands</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RunCreateStatementImpl extends StatementsImpl implements RunCreateStatement
{
  /**
   * The default value of the '{@link #getOrder() <em>Order</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOrder()
   * @generated
   * @ordered
   */
  protected static final RunorCreate ORDER_EDEFAULT = RunorCreate.RUN;

  /**
   * The cached value of the '{@link #getOrder() <em>Order</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOrder()
   * @generated
   * @ordered
   */
  protected RunorCreate order = ORDER_EDEFAULT;

  /**
   * The cached value of the '{@link #getRunOptions() <em>Run Options</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRunOptions()
   * @generated
   * @ordered
   */
  protected EList<RunOption> runOptions;

  /**
   * The default value of the '{@link #getImage() <em>Image</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImage()
   * @generated
   * @ordered
   */
  protected static final Image IMAGE_EDEFAULT = Image.UBUNTU;

  /**
   * The cached value of the '{@link #getImage() <em>Image</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImage()
   * @generated
   * @ordered
   */
  protected Image image = IMAGE_EDEFAULT;

  /**
   * The default value of the '{@link #getCommands() <em>Commands</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCommands()
   * @generated
   * @ordered
   */
  protected static final String COMMANDS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCommands() <em>Commands</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCommands()
   * @generated
   * @ordered
   */
  protected String commands = COMMANDS_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RunCreateStatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DockerPackage.Literals.RUN_CREATE_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RunorCreate getOrder()
  {
    return order;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOrder(RunorCreate newOrder)
  {
    RunorCreate oldOrder = order;
    order = newOrder == null ? ORDER_EDEFAULT : newOrder;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DockerPackage.RUN_CREATE_STATEMENT__ORDER, oldOrder, order));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<RunOption> getRunOptions()
  {
    if (runOptions == null)
    {
      runOptions = new EObjectContainmentEList<RunOption>(RunOption.class, this, DockerPackage.RUN_CREATE_STATEMENT__RUN_OPTIONS);
    }
    return runOptions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Image getImage()
  {
    return image;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setImage(Image newImage)
  {
    Image oldImage = image;
    image = newImage == null ? IMAGE_EDEFAULT : newImage;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DockerPackage.RUN_CREATE_STATEMENT__IMAGE, oldImage, image));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getCommands()
  {
    return commands;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCommands(String newCommands)
  {
    String oldCommands = commands;
    commands = newCommands;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DockerPackage.RUN_CREATE_STATEMENT__COMMANDS, oldCommands, commands));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DockerPackage.RUN_CREATE_STATEMENT__RUN_OPTIONS:
        return ((InternalEList<?>)getRunOptions()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DockerPackage.RUN_CREATE_STATEMENT__ORDER:
        return getOrder();
      case DockerPackage.RUN_CREATE_STATEMENT__RUN_OPTIONS:
        return getRunOptions();
      case DockerPackage.RUN_CREATE_STATEMENT__IMAGE:
        return getImage();
      case DockerPackage.RUN_CREATE_STATEMENT__COMMANDS:
        return getCommands();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DockerPackage.RUN_CREATE_STATEMENT__ORDER:
        setOrder((RunorCreate)newValue);
        return;
      case DockerPackage.RUN_CREATE_STATEMENT__RUN_OPTIONS:
        getRunOptions().clear();
        getRunOptions().addAll((Collection<? extends RunOption>)newValue);
        return;
      case DockerPackage.RUN_CREATE_STATEMENT__IMAGE:
        setImage((Image)newValue);
        return;
      case DockerPackage.RUN_CREATE_STATEMENT__COMMANDS:
        setCommands((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DockerPackage.RUN_CREATE_STATEMENT__ORDER:
        setOrder(ORDER_EDEFAULT);
        return;
      case DockerPackage.RUN_CREATE_STATEMENT__RUN_OPTIONS:
        getRunOptions().clear();
        return;
      case DockerPackage.RUN_CREATE_STATEMENT__IMAGE:
        setImage(IMAGE_EDEFAULT);
        return;
      case DockerPackage.RUN_CREATE_STATEMENT__COMMANDS:
        setCommands(COMMANDS_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DockerPackage.RUN_CREATE_STATEMENT__ORDER:
        return order != ORDER_EDEFAULT;
      case DockerPackage.RUN_CREATE_STATEMENT__RUN_OPTIONS:
        return runOptions != null && !runOptions.isEmpty();
      case DockerPackage.RUN_CREATE_STATEMENT__IMAGE:
        return image != IMAGE_EDEFAULT;
      case DockerPackage.RUN_CREATE_STATEMENT__COMMANDS:
        return COMMANDS_EDEFAULT == null ? commands != null : !COMMANDS_EDEFAULT.equals(commands);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (order: ");
    result.append(order);
    result.append(", image: ");
    result.append(image);
    result.append(", commands: ");
    result.append(commands);
    result.append(')');
    return result.toString();
  }

} //RunCreateStatementImpl
