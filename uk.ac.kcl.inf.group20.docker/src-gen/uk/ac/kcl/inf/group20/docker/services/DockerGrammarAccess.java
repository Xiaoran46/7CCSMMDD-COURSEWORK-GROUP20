/*
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.inf.group20.docker.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DockerGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group20.docker.Docker.Model");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsStatementsParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//Model:
		//	statements+=Statements*;
		@Override public ParserRule getRule() { return rule; }
		
		//statements+=Statements*
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }
		
		//Statements
		public RuleCall getStatementsStatementsParserRuleCall_0() { return cStatementsStatementsParserRuleCall_0; }
	}
	public class StatementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group20.docker.Docker.Statements");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRunCreateStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cContainerNameDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStartStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStopStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRestartStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cKillStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cRemoveStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cPauseStatementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cUnpauseStatementParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cExecStatementParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cPsStatementParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cInspectStatementParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cAttachStatementParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cEventStatementParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cLogsStatementParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cWaitStatementParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cExportStatementParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cPortStatementParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cCommitStatementParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cCpStatementParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cDiffStatementParserRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		private final RuleCall cImageStatementParserRuleCall_21 = (RuleCall)cAlternatives.eContents().get(21);
		private final RuleCall cRemoveImageStatementParserRuleCall_22 = (RuleCall)cAlternatives.eContents().get(22);
		
		//Statements:
		//	RunCreateStatement | ContainerNameDeclaration | StartStatement | StopStatement | RestartStatement | KillStatement |
		//	RemoveStatement | PauseStatement | UnpauseStatement | ExecStatement | PsStatement | InspectStatement |
		//	AttachStatement | EventStatement | LogsStatement | WaitStatement | ExportStatement | PortStatement | CommitStatement
		//	| CpStatement | DiffStatement | ImageStatement | RemoveImageStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//RunCreateStatement | ContainerNameDeclaration | StartStatement | StopStatement | RestartStatement | KillStatement |
		//RemoveStatement | PauseStatement | UnpauseStatement | ExecStatement | PsStatement | InspectStatement | AttachStatement |
		//EventStatement | LogsStatement | WaitStatement | ExportStatement | PortStatement | CommitStatement | CpStatement |
		//DiffStatement | ImageStatement | RemoveImageStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RunCreateStatement
		public RuleCall getRunCreateStatementParserRuleCall_0() { return cRunCreateStatementParserRuleCall_0; }
		
		//ContainerNameDeclaration
		public RuleCall getContainerNameDeclarationParserRuleCall_1() { return cContainerNameDeclarationParserRuleCall_1; }
		
		//StartStatement
		public RuleCall getStartStatementParserRuleCall_2() { return cStartStatementParserRuleCall_2; }
		
		//StopStatement
		public RuleCall getStopStatementParserRuleCall_3() { return cStopStatementParserRuleCall_3; }
		
		//RestartStatement
		public RuleCall getRestartStatementParserRuleCall_4() { return cRestartStatementParserRuleCall_4; }
		
		//KillStatement
		public RuleCall getKillStatementParserRuleCall_5() { return cKillStatementParserRuleCall_5; }
		
		//RemoveStatement
		public RuleCall getRemoveStatementParserRuleCall_6() { return cRemoveStatementParserRuleCall_6; }
		
		//PauseStatement
		public RuleCall getPauseStatementParserRuleCall_7() { return cPauseStatementParserRuleCall_7; }
		
		//UnpauseStatement
		public RuleCall getUnpauseStatementParserRuleCall_8() { return cUnpauseStatementParserRuleCall_8; }
		
		//ExecStatement
		public RuleCall getExecStatementParserRuleCall_9() { return cExecStatementParserRuleCall_9; }
		
		//PsStatement
		public RuleCall getPsStatementParserRuleCall_10() { return cPsStatementParserRuleCall_10; }
		
		//InspectStatement
		public RuleCall getInspectStatementParserRuleCall_11() { return cInspectStatementParserRuleCall_11; }
		
		//AttachStatement
		public RuleCall getAttachStatementParserRuleCall_12() { return cAttachStatementParserRuleCall_12; }
		
		//EventStatement
		public RuleCall getEventStatementParserRuleCall_13() { return cEventStatementParserRuleCall_13; }
		
		//LogsStatement
		public RuleCall getLogsStatementParserRuleCall_14() { return cLogsStatementParserRuleCall_14; }
		
		//WaitStatement
		public RuleCall getWaitStatementParserRuleCall_15() { return cWaitStatementParserRuleCall_15; }
		
		//ExportStatement
		public RuleCall getExportStatementParserRuleCall_16() { return cExportStatementParserRuleCall_16; }
		
		//PortStatement
		public RuleCall getPortStatementParserRuleCall_17() { return cPortStatementParserRuleCall_17; }
		
		//CommitStatement
		public RuleCall getCommitStatementParserRuleCall_18() { return cCommitStatementParserRuleCall_18; }
		
		//CpStatement
		public RuleCall getCpStatementParserRuleCall_19() { return cCpStatementParserRuleCall_19; }
		
		//DiffStatement
		public RuleCall getDiffStatementParserRuleCall_20() { return cDiffStatementParserRuleCall_20; }
		
		//ImageStatement
		public RuleCall getImageStatementParserRuleCall_21() { return cImageStatementParserRuleCall_21; }
		
		//RemoveImageStatement
		public RuleCall getRemoveImageStatementParserRuleCall_22() { return cRemoveImageStatementParserRuleCall_22; }
	}
	public class RemoveImageStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group20.docker.Docker.RemoveImageStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRemoveImgKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRemoveimageOptionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRemoveimageOptionsRemoveImageOptionsEnumRuleCall_1_0 = (RuleCall)cRemoveimageOptionsAssignment_1.eContents().get(0);
		private final Assignment cImageAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImageSTRINGTerminalRuleCall_2_0 = (RuleCall)cImageAssignment_2.eContents().get(0);
		
		////Remove image statement
		//RemoveImageStatement:
		//	'removeImg' removeimageOptions+=RemoveImageOptions* image=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'removeImg' removeimageOptions+=RemoveImageOptions* image=STRING
		public Group getGroup() { return cGroup; }
		
		//'removeImg'
		public Keyword getRemoveImgKeyword_0() { return cRemoveImgKeyword_0; }
		
		//removeimageOptions+=RemoveImageOptions*
		public Assignment getRemoveimageOptionsAssignment_1() { return cRemoveimageOptionsAssignment_1; }
		
		//RemoveImageOptions
		public RuleCall getRemoveimageOptionsRemoveImageOptionsEnumRuleCall_1_0() { return cRemoveimageOptionsRemoveImageOptionsEnumRuleCall_1_0; }
		
		//image=STRING
		public Assignment getImageAssignment_2() { return cImageAssignment_2; }
		
		//STRING
		public RuleCall getImageSTRINGTerminalRuleCall_2_0() { return cImageSTRINGTerminalRuleCall_2_0; }
	}
	public class ImageStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group20.docker.Docker.ImageStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImageOptionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImageOptionsImageOptionsParserRuleCall_1_0 = (RuleCall)cImageOptionsAssignment_1.eContents().get(0);
		private final Assignment cRepositoryAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRepositorySTRINGTerminalRuleCall_2_0 = (RuleCall)cRepositoryAssignment_2.eContents().get(0);
		
		////Image Statement
		//ImageStatement:
		//	'image' imageOptions+=ImageOptions* repository=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'image' imageOptions+=ImageOptions* repository=STRING
		public Group getGroup() { return cGroup; }
		
		//'image'
		public Keyword getImageKeyword_0() { return cImageKeyword_0; }
		
		//imageOptions+=ImageOptions*
		public Assignment getImageOptionsAssignment_1() { return cImageOptionsAssignment_1; }
		
		//ImageOptions
		public RuleCall getImageOptionsImageOptionsParserRuleCall_1_0() { return cImageOptionsImageOptionsParserRuleCall_1_0; }
		
		//repository=STRING
		public Assignment getRepositoryAssignment_2() { return cRepositoryAssignment_2; }
		
		//STRING
		public RuleCall getRepositorySTRINGTerminalRuleCall_2_0() { return cRepositorySTRINGTerminalRuleCall_2_0; }
	}
	public class ImageOptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group20.docker.Docker.ImageOptions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cImageOptionsAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOptionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cOptionShow_allKeyword_0_1_0 = (Keyword)cOptionAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cImageOptionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOptionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOptionShow_digestsKeyword_1_1_0 = (Keyword)cOptionAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cOptionAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cOptionFilterKeyword_2_0_0 = (Keyword)cOptionAssignment_2_0.eContents().get(0);
		private final Assignment cConditionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cConditionSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cConditionAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cOptionAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cOptionFormatKeyword_3_0_0 = (Keyword)cOptionAssignment_3_0.eContents().get(0);
		private final Assignment cFormatsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFormatsSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cFormatsAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cImageOptionsAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cOptionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final Keyword cOptionCompleteKeyword_4_1_0 = (Keyword)cOptionAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cImageOptionsAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cOptionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final Keyword cOptionShow_IDKeyword_5_1_0 = (Keyword)cOptionAssignment_5_1.eContents().get(0);
		
		////Image options
		//ImageOptions:
		//	{ImageOptions} option='show_all' | {ImageOptions} option='show_digests' | option='filter' condition=STRING | option=
		//	'format' formats=STRING | {ImageOptions} option='complete' | {ImageOptions} option='show_ID';
		@Override public ParserRule getRule() { return rule; }
		
		//{ImageOptions} option='show_all' | {ImageOptions} option='show_digests' | option='filter' condition=STRING | option=
		//'format' formats=STRING | {ImageOptions} option='complete' | {ImageOptions} option='show_ID'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ImageOptions} option='show_all'
		public Group getGroup_0() { return cGroup_0; }
		
		//{ImageOptions}
		public Action getImageOptionsAction_0_0() { return cImageOptionsAction_0_0; }
		
		//option='show_all'
		public Assignment getOptionAssignment_0_1() { return cOptionAssignment_0_1; }
		
		//'show_all'
		public Keyword getOptionShow_allKeyword_0_1_0() { return cOptionShow_allKeyword_0_1_0; }
		
		//{ImageOptions} option='show_digests'
		public Group getGroup_1() { return cGroup_1; }
		
		//{ImageOptions}
		public Action getImageOptionsAction_1_0() { return cImageOptionsAction_1_0; }
		
		//option='show_digests'
		public Assignment getOptionAssignment_1_1() { return cOptionAssignment_1_1; }
		
		//'show_digests'
		public Keyword getOptionShow_digestsKeyword_1_1_0() { return cOptionShow_digestsKeyword_1_1_0; }
		
		//option='filter' condition=STRING
		public Group getGroup_2() { return cGroup_2; }
		
		//option='filter'
		public Assignment getOptionAssignment_2_0() { return cOptionAssignment_2_0; }
		
		//'filter'
		public Keyword getOptionFilterKeyword_2_0_0() { return cOptionFilterKeyword_2_0_0; }
		
		//condition=STRING
		public Assignment getConditionAssignment_2_1() { return cConditionAssignment_2_1; }
		
		//STRING
		public RuleCall getConditionSTRINGTerminalRuleCall_2_1_0() { return cConditionSTRINGTerminalRuleCall_2_1_0; }
		
		//option='format' formats=STRING
		public Group getGroup_3() { return cGroup_3; }
		
		//option='format'
		public Assignment getOptionAssignment_3_0() { return cOptionAssignment_3_0; }
		
		//'format'
		public Keyword getOptionFormatKeyword_3_0_0() { return cOptionFormatKeyword_3_0_0; }
		
		//formats=STRING
		public Assignment getFormatsAssignment_3_1() { return cFormatsAssignment_3_1; }
		
		//STRING
		public RuleCall getFormatsSTRINGTerminalRuleCall_3_1_0() { return cFormatsSTRINGTerminalRuleCall_3_1_0; }
		
		//{ImageOptions} option='complete'
		public Group getGroup_4() { return cGroup_4; }
		
		//{ImageOptions}
		public Action getImageOptionsAction_4_0() { return cImageOptionsAction_4_0; }
		
		//option='complete'
		public Assignment getOptionAssignment_4_1() { return cOptionAssignment_4_1; }
		
		//'complete'
		public Keyword getOptionCompleteKeyword_4_1_0() { return cOptionCompleteKeyword_4_1_0; }
		
		//{ImageOptions} option='show_ID'
		public Group getGroup_5() { return cGroup_5; }
		
		//{ImageOptions}
		public Action getImageOptionsAction_5_0() { return cImageOptionsAction_5_0; }
		
		//option='show_ID'
		public Assignment getOptionAssignment_5_1() { return cOptionAssignment_5_1; }
		
		//'show_ID'
		public Keyword getOptionShow_IDKeyword_5_1_0() { return cOptionShow_IDKeyword_5_1_0; }
	}
	public class DiffStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group20.docker.Docker.DiffStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheck_differentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContainerNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cContainerNameContainerNameDeclarationCrossReference_1_0 = (CrossReference)cContainerNameAssignment_1.eContents().get(0);
		private final RuleCall cContainerNameContainerNameDeclarationIDTerminalRuleCall_1_0_1 = (RuleCall)cContainerNameContainerNameDeclarationCrossReference_1_0.eContents().get(1);
		
		////Difference statement
		//DiffStatement:
		//	'check_different' containerName=[ContainerNameDeclaration];
		@Override public ParserRule getRule() { return rule; }
		
		//'check_different' containerName=[ContainerNameDeclaration]
		public Group getGroup() { return cGroup; }
		
		//'check_different'
		public Keyword getCheck_differentKeyword_0() { return cCheck_differentKeyword_0; }
		
		//containerName=[ContainerNameDeclaration]
		public Assignment getContainerNameAssignment_1() { return cContainerNameAssignment_1; }
		
		//[ContainerNameDeclaration]
		public CrossReference getContainerNameContainerNameDeclarationCrossReference_1_0() { return cContainerNameContainerNameDeclarationCrossReference_1_0; }
		
		//ID
		public RuleCall getContainerNameContainerNameDeclarationIDTerminalRuleCall_1_0_1() { return cContainerNameContainerNameDeclarationIDTerminalRuleCall_1_0_1; }
	}
	public class CpStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group20.docker.Docker.CpStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCopyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLinkAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLinkLinkOptionEnumRuleCall_1_0 = (RuleCall)cLinkAssignment_1.eContents().get(0);
		private final Assignment cSourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSourceSourceOptionParserRuleCall_2_0 = (RuleCall)cSourceAssignment_2.eContents().get(0);
		private final Assignment cDestinationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDestinationSTRINGTerminalRuleCall_3_0 = (RuleCall)cDestinationAssignment_3.eContents().get(0);
		
		////Copy statement
		//CpStatement:
		//	'copy' link=LinkOption source=SourceOption destination=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'copy' link=LinkOption source=SourceOption destination=STRING
		public Group getGroup() { return cGroup; }
		
		//'copy'
		public Keyword getCopyKeyword_0() { return cCopyKeyword_0; }
		
		//link=LinkOption
		public Assignment getLinkAssignment_1() { return cLinkAssignment_1; }
		
		//LinkOption
		public RuleCall getLinkLinkOptionEnumRuleCall_1_0() { return cLinkLinkOptionEnumRuleCall_1_0; }
		
		//source=SourceOption
		public Assignment getSourceAssignment_2() { return cSourceAssignment_2; }
		
		//SourceOption
		public RuleCall getSourceSourceOptionParserRuleCall_2_0() { return cSourceSourceOptionParserRuleCall_2_0; }
		
		//destination=STRING
		public Assignment getDestinationAssignment_3() { return cDestinationAssignment_3; }
		
		//STRING
		public RuleCall getDestinationSTRINGTerminalRuleCall_3_0() { return cDestinationSTRINGTerminalRuleCall_3_0; }
	}
	public class SourceOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group20.docker.Docker.SourceOption");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOption1Assignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cOption1STRINGTerminalRuleCall_0_0 = (RuleCall)cOption1Assignment_0.eContents().get(0);
		private final Assignment cOption2Assignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cOption2ContainerNameDeclarationCrossReference_1_0 = (CrossReference)cOption2Assignment_1.eContents().get(0);
		private final RuleCall cOption2ContainerNameDeclarationIDTerminalRuleCall_1_0_1 = (RuleCall)cOption2ContainerNameDeclarationCrossReference_1_0.eContents().get(1);
		
		//SourceOption:
		//	option1=STRING | option2=[ContainerNameDeclaration];
		@Override public ParserRule getRule() { return rule; }
		
		//option1=STRING | option2=[ContainerNameDeclaration]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//option1=STRING
		public Assignment getOption1Assignment_0() { return cOption1Assignment_0; }
		
		//STRING
		public RuleCall getOption1STRINGTerminalRuleCall_0_0() { return cOption1STRINGTerminalRuleCall_0_0; }
		
		//option2=[ContainerNameDeclaration]
		public Assignment getOption2Assignment_1() { return cOption2Assignment_1; }
		
		//[ContainerNameDeclaration]
		public CrossReference getOption2ContainerNameDeclarationCrossReference_1_0() { return cOption2ContainerNameDeclarationCrossReference_1_0; }
		
		//ID
		public RuleCall getOption2ContainerNameDeclarationIDTerminalRuleCall_1_0_1() { return cOption2ContainerNameDeclarationIDTerminalRuleCall_1_0_1; }
	}
	public class CommitStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group20.docker.Docker.CommitStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCommitOptionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommitOptionsCommitOptionsParserRuleCall_1_0 = (RuleCall)cCommitOptionsAssignment_1.eContents().get(0);
		private final Assignment cContainerNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cContainerNameContainerNameDeclarationCrossReference_2_0 = (CrossReference)cContainerNameAssignment_2.eContents().get(0);
		private final RuleCall cContainerNameContainerNameDeclarationIDTerminalRuleCall_2_0_1 = (RuleCall)cContainerNameContainerNameDeclarationCrossReference_2_0.eContents().get(1);
		private final Assignment cRepositoryAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRepositorySTRINGTerminalRuleCall_3_0 = (RuleCall)cRepositoryAssignment_3.eContents().get(0);
		
		////Commit statement
		//CommitStatement:
		//	'commit' commitOptions+=CommitOptions* containerName=[ContainerNameDeclaration] repository=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'commit' commitOptions+=CommitOptions* containerName=[ContainerNameDeclaration] repository=STRING
		public Group getGroup() { return cGroup; }
		
		//'commit'
		public Keyword getCommitKeyword_0() { return cCommitKeyword_0; }
		
		//commitOptions+=CommitOptions*
		public Assignment getCommitOptionsAssignment_1() { return cCommitOptionsAssignment_1; }
		
		//CommitOptions
		public RuleCall getCommitOptionsCommitOptionsParserRuleCall_1_0() { return cCommitOptionsCommitOptionsParserRuleCall_1_0; }
		
		//containerName=[ContainerNameDeclaration]
		public Assignment getContainerNameAssignment_2() { return cContainerNameAssignment_2; }
		
		//[ContainerNameDeclaration]
		public CrossReference getContainerNameContainerNameDeclarationCrossReference_2_0() { return cContainerNameContainerNameDeclarationCrossReference_2_0; }
		
		//ID
		public RuleCall getContainerNameContainerNameDeclarationIDTerminalRuleCall_2_0_1() { return cContainerNameContainerNameDeclarationIDTerminalRuleCall_2_0_1; }
		
		//repository=STRING
		public Assignment getRepositoryAssignment_3() { return cRepositoryAssignment_3; }
		
		//STRING
		public RuleCall getRepositorySTRINGTerminalRuleCall_3_0() { return cRepositorySTRINGTerminalRuleCall_3_0; }
	}
	public class CommitOptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group20.docker.Docker.CommitOptions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cOptionAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cOptionAuthorKeyword_0_0_0 = (Keyword)cOptionAssignment_0_0.eContents().get(0);
		private final Assignment cAuthorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cAuthorSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cAuthorAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cCommitOptionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOptionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOptionCreateKeyword_1_1_0 = (Keyword)cOptionAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cOptionAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cOptionCommit_descriptionKeyword_2_0_0 = (Keyword)cOptionAssignment_2_0.eContents().get(0);
		private final Assignment cDescriptionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cDescriptionAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cCommitOptionsAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cOptionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Keyword cOptionPause_when_commitKeyword_3_1_0 = (Keyword)cOptionAssignment_3_1.eContents().get(0);
		
		////Commit options
		//CommitOptions:
		//	option='author' author=STRING | {CommitOptions} option='create' | option='commit_description' description=STRING |
		//	{CommitOptions} option='pause_when_commit';
		@Override public ParserRule getRule() { return rule; }
		
		//option='author' author=STRING | {CommitOptions} option='create' | option='commit_description' description=STRING |
		//{CommitOptions} option='pause_when_commit'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//option='author' author=STRING
		public Group getGroup_0() { return cGroup_0; }
		
		//option='author'
		public Assignment getOptionAssignment_0_0() { return cOptionAssignment_0_0; }
		
		//'author'
		public Keyword getOptionAuthorKeyword_0_0_0() { return cOptionAuthorKeyword_0_0_0; }
		
		//author=STRING
		public Assignment getAuthorAssignment_0_1() { return cAuthorAssignment_0_1; }
		
		//STRING
		public RuleCall getAuthorSTRINGTerminalRuleCall_0_1_0() { return cAuthorSTRINGTerminalRuleCall_0_1_0; }
		
		//{CommitOptions} option='create'
		public Group getGroup_1() { return cGroup_1; }
		
		//{CommitOptions}
		public Action getCommitOptionsAction_1_0() { return cCommitOptionsAction_1_0; }
		
		//option='create'
		public Assignment getOptionAssignment_1_1() { return cOptionAssignment_1_1; }
		
		//'create'
		public Keyword getOptionCreateKeyword_1_1_0() { return cOptionCreateKeyword_1_1_0; }
		
		//option='commit_description' description=STRING
		public Group getGroup_2() { return cGroup_2; }
		
		//option='commit_description'
		public Assignment getOptionAssignment_2_0() { return cOptionAssignment_2_0; }
		
		//'commit_description'
		public Keyword getOptionCommit_descriptionKeyword_2_0_0() { return cOptionCommit_descriptionKeyword_2_0_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_2_1() { return cDescriptionAssignment_2_1; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_1_0() { return cDescriptionSTRINGTerminalRuleCall_2_1_0; }
		
		//{CommitOptions} option='pause_when_commit'
		public Group getGroup_3() { return cGroup_3; }
		
		//{CommitOptions}
		public Action getCommitOptionsAction_3_0() { return cCommitOptionsAction_3_0; }
		
		//option='pause_when_commit'
		public Assignment getOptionAssignment_3_1() { return cOptionAssignment_3_1; }
		
		//'pause_when_commit'
		public Keyword getOptionPause_when_commitKeyword_3_1_0() { return cOptionPause_when_commitKeyword_3_1_0; }
	}
	public class PortStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group20.docker.Docker.PortStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPortKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContainerNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cContainerNameContainerNameDeclarationCrossReference_1_0 = (CrossReference)cContainerNameAssignment_1.eContents().get(0);
		private final RuleCall cContainerNameContainerNameDeclarationIDTerminalRuleCall_1_0_1 = (RuleCall)cContainerNameContainerNameDeclarationCrossReference_1_0.eContents().get(1);
		private final Assignment cPrivate_portAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPrivate_portSTRINGTerminalRuleCall_2_0 = (RuleCall)cPrivate_portAssignment_2.eContents().get(0);
		
		////Port Statement
		//PortStatement:
		//	'port' containerName=[ContainerNameDeclaration] private_port=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'port' containerName=[ContainerNameDeclaration] private_port=STRING
		public Group getGroup() { return cGroup; }
		
		//'port'
		public Keyword getPortKeyword_0() { return cPortKeyword_0; }
		
		//containerName=[ContainerNameDeclaration]
		public Assignment getContainerNameAssignment_1() { return cContainerNameAssignment_1; }
		
		//[ContainerNameDeclaration]
		public CrossReference getContainerNameContainerNameDeclarationCrossReference_1_0() { return cContainerNameContainerNameDeclarationCrossReference_1_0; }
		
		//ID
		public RuleCall getContainerNameContainerNameDeclarationIDTerminalRuleCall_1_0_1() { return cContainerNameContainerNameDeclarationIDTerminalRuleCall_1_0_1; }
		
		//private_port=STRING
		public Assignment getPrivate_portAssignment_2() { return cPrivate_portAssignment_2; }
		
		//STRING
		public RuleCall getPrivate_portSTRINGTerminalRuleCall_2_0() { return cPrivate_portSTRINGTerminalRuleCall_2_0; }
	}
	public class ExportStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group20.docker.Docker.ExportStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFile_pathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFile_pathSTRINGTerminalRuleCall_1_0 = (RuleCall)cFile_pathAssignment_1.eContents().get(0);
		private final Assignment cContainerNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cContainerNameContainerNameDeclarationCrossReference_2_0 = (CrossReference)cContainerNameAssignment_2.eContents().get(0);
		private final RuleCall cContainerNameContainerNameDeclarationIDTerminalRuleCall_2_0_1 = (RuleCall)cContainerNameContainerNameDeclarationCrossReference_2_0.eContents().get(1);
		
		////Export statement
		//ExportStatement:
		//	'export' file_path=STRING containerName=[ContainerNameDeclaration];
		@Override public ParserRule getRule() { return rule; }
		
		//'export' file_path=STRING containerName=[ContainerNameDeclaration]
		public Group getGroup() { return cGroup; }
		
		//'export'
		public Keyword getExportKeyword_0() { return cExportKeyword_0; }
		
		//file_path=STRING
		public Assignment getFile_pathAssignment_1() { return cFile_pathAssignment_1; }
		
		//STRING
		public RuleCall getFile_pathSTRINGTerminalRuleCall_1_0() { return cFile_pathSTRINGTerminalRuleCall_1_0; }
		
		//containerName=[ContainerNameDeclaration]
		public Assignment getContainerNameAssignment_2() { return cContainerNameAssignment_2; }
		
		//[ContainerNameDeclaration]
		public CrossReference getContainerNameContainerNameDeclarationCrossReference_2_0() { return cContainerNameContainerNameDeclarationCrossReference_2_0; }
		
		//ID
		public RuleCall getContainerNameContainerNameDeclarationIDTerminalRuleCall_2_0_1() { return cContainerNameContainerNameDeclarationIDTerminalRuleCall_2_0_1; }
	}
	public class WaitStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group20.docker.Docker.WaitStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWaitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContainerNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cContainerNameContainerNameDeclarationCrossReference_1_0 = (CrossReference)cContainerNameAssignment_1.eContents().get(0);
		private final RuleCall cContainerNameContainerNameDeclarationIDTerminalRuleCall_1_0_1 = (RuleCall)cContainerNameContainerNameDeclarationCrossReference_1_0.eContents().get(1);
		
		////Wait statement
		//WaitStatement:
		//	'wait' containerName=[ContainerNameDeclaration];
		@Override public ParserRule getRule() { return rule; }
		
		//'wait' containerName=[ContainerNameDeclaration]
		public Group getGroup() { return cGroup; }
		
		//'wait'
		public Keyword getWaitKeyword_0() { return cWaitKeyword_0; }
		
		//containerName=[ContainerNameDeclaration]
		public Assignment getContainerNameAssignment_1() { return cContainerNameAssignment_1; }
		
		//[ContainerNameDeclaration]
		public CrossReference getContainerNameContainerNameDeclarationCrossReference_1_0() { return cContainerNameContainerNameDeclarationCrossReference_1_0; }
		
		//ID
		public RuleCall getContainerNameContainerNameDeclarationIDTerminalRuleCall_1_0_1() { return cContainerNameContainerNameDeclarationIDTerminalRuleCall_1_0_1; }
	}
	public class LogsStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group20.docker.Docker.LogsStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLogsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLogOptionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLogOptionsLogOptionsParserRuleCall_1_0 = (RuleCall)cLogOptionsAssignment_1.eContents().get(0);
		private final Assignment cContainerNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cContainerNameContainerNameDeclarationCrossReference_2_0 = (CrossReference)cContainerNameAssignment_2.eContents().get(0);
		private final RuleCall cContainerNameContainerNameDeclarationIDTerminalRuleCall_2_0_1 = (RuleCall)cContainerNameContainerNameDeclarationCrossReference_2_0.eContents().get(1);
		
		////Log statement
		//LogsStatement:
		//	'logs' logOptions+=LogOptions* containerName=[ContainerNameDeclaration];
		@Override public ParserRule getRule() { return rule; }
		
		//'logs' logOptions+=LogOptions* containerName=[ContainerNameDeclaration]
		public Group getGroup() { return cGroup; }
		
		//'logs'
		public Keyword getLogsKeyword_0() { return cLogsKeyword_0; }
		
		//logOptions+=LogOptions*
		public Assignment getLogOptionsAssignment_1() { return cLogOptionsAssignment_1; }
		
		//LogOptions
		public RuleCall getLogOptionsLogOptionsParserRuleCall_1_0() { return cLogOptionsLogOptionsParserRuleCall_1_0; }
		
		//containerName=[ContainerNameDeclaration]
		public Assignment getContainerNameAssignment_2() { return cContainerNameAssignment_2; }
		
		//[ContainerNameDeclaration]
		public CrossReference getContainerNameContainerNameDeclarationCrossReference_2_0() { return cContainerNameContainerNameDeclarationCrossReference_2_0; }
		
		//ID
		public RuleCall getContainerNameContainerNameDeclarationIDTerminalRuleCall_2_0_1() { return cContainerNameContainerNameDeclarationIDTerminalRuleCall_2_0_1; }
	}
	public class LogOptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group20.docker.Docker.LogOptions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cLogOptionsAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOptionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cOptionTrack_outputKeyword_0_1_0 = (Keyword)cOptionAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cOptionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cOptionSinceKeyword_1_0_0 = (Keyword)cOptionAssignment_1_0.eContents().get(0);
		private final Assignment cTimeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTimeSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cTimeAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cLogOptionsAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cOptionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cOptionShow_timestampKeyword_2_1_0 = (Keyword)cOptionAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cOptionAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cOptionShow_tail_n_logsKeyword_3_0_0 = (Keyword)cOptionAssignment_3_0.eContents().get(0);
		private final Assignment cNumberAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNumberINTTerminalRuleCall_3_1_0 = (RuleCall)cNumberAssignment_3_1.eContents().get(0);
		
		////Log options
		//LogOptions:
		//	{LogOptions} option='track_output' | option='since' time=STRING | {LogOptions} option='show_timestamp' | option=
		//	'show_tail_n_logs' number=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//{LogOptions} option='track_output' | option='since' time=STRING | {LogOptions} option='show_timestamp' | option=
		//'show_tail_n_logs' number=INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{LogOptions} option='track_output'
		public Group getGroup_0() { return cGroup_0; }
		
		//{LogOptions}
		public Action getLogOptionsAction_0_0() { return cLogOptionsAction_0_0; }
		
		//option='track_output'
		public Assignment getOptionAssignment_0_1() { return cOptionAssignment_0_1; }
		
		//'track_output'
		public Keyword getOptionTrack_outputKeyword_0_1_0() { return cOptionTrack_outputKeyword_0_1_0; }
		
		//option='since' time=STRING
		public Group getGroup_1() { return cGroup_1; }
		
		//option='since'
		public Assignment getOptionAssignment_1_0() { return cOptionAssignment_1_0; }
		
		//'since'
		public Keyword getOptionSinceKeyword_1_0_0() { return cOptionSinceKeyword_1_0_0; }
		
		//time=STRING
		public Assignment getTimeAssignment_1_1() { return cTimeAssignment_1_1; }
		
		//STRING
		public RuleCall getTimeSTRINGTerminalRuleCall_1_1_0() { return cTimeSTRINGTerminalRuleCall_1_1_0; }
		
		//{LogOptions} option='show_timestamp'
		public Group getGroup_2() { return cGroup_2; }
		
		//{LogOptions}
		public Action getLogOptionsAction_2_0() { return cLogOptionsAction_2_0; }
		
		//option='show_timestamp'
		public Assignment getOptionAssignment_2_1() { return cOptionAssignment_2_1; }
		
		//'show_timestamp'
		public Keyword getOptionShow_timestampKeyword_2_1_0() { return cOptionShow_timestampKeyword_2_1_0; }
		
		//option='show_tail_n_logs' number=INT
		public Group getGroup_3() { return cGroup_3; }
		
		//option='show_tail_n_logs'
		public Assignment getOptionAssignment_3_0() { return cOptionAssignment_3_0; }
		
		//'show_tail_n_logs'
		public Keyword getOptionShow_tail_n_logsKeyword_3_0_0() { return cOptionShow_tail_n_logsKeyword_3_0_0; }
		
		//number=INT
		public Assignment getNumberAssignment_3_1() { return cNumberAssignment_3_1; }
		
		//INT
		public RuleCall getNumberINTTerminalRuleCall_3_1_0() { return cNumberINTTerminalRuleCall_3_1_0; }
	}
	public class EventStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group20.docker.Docker.EventStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEventOptionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEventOptionsEventOptionsParserRuleCall_1_0 = (RuleCall)cEventOptionsAssignment_1.eContents().get(0);
		
		////Event statement
		//EventStatement:
		//	'events' eventOptions+=EventOptions+;
		@Override public ParserRule getRule() { return rule; }
		
		//'events' eventOptions+=EventOptions+
		public Group getGroup() { return cGroup; }
		
		//'events'
		public Keyword getEventsKeyword_0() { return cEventsKeyword_0; }
		
		//eventOptions+=EventOptions+
		public Assignment getEventOptionsAssignment_1() { return cEventOptionsAssignment_1; }
		
		//EventOptions
		public RuleCall getEventOptionsEventOptionsParserRuleCall_1_0() { return cEventOptionsEventOptionsParserRuleCall_1_0; }
	}
	public class EventOptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group20.docker.Docker.EventOptions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cOptionAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cOptionFilterKeyword_0_0_0 = (Keyword)cOptionAssignment_0_0.eContents().get(0);
		private final Assignment cCommandsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cCommandsSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cCommandsAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cOptionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cOptionSinceKeyword_1_0_0 = (Keyword)cOptionAssignment_1_0.eContents().get(0);
		private final Assignment cTimeSAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTimeSSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cTimeSAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cOptionAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cOptionUntilKeyword_2_0_0 = (Keyword)cOptionAssignment_2_0.eContents().get(0);
		private final Assignment cTimeUAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTimeUSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cTimeUAssignment_2_1.eContents().get(0);
		
		////Event options
		//EventOptions:
		//	option='filter' commands=STRING | option='since' timeS=STRING | option='until' timeU=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//option='filter' commands=STRING | option='since' timeS=STRING | option='until' timeU=STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//option='filter' commands=STRING
		public Group getGroup_0() { return cGroup_0; }
		
		//option='filter'
		public Assignment getOptionAssignment_0_0() { return cOptionAssignment_0_0; }
		
		//'filter'
		public Keyword getOptionFilterKeyword_0_0_0() { return cOptionFilterKeyword_0_0_0; }
		
		//commands=STRING
		public Assignment getCommandsAssignment_0_1() { return cCommandsAssignment_0_1; }
		
		//STRING
		public RuleCall getCommandsSTRINGTerminalRuleCall_0_1_0() { return cCommandsSTRINGTerminalRuleCall_0_1_0; }
		
		//option='since' timeS=STRING
		public Group getGroup_1() { return cGroup_1; }
		
		//option='since'
		public Assignment getOptionAssignment_1_0() { return cOptionAssignment_1_0; }
		
		//'since'
		public Keyword getOptionSinceKeyword_1_0_0() { return cOptionSinceKeyword_1_0_0; }
		
		//timeS=STRING
		public Assignment getTimeSAssignment_1_1() { return cTimeSAssignment_1_1; }
		
		//STRING
		public RuleCall getTimeSSTRINGTerminalRuleCall_1_1_0() { return cTimeSSTRINGTerminalRuleCall_1_1_0; }
		
		//option='until' timeU=STRING
		public Group getGroup_2() { return cGroup_2; }
		
		//option='until'
		public Assignment getOptionAssignment_2_0() { return cOptionAssignment_2_0; }
		
		//'until'
		public Keyword getOptionUntilKeyword_2_0_0() { return cOptionUntilKeyword_2_0_0; }
		
		//timeU=STRING
		public Assignment getTimeUAssignment_2_1() { return cTimeUAssignment_2_1; }
		
		//STRING
		public RuleCall getTimeUSTRINGTerminalRuleCall_2_1_0() { return cTimeUSTRINGTerminalRuleCall_2_1_0; }
	}
	public class AttachStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group20.docker.Docker.AttachStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttachKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAttachOptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttachOptionAttachOptionEnumRuleCall_1_0 = (RuleCall)cAttachOptionAssignment_1.eContents().get(0);
		private final Assignment cContainerNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cContainerNameContainerNameDeclarationCrossReference_2_0 = (CrossReference)cContainerNameAssignment_2.eContents().get(0);
		private final RuleCall cContainerNameContainerNameDeclarationIDTerminalRuleCall_2_0_1 = (RuleCall)cContainerNameContainerNameDeclarationCrossReference_2_0.eContents().get(1);
		
		////Attach statement
		//AttachStatement:
		//	'attach' attachOption=AttachOption containerName=[ContainerNameDeclaration];
		@Override public ParserRule getRule() { return rule; }
		
		//'attach' attachOption=AttachOption containerName=[ContainerNameDeclaration]
		public Group getGroup() { return cGroup; }
		
		//'attach'
		public Keyword getAttachKeyword_0() { return cAttachKeyword_0; }
		
		//attachOption=AttachOption
		public Assignment getAttachOptionAssignment_1() { return cAttachOptionAssignment_1; }
		
		//AttachOption
		public RuleCall getAttachOptionAttachOptionEnumRuleCall_1_0() { return cAttachOptionAttachOptionEnumRuleCall_1_0; }
		
		//containerName=[ContainerNameDeclaration]
		public Assignment getContainerNameAssignment_2() { return cContainerNameAssignment_2; }
		
		//[ContainerNameDeclaration]
		public CrossReference getContainerNameContainerNameDeclarationCrossReference_2_0() { return cContainerNameContainerNameDeclarationCrossReference_2_0; }
		
		//ID
		public RuleCall getContainerNameContainerNameDeclarationIDTerminalRuleCall_2_0_1() { return cContainerNameContainerNameDeclarationIDTerminalRuleCall_2_0_1; }
	}
	public class InspectStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group20.docker.Docker.InspectStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInspectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInspectOptionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInspectOptionsInspectOptionsParserRuleCall_1_0 = (RuleCall)cInspectOptionsAssignment_1.eContents().get(0);
		
		////Inspect statement
		//InspectStatement:
		//	'inspect' inspectOptions+=InspectOptions+;
		@Override public ParserRule getRule() { return rule; }
		
		//'inspect' inspectOptions+=InspectOptions+
		public Group getGroup() { return cGroup; }
		
		//'inspect'
		public Keyword getInspectKeyword_0() { return cInspectKeyword_0; }
		
		//inspectOptions+=InspectOptions+
		public Assignment getInspectOptionsAssignment_1() { return cInspectOptionsAssignment_1; }
		
		//InspectOptions
		public RuleCall getInspectOptionsInspectOptionsParserRuleCall_1_0() { return cInspectOptionsInspectOptionsParserRuleCall_1_0; }
	}
	public class InspectOptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group20.docker.Docker.InspectOptions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cOptionAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cOptionFormatKeyword_0_0_0 = (Keyword)cOptionAssignment_0_0.eContents().get(0);
		private final Assignment cFormatsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cFormatsSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cFormatsAssignment_0_1.eContents().get(0);
		private final Assignment cOptionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cOptionShow_sizeKeyword_1_0 = (Keyword)cOptionAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cOptionAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cOptionTypeKeyword_2_0_0 = (Keyword)cOptionAssignment_2_0.eContents().get(0);
		private final Assignment cTypesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypesSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cTypesAssignment_2_1.eContents().get(0);
		
		////Inspect options
		//InspectOptions:
		//	option='format' formats=STRING | option='show_size' | option='type' types=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//option='format' formats=STRING | option='show_size' | option='type' types=STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//option='format' formats=STRING
		public Group getGroup_0() { return cGroup_0; }
		
		//option='format'
		public Assignment getOptionAssignment_0_0() { return cOptionAssignment_0_0; }
		
		//'format'
		public Keyword getOptionFormatKeyword_0_0_0() { return cOptionFormatKeyword_0_0_0; }
		
		//formats=STRING
		public Assignment getFormatsAssignment_0_1() { return cFormatsAssignment_0_1; }
		
		//STRING
		public RuleCall getFormatsSTRINGTerminalRuleCall_0_1_0() { return cFormatsSTRINGTerminalRuleCall_0_1_0; }
		
		//option='show_size'
		public Assignment getOptionAssignment_1() { return cOptionAssignment_1; }
		
		//'show_size'
		public Keyword getOptionShow_sizeKeyword_1_0() { return cOptionShow_sizeKeyword_1_0; }
		
		//option='type' types=STRING
		public Group getGroup_2() { return cGroup_2; }
		
		//option='type'
		public Assignment getOptionAssignment_2_0() { return cOptionAssignment_2_0; }
		
		//'type'
		public Keyword getOptionTypeKeyword_2_0_0() { return cOptionTypeKeyword_2_0_0; }
		
		//types=STRING
		public Assignment getTypesAssignment_2_1() { return cTypesAssignment_2_1; }
		
		//STRING
		public RuleCall getTypesSTRINGTerminalRuleCall_2_1_0() { return cTypesSTRINGTerminalRuleCall_2_1_0; }
	}
	public class PsStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group20.docker.Docker.PsStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPsOptionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPsOptionsPsOptionsParserRuleCall_1_0 = (RuleCall)cPsOptionsAssignment_1.eContents().get(0);
		
		////Ps statement
		//PsStatement:
		//	'ps' psOptions+=PsOptions+;
		@Override public ParserRule getRule() { return rule; }
		
		//'ps' psOptions+=PsOptions+
		public Group getGroup() { return cGroup; }
		
		//'ps'
		public Keyword getPsKeyword_0() { return cPsKeyword_0; }
		
		//psOptions+=PsOptions+
		public Assignment getPsOptionsAssignment_1() { return cPsOptionsAssignment_1; }
		
		//PsOptions
		public RuleCall getPsOptionsPsOptionsParserRuleCall_1_0() { return cPsOptionsPsOptionsParserRuleCall_1_0; }
	}
	public class PsOptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group20.docker.Docker.PsOptions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOptionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cOptionShow_containerKeyword_0_0 = (Keyword)cOptionAssignment_0.eContents().get(0);
		private final Assignment cOptionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cOptionShow_all_containersKeyword_1_0 = (Keyword)cOptionAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cOptionAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cOptionFilterKeyword_2_0_0 = (Keyword)cOptionAssignment_2_0.eContents().get(0);
		private final Assignment cCommandsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCommandsSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cCommandsAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cOptionAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cOptionFormatKeyword_3_0_0 = (Keyword)cOptionAssignment_3_0.eContents().get(0);
		private final Assignment cFormatsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFormatsSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cFormatsAssignment_3_1.eContents().get(0);
		private final Assignment cOptionAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cOptionShow_last_containerKeyword_4_0 = (Keyword)cOptionAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cOptionAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final Keyword cOptionList_last_n_containersKeyword_5_0_0 = (Keyword)cOptionAssignment_5_0.eContents().get(0);
		private final Assignment cNAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cNINTTerminalRuleCall_5_1_0 = (RuleCall)cNAssignment_5_1.eContents().get(0);
		private final Assignment cOptionAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final Keyword cOptionCompleteKeyword_6_0 = (Keyword)cOptionAssignment_6.eContents().get(0);
		private final Assignment cOptionAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final Keyword cOptionOnly_show_idKeyword_7_0 = (Keyword)cOptionAssignment_7.eContents().get(0);
		private final Assignment cOptionAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final Keyword cOptionShow_sizeKeyword_8_0 = (Keyword)cOptionAssignment_8.eContents().get(0);
		
		////Ps options
		//PsOptions:
		//	option='show_container' | option='show_all_containers' | option='filter' commands=STRING | option='format'
		//	formats=STRING | option='show_last_container' | option='list_last_n_containers' n=INT | option='complete' | option=
		//	'only_show_id' | option='show_size';
		@Override public ParserRule getRule() { return rule; }
		
		//option='show_container' | option='show_all_containers' | option='filter' commands=STRING | option='format'
		//formats=STRING | option='show_last_container' | option='list_last_n_containers' n=INT | option='complete' | option=
		//'only_show_id' | option='show_size'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//option='show_container'
		public Assignment getOptionAssignment_0() { return cOptionAssignment_0; }
		
		//'show_container'
		public Keyword getOptionShow_containerKeyword_0_0() { return cOptionShow_containerKeyword_0_0; }
		
		//option='show_all_containers'
		public Assignment getOptionAssignment_1() { return cOptionAssignment_1; }
		
		//'show_all_containers'
		public Keyword getOptionShow_all_containersKeyword_1_0() { return cOptionShow_all_containersKeyword_1_0; }
		
		//option='filter' commands=STRING
		public Group getGroup_2() { return cGroup_2; }
		
		//option='filter'
		public Assignment getOptionAssignment_2_0() { return cOptionAssignment_2_0; }
		
		//'filter'
		public Keyword getOptionFilterKeyword_2_0_0() { return cOptionFilterKeyword_2_0_0; }
		
		//commands=STRING
		public Assignment getCommandsAssignment_2_1() { return cCommandsAssignment_2_1; }
		
		//STRING
		public RuleCall getCommandsSTRINGTerminalRuleCall_2_1_0() { return cCommandsSTRINGTerminalRuleCall_2_1_0; }
		
		//option='format' formats=STRING
		public Group getGroup_3() { return cGroup_3; }
		
		//option='format'
		public Assignment getOptionAssignment_3_0() { return cOptionAssignment_3_0; }
		
		//'format'
		public Keyword getOptionFormatKeyword_3_0_0() { return cOptionFormatKeyword_3_0_0; }
		
		//formats=STRING
		public Assignment getFormatsAssignment_3_1() { return cFormatsAssignment_3_1; }
		
		//STRING
		public RuleCall getFormatsSTRINGTerminalRuleCall_3_1_0() { return cFormatsSTRINGTerminalRuleCall_3_1_0; }
		
		//option='show_last_container'
		public Assignment getOptionAssignment_4() { return cOptionAssignment_4; }
		
		//'show_last_container'
		public Keyword getOptionShow_last_containerKeyword_4_0() { return cOptionShow_last_containerKeyword_4_0; }
		
		//option='list_last_n_containers' n=INT
		public Group getGroup_5() { return cGroup_5; }
		
		//option='list_last_n_containers'
		public Assignment getOptionAssignment_5_0() { return cOptionAssignment_5_0; }
		
		//'list_last_n_containers'
		public Keyword getOptionList_last_n_containersKeyword_5_0_0() { return cOptionList_last_n_containersKeyword_5_0_0; }
		
		//n=INT
		public Assignment getNAssignment_5_1() { return cNAssignment_5_1; }
		
		//INT
		public RuleCall getNINTTerminalRuleCall_5_1_0() { return cNINTTerminalRuleCall_5_1_0; }
		
		//option='complete'
		public Assignment getOptionAssignment_6() { return cOptionAssignment_6; }
		
		//'complete'
		public Keyword getOptionCompleteKeyword_6_0() { return cOptionCompleteKeyword_6_0; }
		
		//option='only_show_id'
		public Assignment getOptionAssignment_7() { return cOptionAssignment_7; }
		
		//'only_show_id'
		public Keyword getOptionOnly_show_idKeyword_7_0() { return cOptionOnly_show_idKeyword_7_0; }
		
		//option='show_size'
		public Assignment getOptionAssignment_8() { return cOptionAssignment_8; }
		
		//'show_size'
		public Keyword getOptionShow_sizeKeyword_8_0() { return cOptionShow_sizeKeyword_8_0; }
	}
	public class ExecStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group20.docker.Docker.ExecStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExecuteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExecOptionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExecOptionsExecOptionEnumRuleCall_1_0 = (RuleCall)cExecOptionsAssignment_1.eContents().get(0);
		private final Assignment cContainerNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cContainerNameContainerNameDeclarationCrossReference_2_0 = (CrossReference)cContainerNameAssignment_2.eContents().get(0);
		private final RuleCall cContainerNameContainerNameDeclarationIDTerminalRuleCall_2_0_1 = (RuleCall)cContainerNameContainerNameDeclarationCrossReference_2_0.eContents().get(1);
		private final Assignment cCommandsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommandsSTRINGTerminalRuleCall_3_0 = (RuleCall)cCommandsAssignment_3.eContents().get(0);
		
		////Execute statement 
		//ExecStatement:
		//	'execute' execOptions+=ExecOption* containerName=[ContainerNameDeclaration] commands=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'execute' execOptions+=ExecOption* containerName=[ContainerNameDeclaration] commands=STRING
		public Group getGroup() { return cGroup; }
		
		//'execute'
		public Keyword getExecuteKeyword_0() { return cExecuteKeyword_0; }
		
		//execOptions+=ExecOption*
		public Assignment getExecOptionsAssignment_1() { return cExecOptionsAssignment_1; }
		
		//ExecOption
		public RuleCall getExecOptionsExecOptionEnumRuleCall_1_0() { return cExecOptionsExecOptionEnumRuleCall_1_0; }
		
		//containerName=[ContainerNameDeclaration]
		public Assignment getContainerNameAssignment_2() { return cContainerNameAssignment_2; }
		
		//[ContainerNameDeclaration]
		public CrossReference getContainerNameContainerNameDeclarationCrossReference_2_0() { return cContainerNameContainerNameDeclarationCrossReference_2_0; }
		
		//ID
		public RuleCall getContainerNameContainerNameDeclarationIDTerminalRuleCall_2_0_1() { return cContainerNameContainerNameDeclarationIDTerminalRuleCall_2_0_1; }
		
		//commands=STRING
		public Assignment getCommandsAssignment_3() { return cCommandsAssignment_3; }
		
		//STRING
		public RuleCall getCommandsSTRINGTerminalRuleCall_3_0() { return cCommandsSTRINGTerminalRuleCall_3_0; }
	}
	public class UnpauseStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group20.docker.Docker.UnpauseStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnpauseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContainerNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cContainerNameContainerNameDeclarationCrossReference_1_0 = (CrossReference)cContainerNameAssignment_1.eContents().get(0);
		private final RuleCall cContainerNameContainerNameDeclarationIDTerminalRuleCall_1_0_1 = (RuleCall)cContainerNameContainerNameDeclarationCrossReference_1_0.eContents().get(1);
		
		////Unpause statement
		//UnpauseStatement:
		//	'unpause' containerName=[ContainerNameDeclaration];
		@Override public ParserRule getRule() { return rule; }
		
		//'unpause' containerName=[ContainerNameDeclaration]
		public Group getGroup() { return cGroup; }
		
		//'unpause'
		public Keyword getUnpauseKeyword_0() { return cUnpauseKeyword_0; }
		
		//containerName=[ContainerNameDeclaration]
		public Assignment getContainerNameAssignment_1() { return cContainerNameAssignment_1; }
		
		//[ContainerNameDeclaration]
		public CrossReference getContainerNameContainerNameDeclarationCrossReference_1_0() { return cContainerNameContainerNameDeclarationCrossReference_1_0; }
		
		//ID
		public RuleCall getContainerNameContainerNameDeclarationIDTerminalRuleCall_1_0_1() { return cContainerNameContainerNameDeclarationIDTerminalRuleCall_1_0_1; }
	}
	public class PauseStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group20.docker.Docker.PauseStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPauseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContainerNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cContainerNameContainerNameDeclarationCrossReference_1_0 = (CrossReference)cContainerNameAssignment_1.eContents().get(0);
		private final RuleCall cContainerNameContainerNameDeclarationIDTerminalRuleCall_1_0_1 = (RuleCall)cContainerNameContainerNameDeclarationCrossReference_1_0.eContents().get(1);
		
		////Pause statement
		//PauseStatement:
		//	'pause' containerName=[ContainerNameDeclaration];
		@Override public ParserRule getRule() { return rule; }
		
		//'pause' containerName=[ContainerNameDeclaration]
		public Group getGroup() { return cGroup; }
		
		//'pause'
		public Keyword getPauseKeyword_0() { return cPauseKeyword_0; }
		
		//containerName=[ContainerNameDeclaration]
		public Assignment getContainerNameAssignment_1() { return cContainerNameAssignment_1; }
		
		//[ContainerNameDeclaration]
		public CrossReference getContainerNameContainerNameDeclarationCrossReference_1_0() { return cContainerNameContainerNameDeclarationCrossReference_1_0; }
		
		//ID
		public RuleCall getContainerNameContainerNameDeclarationIDTerminalRuleCall_1_0_1() { return cContainerNameContainerNameDeclarationIDTerminalRuleCall_1_0_1; }
	}
	public class RestartStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group20.docker.Docker.RestartStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRestartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContainerNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cContainerNameContainerNameDeclarationCrossReference_1_0 = (CrossReference)cContainerNameAssignment_1.eContents().get(0);
		private final RuleCall cContainerNameContainerNameDeclarationIDTerminalRuleCall_1_0_1 = (RuleCall)cContainerNameContainerNameDeclarationCrossReference_1_0.eContents().get(1);
		
		////Restart statement
		//RestartStatement:
		//	'restart' containerName=[ContainerNameDeclaration];
		@Override public ParserRule getRule() { return rule; }
		
		//'restart' containerName=[ContainerNameDeclaration]
		public Group getGroup() { return cGroup; }
		
		//'restart'
		public Keyword getRestartKeyword_0() { return cRestartKeyword_0; }
		
		//containerName=[ContainerNameDeclaration]
		public Assignment getContainerNameAssignment_1() { return cContainerNameAssignment_1; }
		
		//[ContainerNameDeclaration]
		public CrossReference getContainerNameContainerNameDeclarationCrossReference_1_0() { return cContainerNameContainerNameDeclarationCrossReference_1_0; }
		
		//ID
		public RuleCall getContainerNameContainerNameDeclarationIDTerminalRuleCall_1_0_1() { return cContainerNameContainerNameDeclarationIDTerminalRuleCall_1_0_1; }
	}
	public class StopStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group20.docker.Docker.StopStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContainerNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cContainerNameContainerNameDeclarationCrossReference_1_0 = (CrossReference)cContainerNameAssignment_1.eContents().get(0);
		private final RuleCall cContainerNameContainerNameDeclarationIDTerminalRuleCall_1_0_1 = (RuleCall)cContainerNameContainerNameDeclarationCrossReference_1_0.eContents().get(1);
		
		////Stop statement
		//StopStatement:
		//	'stop' containerName=[ContainerNameDeclaration];
		@Override public ParserRule getRule() { return rule; }
		
		//'stop' containerName=[ContainerNameDeclaration]
		public Group getGroup() { return cGroup; }
		
		//'stop'
		public Keyword getStopKeyword_0() { return cStopKeyword_0; }
		
		//containerName=[ContainerNameDeclaration]
		public Assignment getContainerNameAssignment_1() { return cContainerNameAssignment_1; }
		
		//[ContainerNameDeclaration]
		public CrossReference getContainerNameContainerNameDeclarationCrossReference_1_0() { return cContainerNameContainerNameDeclarationCrossReference_1_0; }
		
		//ID
		public RuleCall getContainerNameContainerNameDeclarationIDTerminalRuleCall_1_0_1() { return cContainerNameContainerNameDeclarationIDTerminalRuleCall_1_0_1; }
	}
	public class StartStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group20.docker.Docker.StartStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContainerNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cContainerNameContainerNameDeclarationCrossReference_1_0 = (CrossReference)cContainerNameAssignment_1.eContents().get(0);
		private final RuleCall cContainerNameContainerNameDeclarationIDTerminalRuleCall_1_0_1 = (RuleCall)cContainerNameContainerNameDeclarationCrossReference_1_0.eContents().get(1);
		
		////Start statement
		//StartStatement:
		//	'start' containerName=[ContainerNameDeclaration];
		@Override public ParserRule getRule() { return rule; }
		
		//'start' containerName=[ContainerNameDeclaration]
		public Group getGroup() { return cGroup; }
		
		//'start'
		public Keyword getStartKeyword_0() { return cStartKeyword_0; }
		
		//containerName=[ContainerNameDeclaration]
		public Assignment getContainerNameAssignment_1() { return cContainerNameAssignment_1; }
		
		//[ContainerNameDeclaration]
		public CrossReference getContainerNameContainerNameDeclarationCrossReference_1_0() { return cContainerNameContainerNameDeclarationCrossReference_1_0; }
		
		//ID
		public RuleCall getContainerNameContainerNameDeclarationIDTerminalRuleCall_1_0_1() { return cContainerNameContainerNameDeclarationIDTerminalRuleCall_1_0_1; }
	}
	public class KillStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group20.docker.Docker.KillStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKillAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKillKillOptionEnumRuleCall_0_0 = (RuleCall)cKillAssignment_0.eContents().get(0);
		private final Assignment cContainerNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cContainerNameContainerNameDeclarationCrossReference_1_0 = (CrossReference)cContainerNameAssignment_1.eContents().get(0);
		private final RuleCall cContainerNameContainerNameDeclarationIDTerminalRuleCall_1_0_1 = (RuleCall)cContainerNameContainerNameDeclarationCrossReference_1_0.eContents().get(1);
		
		////Kill statement
		//KillStatement:
		//	kill=KillOption containerName=[ContainerNameDeclaration];
		@Override public ParserRule getRule() { return rule; }
		
		//kill=KillOption containerName=[ContainerNameDeclaration]
		public Group getGroup() { return cGroup; }
		
		//kill=KillOption
		public Assignment getKillAssignment_0() { return cKillAssignment_0; }
		
		//KillOption
		public RuleCall getKillKillOptionEnumRuleCall_0_0() { return cKillKillOptionEnumRuleCall_0_0; }
		
		//containerName=[ContainerNameDeclaration]
		public Assignment getContainerNameAssignment_1() { return cContainerNameAssignment_1; }
		
		//[ContainerNameDeclaration]
		public CrossReference getContainerNameContainerNameDeclarationCrossReference_1_0() { return cContainerNameContainerNameDeclarationCrossReference_1_0; }
		
		//ID
		public RuleCall getContainerNameContainerNameDeclarationIDTerminalRuleCall_1_0_1() { return cContainerNameContainerNameDeclarationIDTerminalRuleCall_1_0_1; }
	}
	public class RemoveStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group20.docker.Docker.RemoveStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRemoveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRmOptionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRmOptionsRmOptionsEnumRuleCall_1_0 = (RuleCall)cRmOptionsAssignment_1.eContents().get(0);
		private final Assignment cContainerNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cContainerNameContainerNameDeclarationCrossReference_2_0 = (CrossReference)cContainerNameAssignment_2.eContents().get(0);
		private final RuleCall cContainerNameContainerNameDeclarationIDTerminalRuleCall_2_0_1 = (RuleCall)cContainerNameContainerNameDeclarationCrossReference_2_0.eContents().get(1);
		
		////Remove statement
		//RemoveStatement:
		//	'remove' rmOptions=RmOptions? containerName=[ContainerNameDeclaration];
		@Override public ParserRule getRule() { return rule; }
		
		//'remove' rmOptions=RmOptions? containerName=[ContainerNameDeclaration]
		public Group getGroup() { return cGroup; }
		
		//'remove'
		public Keyword getRemoveKeyword_0() { return cRemoveKeyword_0; }
		
		//rmOptions=RmOptions?
		public Assignment getRmOptionsAssignment_1() { return cRmOptionsAssignment_1; }
		
		//RmOptions
		public RuleCall getRmOptionsRmOptionsEnumRuleCall_1_0() { return cRmOptionsRmOptionsEnumRuleCall_1_0; }
		
		//containerName=[ContainerNameDeclaration]
		public Assignment getContainerNameAssignment_2() { return cContainerNameAssignment_2; }
		
		//[ContainerNameDeclaration]
		public CrossReference getContainerNameContainerNameDeclarationCrossReference_2_0() { return cContainerNameContainerNameDeclarationCrossReference_2_0; }
		
		//ID
		public RuleCall getContainerNameContainerNameDeclarationIDTerminalRuleCall_2_0_1() { return cContainerNameContainerNameDeclarationIDTerminalRuleCall_2_0_1; }
	}
	public class RunCreateStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group20.docker.Docker.RunCreateStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOrderAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOrderRunorCreateEnumRuleCall_0_0 = (RuleCall)cOrderAssignment_0.eContents().get(0);
		private final Assignment cRunOptionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRunOptionsRunOptionParserRuleCall_1_0 = (RuleCall)cRunOptionsAssignment_1.eContents().get(0);
		private final Assignment cImageAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImageImageEnumRuleCall_2_0 = (RuleCall)cImageAssignment_2.eContents().get(0);
		private final Assignment cCommandsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommandsSTRINGTerminalRuleCall_3_0 = (RuleCall)cCommandsAssignment_3.eContents().get(0);
		
		////Run statement
		//RunCreateStatement:
		//	order=RunorCreate runOptions+=RunOption* image=Image commands=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//order=RunorCreate runOptions+=RunOption* image=Image commands=STRING
		public Group getGroup() { return cGroup; }
		
		//order=RunorCreate
		public Assignment getOrderAssignment_0() { return cOrderAssignment_0; }
		
		//RunorCreate
		public RuleCall getOrderRunorCreateEnumRuleCall_0_0() { return cOrderRunorCreateEnumRuleCall_0_0; }
		
		//runOptions+=RunOption*
		public Assignment getRunOptionsAssignment_1() { return cRunOptionsAssignment_1; }
		
		//RunOption
		public RuleCall getRunOptionsRunOptionParserRuleCall_1_0() { return cRunOptionsRunOptionParserRuleCall_1_0; }
		
		//image=Image
		public Assignment getImageAssignment_2() { return cImageAssignment_2; }
		
		//Image
		public RuleCall getImageImageEnumRuleCall_2_0() { return cImageImageEnumRuleCall_2_0; }
		
		//commands=STRING
		public Assignment getCommandsAssignment_3() { return cCommandsAssignment_3; }
		
		//STRING
		public RuleCall getCommandsSTRINGTerminalRuleCall_3_0() { return cCommandsSTRINGTerminalRuleCall_3_0; }
	}
	public class RunOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group20.docker.Docker.RunOption");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cConditionAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cConditionStandardKeyword_0_0_0 = (Keyword)cConditionAssignment_0_0.eContents().get(0);
		private final Assignment cOutTypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOutTypeOutTypeEnumRuleCall_0_1_0 = (RuleCall)cOutTypeAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cRunOptionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cConditionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cConditionBackstageKeyword_1_1_0 = (Keyword)cConditionAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cRunOptionAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cConditionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cConditionInterfaceKeyword_2_1_0 = (Keyword)cConditionAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cRunOptionAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cConditionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Keyword cConditionRandom_portKeyword_3_1_0 = (Keyword)cConditionAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cConditionAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cConditionSpecify_portKeyword_4_0_0 = (Keyword)cConditionAssignment_4_0.eContents().get(0);
		private final Assignment cPortNameAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cPortNameSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cPortNameAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cRunOptionAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cConditionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final Keyword cConditionTerminateKeyword_5_1_0 = (Keyword)cConditionAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Assignment cConditionAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final Keyword cConditionDNSKeyword_6_0_0 = (Keyword)cConditionAssignment_6_0.eContents().get(0);
		private final Assignment cServerAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cServerSTRINGTerminalRuleCall_6_1_0 = (RuleCall)cServerAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Assignment cConditionAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final Keyword cConditionSearch_DNSKeyword_7_0_0 = (Keyword)cConditionAssignment_7_0.eContents().get(0);
		private final Assignment cDomainNameAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cDomainNameSTRINGTerminalRuleCall_7_1_0 = (RuleCall)cDomainNameAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Assignment cConditionAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final Keyword cConditionHostnameKeyword_8_0_0 = (Keyword)cConditionAssignment_8_0.eContents().get(0);
		private final Assignment cHostnameAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cHostnameSTRINGTerminalRuleCall_8_1_0 = (RuleCall)cHostnameAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Assignment cConditionAssignment_9_0 = (Assignment)cGroup_9.eContents().get(0);
		private final Keyword cConditionEnvironmentKeyword_9_0_0 = (Keyword)cConditionAssignment_9_0.eContents().get(0);
		private final Assignment cEnvironmentVariableAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cEnvironmentVariableSTRINGTerminalRuleCall_9_1_0 = (RuleCall)cEnvironmentVariableAssignment_9_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		private final Assignment cSetEnvironmentVariableAssignment_9_3 = (Assignment)cGroup_9.eContents().get(3);
		private final RuleCall cSetEnvironmentVariableSTRINGTerminalRuleCall_9_3_0 = (RuleCall)cSetEnvironmentVariableAssignment_9_3.eContents().get(0);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Assignment cConditionAssignment_10_0 = (Assignment)cGroup_10.eContents().get(0);
		private final Keyword cConditionNetworkKeyword_10_0_0 = (Keyword)cConditionAssignment_10_0.eContents().get(0);
		private final Assignment cConnectTypeAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cConnectTypeSTRINGTerminalRuleCall_10_1_0 = (RuleCall)cConnectTypeAssignment_10_1.eContents().get(0);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Assignment cConditionAssignment_11_0 = (Assignment)cGroup_11.eContents().get(0);
		private final Keyword cConditionNameKeyword_11_0_0 = (Keyword)cConditionAssignment_11_0.eContents().get(0);
		private final Assignment cContainerNameAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final CrossReference cContainerNameContainerNameDeclarationCrossReference_11_1_0 = (CrossReference)cContainerNameAssignment_11_1.eContents().get(0);
		private final RuleCall cContainerNameContainerNameDeclarationIDTerminalRuleCall_11_1_0_1 = (RuleCall)cContainerNameContainerNameDeclarationCrossReference_11_1_0.eContents().get(1);
		
		////Run option
		//RunOption:
		//	condition='standard' outType=OutType | {RunOption} condition='backstage' | {RunOption} condition='interface' |
		//	{RunOption} condition='random_port' | condition='specify_port' portName=STRING | {RunOption} condition='terminate' |
		//	condition='DNS' server=STRING | condition='search_DNS'domainName=STRING | condition='hostname' hostname=STRING |
		//	condition='environment' environmentVariable=STRING '=' setEnvironmentVariable=STRING | condition='network'
		//	connectType=STRING | condition='name' containerName=[ContainerNameDeclaration];
		@Override public ParserRule getRule() { return rule; }
		
		//condition='standard' outType=OutType | {RunOption} condition='backstage' | {RunOption} condition='interface' |
		//{RunOption} condition='random_port' | condition='specify_port' portName=STRING | {RunOption} condition='terminate' |
		//condition='DNS' server=STRING | condition='search_DNS'domainName=STRING | condition='hostname' hostname=STRING |
		//condition='environment' environmentVariable=STRING '=' setEnvironmentVariable=STRING | condition='network'
		//connectType=STRING | condition='name' containerName=[ContainerNameDeclaration]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//condition='standard' outType=OutType
		public Group getGroup_0() { return cGroup_0; }
		
		//condition='standard'
		public Assignment getConditionAssignment_0_0() { return cConditionAssignment_0_0; }
		
		//'standard'
		public Keyword getConditionStandardKeyword_0_0_0() { return cConditionStandardKeyword_0_0_0; }
		
		//outType=OutType
		public Assignment getOutTypeAssignment_0_1() { return cOutTypeAssignment_0_1; }
		
		//OutType
		public RuleCall getOutTypeOutTypeEnumRuleCall_0_1_0() { return cOutTypeOutTypeEnumRuleCall_0_1_0; }
		
		//{RunOption} condition='backstage'
		public Group getGroup_1() { return cGroup_1; }
		
		//{RunOption}
		public Action getRunOptionAction_1_0() { return cRunOptionAction_1_0; }
		
		//condition='backstage'
		public Assignment getConditionAssignment_1_1() { return cConditionAssignment_1_1; }
		
		//'backstage'
		public Keyword getConditionBackstageKeyword_1_1_0() { return cConditionBackstageKeyword_1_1_0; }
		
		//{RunOption} condition='interface'
		public Group getGroup_2() { return cGroup_2; }
		
		//{RunOption}
		public Action getRunOptionAction_2_0() { return cRunOptionAction_2_0; }
		
		//condition='interface'
		public Assignment getConditionAssignment_2_1() { return cConditionAssignment_2_1; }
		
		//'interface'
		public Keyword getConditionInterfaceKeyword_2_1_0() { return cConditionInterfaceKeyword_2_1_0; }
		
		//{RunOption} condition='random_port'
		public Group getGroup_3() { return cGroup_3; }
		
		//{RunOption}
		public Action getRunOptionAction_3_0() { return cRunOptionAction_3_0; }
		
		//condition='random_port'
		public Assignment getConditionAssignment_3_1() { return cConditionAssignment_3_1; }
		
		//'random_port'
		public Keyword getConditionRandom_portKeyword_3_1_0() { return cConditionRandom_portKeyword_3_1_0; }
		
		//condition='specify_port' portName=STRING
		public Group getGroup_4() { return cGroup_4; }
		
		//condition='specify_port'
		public Assignment getConditionAssignment_4_0() { return cConditionAssignment_4_0; }
		
		//'specify_port'
		public Keyword getConditionSpecify_portKeyword_4_0_0() { return cConditionSpecify_portKeyword_4_0_0; }
		
		//portName=STRING
		public Assignment getPortNameAssignment_4_1() { return cPortNameAssignment_4_1; }
		
		//STRING
		public RuleCall getPortNameSTRINGTerminalRuleCall_4_1_0() { return cPortNameSTRINGTerminalRuleCall_4_1_0; }
		
		//{RunOption} condition='terminate'
		public Group getGroup_5() { return cGroup_5; }
		
		//{RunOption}
		public Action getRunOptionAction_5_0() { return cRunOptionAction_5_0; }
		
		//condition='terminate'
		public Assignment getConditionAssignment_5_1() { return cConditionAssignment_5_1; }
		
		//'terminate'
		public Keyword getConditionTerminateKeyword_5_1_0() { return cConditionTerminateKeyword_5_1_0; }
		
		//condition='DNS' server=STRING
		public Group getGroup_6() { return cGroup_6; }
		
		//condition='DNS'
		public Assignment getConditionAssignment_6_0() { return cConditionAssignment_6_0; }
		
		//'DNS'
		public Keyword getConditionDNSKeyword_6_0_0() { return cConditionDNSKeyword_6_0_0; }
		
		//server=STRING
		public Assignment getServerAssignment_6_1() { return cServerAssignment_6_1; }
		
		//STRING
		public RuleCall getServerSTRINGTerminalRuleCall_6_1_0() { return cServerSTRINGTerminalRuleCall_6_1_0; }
		
		//condition='search_DNS'domainName=STRING
		public Group getGroup_7() { return cGroup_7; }
		
		//condition='search_DNS'
		public Assignment getConditionAssignment_7_0() { return cConditionAssignment_7_0; }
		
		//'search_DNS'
		public Keyword getConditionSearch_DNSKeyword_7_0_0() { return cConditionSearch_DNSKeyword_7_0_0; }
		
		//domainName=STRING
		public Assignment getDomainNameAssignment_7_1() { return cDomainNameAssignment_7_1; }
		
		//STRING
		public RuleCall getDomainNameSTRINGTerminalRuleCall_7_1_0() { return cDomainNameSTRINGTerminalRuleCall_7_1_0; }
		
		//condition='hostname' hostname=STRING
		public Group getGroup_8() { return cGroup_8; }
		
		//condition='hostname'
		public Assignment getConditionAssignment_8_0() { return cConditionAssignment_8_0; }
		
		//'hostname'
		public Keyword getConditionHostnameKeyword_8_0_0() { return cConditionHostnameKeyword_8_0_0; }
		
		//hostname=STRING
		public Assignment getHostnameAssignment_8_1() { return cHostnameAssignment_8_1; }
		
		//STRING
		public RuleCall getHostnameSTRINGTerminalRuleCall_8_1_0() { return cHostnameSTRINGTerminalRuleCall_8_1_0; }
		
		//condition='environment' environmentVariable=STRING '=' setEnvironmentVariable=STRING
		public Group getGroup_9() { return cGroup_9; }
		
		//condition='environment'
		public Assignment getConditionAssignment_9_0() { return cConditionAssignment_9_0; }
		
		//'environment'
		public Keyword getConditionEnvironmentKeyword_9_0_0() { return cConditionEnvironmentKeyword_9_0_0; }
		
		//environmentVariable=STRING
		public Assignment getEnvironmentVariableAssignment_9_1() { return cEnvironmentVariableAssignment_9_1; }
		
		//STRING
		public RuleCall getEnvironmentVariableSTRINGTerminalRuleCall_9_1_0() { return cEnvironmentVariableSTRINGTerminalRuleCall_9_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_9_2() { return cEqualsSignKeyword_9_2; }
		
		//setEnvironmentVariable=STRING
		public Assignment getSetEnvironmentVariableAssignment_9_3() { return cSetEnvironmentVariableAssignment_9_3; }
		
		//STRING
		public RuleCall getSetEnvironmentVariableSTRINGTerminalRuleCall_9_3_0() { return cSetEnvironmentVariableSTRINGTerminalRuleCall_9_3_0; }
		
		//condition='network' connectType=STRING
		public Group getGroup_10() { return cGroup_10; }
		
		//condition='network'
		public Assignment getConditionAssignment_10_0() { return cConditionAssignment_10_0; }
		
		//'network'
		public Keyword getConditionNetworkKeyword_10_0_0() { return cConditionNetworkKeyword_10_0_0; }
		
		//connectType=STRING
		public Assignment getConnectTypeAssignment_10_1() { return cConnectTypeAssignment_10_1; }
		
		//STRING
		public RuleCall getConnectTypeSTRINGTerminalRuleCall_10_1_0() { return cConnectTypeSTRINGTerminalRuleCall_10_1_0; }
		
		//condition='name' containerName=[ContainerNameDeclaration]
		public Group getGroup_11() { return cGroup_11; }
		
		//condition='name'
		public Assignment getConditionAssignment_11_0() { return cConditionAssignment_11_0; }
		
		//'name'
		public Keyword getConditionNameKeyword_11_0_0() { return cConditionNameKeyword_11_0_0; }
		
		//containerName=[ContainerNameDeclaration]
		public Assignment getContainerNameAssignment_11_1() { return cContainerNameAssignment_11_1; }
		
		//[ContainerNameDeclaration]
		public CrossReference getContainerNameContainerNameDeclarationCrossReference_11_1_0() { return cContainerNameContainerNameDeclarationCrossReference_11_1_0; }
		
		//ID
		public RuleCall getContainerNameContainerNameDeclarationIDTerminalRuleCall_11_1_0_1() { return cContainerNameContainerNameDeclarationIDTerminalRuleCall_11_1_0_1; }
	}
	public class ContainerNameDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group20.docker.Docker.ContainerNameDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ContainerNameDeclaration:
		//	"var" name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//"var" name=ID
		public Group getGroup() { return cGroup; }
		
		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	
	public class RemoveImageOptionsElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group20.docker.Docker.RemoveImageOptions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cForceEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cForceForceKeyword_0_0 = (Keyword)cForceEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNo_remove_process_imageEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNo_remove_process_imageNo_remove_process_imageKeyword_1_0 = (Keyword)cNo_remove_process_imageEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum RemoveImageOptions:
		//	force | no_remove_process_image;
		public EnumRule getRule() { return rule; }
		
		//force | no_remove_process_image
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//force
		public EnumLiteralDeclaration getForceEnumLiteralDeclaration_0() { return cForceEnumLiteralDeclaration_0; }
		
		//"force"
		public Keyword getForceForceKeyword_0_0() { return cForceForceKeyword_0_0; }
		
		//no_remove_process_image
		public EnumLiteralDeclaration getNo_remove_process_imageEnumLiteralDeclaration_1() { return cNo_remove_process_imageEnumLiteralDeclaration_1; }
		
		//"no_remove_process_image"
		public Keyword getNo_remove_process_imageNo_remove_process_imageKeyword_1_0() { return cNo_remove_process_imageNo_remove_process_imageKeyword_1_0; }
	}
	public class LinkOptionElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group20.docker.Docker.LinkOption");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNo_maintain_linkEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNo_maintain_linkNo_maintain_linkKeyword_0_0 = (Keyword)cNo_maintain_linkEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMaintain_linkEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMaintain_linkMaintain_linkKeyword_1_0 = (Keyword)cMaintain_linkEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum LinkOption:
		//	no_maintain_link | maintain_link;
		public EnumRule getRule() { return rule; }
		
		//no_maintain_link | maintain_link
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//no_maintain_link
		public EnumLiteralDeclaration getNo_maintain_linkEnumLiteralDeclaration_0() { return cNo_maintain_linkEnumLiteralDeclaration_0; }
		
		//"no_maintain_link"
		public Keyword getNo_maintain_linkNo_maintain_linkKeyword_0_0() { return cNo_maintain_linkNo_maintain_linkKeyword_0_0; }
		
		//maintain_link
		public EnumLiteralDeclaration getMaintain_linkEnumLiteralDeclaration_1() { return cMaintain_linkEnumLiteralDeclaration_1; }
		
		//"maintain_link"
		public Keyword getMaintain_linkMaintain_linkKeyword_1_0() { return cMaintain_linkMaintain_linkKeyword_1_0; }
	}
	public class SigOptionElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group20.docker.Docker.SigOption");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFalseEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFalseFalseKeyword_0_0 = (Keyword)cFalseEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTrueEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTrueTrueKeyword_1_0 = (Keyword)cTrueEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum SigOption:
		//	False | True;
		public EnumRule getRule() { return rule; }
		
		//False | True
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//False
		public EnumLiteralDeclaration getFalseEnumLiteralDeclaration_0() { return cFalseEnumLiteralDeclaration_0; }
		
		//"False"
		public Keyword getFalseFalseKeyword_0_0() { return cFalseFalseKeyword_0_0; }
		
		//True
		public EnumLiteralDeclaration getTrueEnumLiteralDeclaration_1() { return cTrueEnumLiteralDeclaration_1; }
		
		//"True"
		public Keyword getTrueTrueKeyword_1_0() { return cTrueTrueKeyword_1_0; }
	}
	public class AttachOptionElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group20.docker.Docker.AttachOption");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDetach_keysEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDetach_keysDetach_keysKeyword_0_0 = (Keyword)cDetach_keysEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNo_stdinEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNo_stdinNo_stdinKeyword_1_0 = (Keyword)cNo_stdinEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSig_proxy_trueEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSig_proxy_trueSig_proxy_trueKeyword_2_0 = (Keyword)cSig_proxy_trueEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSig_proxy_falseEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSig_proxy_falseSig_proxy_falseKeyword_3_0 = (Keyword)cSig_proxy_falseEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum AttachOption:
		//	detach_keys | no_stdin | sig_proxy_true | sig_proxy_false;
		public EnumRule getRule() { return rule; }
		
		//detach_keys | no_stdin | sig_proxy_true | sig_proxy_false
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//detach_keys
		public EnumLiteralDeclaration getDetach_keysEnumLiteralDeclaration_0() { return cDetach_keysEnumLiteralDeclaration_0; }
		
		//"detach_keys"
		public Keyword getDetach_keysDetach_keysKeyword_0_0() { return cDetach_keysDetach_keysKeyword_0_0; }
		
		//no_stdin
		public EnumLiteralDeclaration getNo_stdinEnumLiteralDeclaration_1() { return cNo_stdinEnumLiteralDeclaration_1; }
		
		//"no_stdin"
		public Keyword getNo_stdinNo_stdinKeyword_1_0() { return cNo_stdinNo_stdinKeyword_1_0; }
		
		//sig_proxy_true
		public EnumLiteralDeclaration getSig_proxy_trueEnumLiteralDeclaration_2() { return cSig_proxy_trueEnumLiteralDeclaration_2; }
		
		//"sig_proxy_true"
		public Keyword getSig_proxy_trueSig_proxy_trueKeyword_2_0() { return cSig_proxy_trueSig_proxy_trueKeyword_2_0; }
		
		//sig_proxy_false
		public EnumLiteralDeclaration getSig_proxy_falseEnumLiteralDeclaration_3() { return cSig_proxy_falseEnumLiteralDeclaration_3; }
		
		//"sig_proxy_false"
		public Keyword getSig_proxy_falseSig_proxy_falseKeyword_3_0() { return cSig_proxy_falseSig_proxy_falseKeyword_3_0; }
	}
	public class ExecOptionElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group20.docker.Docker.ExecOption");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBackstageEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBackstageBackstageKeyword_0_0 = (Keyword)cBackstageEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOpen_STDINEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOpen_STDINOpen_STDINKeyword_1_0 = (Keyword)cOpen_STDINEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cTerminateEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cTerminateTerminateKeyword_2_0 = (Keyword)cTerminateEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ExecOption:
		//	backstage | open_STDIN | terminate;
		public EnumRule getRule() { return rule; }
		
		//backstage | open_STDIN | terminate
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//backstage
		public EnumLiteralDeclaration getBackstageEnumLiteralDeclaration_0() { return cBackstageEnumLiteralDeclaration_0; }
		
		//"backstage"
		public Keyword getBackstageBackstageKeyword_0_0() { return cBackstageBackstageKeyword_0_0; }
		
		//open_STDIN
		public EnumLiteralDeclaration getOpen_STDINEnumLiteralDeclaration_1() { return cOpen_STDINEnumLiteralDeclaration_1; }
		
		//"open_STDIN"
		public Keyword getOpen_STDINOpen_STDINKeyword_1_0() { return cOpen_STDINOpen_STDINKeyword_1_0; }
		
		//terminate
		public EnumLiteralDeclaration getTerminateEnumLiteralDeclaration_2() { return cTerminateEnumLiteralDeclaration_2; }
		
		//"terminate"
		public Keyword getTerminateTerminateKeyword_2_0() { return cTerminateTerminateKeyword_2_0; }
	}
	public class KillOptionElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group20.docker.Docker.KillOption");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cKillEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cKillKillKeyword_0_0 = (Keyword)cKillEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cKill_signEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cKill_signKill_signKeyword_1_0 = (Keyword)cKill_signEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum KillOption:
		//	kill | kill_sign;
		public EnumRule getRule() { return rule; }
		
		//kill | kill_sign
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//kill
		public EnumLiteralDeclaration getKillEnumLiteralDeclaration_0() { return cKillEnumLiteralDeclaration_0; }
		
		//"kill"
		public Keyword getKillKillKeyword_0_0() { return cKillKillKeyword_0_0; }
		
		//kill_sign
		public EnumLiteralDeclaration getKill_signEnumLiteralDeclaration_1() { return cKill_signEnumLiteralDeclaration_1; }
		
		//"kill_sign"
		public Keyword getKill_signKill_signKeyword_1_0() { return cKill_signKill_signKeyword_1_0; }
	}
	public class RmOptionsElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group20.docker.Docker.RmOptions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNo_optionEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNo_optionNo_optionKeyword_0_0 = (Keyword)cNo_optionEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cForceEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cForceForceKeyword_1_0 = (Keyword)cForceEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDelete_linkEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDelete_linkDelete_linkKeyword_2_0 = (Keyword)cDelete_linkEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDelete_volumeEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDelete_volumeDelete_volumeKeyword_3_0 = (Keyword)cDelete_volumeEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum RmOptions:
		//	no_option | force | delete_link | delete_volume;
		public EnumRule getRule() { return rule; }
		
		//no_option | force | delete_link | delete_volume
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//no_option
		public EnumLiteralDeclaration getNo_optionEnumLiteralDeclaration_0() { return cNo_optionEnumLiteralDeclaration_0; }
		
		//"no_option"
		public Keyword getNo_optionNo_optionKeyword_0_0() { return cNo_optionNo_optionKeyword_0_0; }
		
		//force
		public EnumLiteralDeclaration getForceEnumLiteralDeclaration_1() { return cForceEnumLiteralDeclaration_1; }
		
		//"force"
		public Keyword getForceForceKeyword_1_0() { return cForceForceKeyword_1_0; }
		
		//delete_link
		public EnumLiteralDeclaration getDelete_linkEnumLiteralDeclaration_2() { return cDelete_linkEnumLiteralDeclaration_2; }
		
		//"delete_link"
		public Keyword getDelete_linkDelete_linkKeyword_2_0() { return cDelete_linkDelete_linkKeyword_2_0; }
		
		//delete_volume
		public EnumLiteralDeclaration getDelete_volumeEnumLiteralDeclaration_3() { return cDelete_volumeEnumLiteralDeclaration_3; }
		
		//"delete_volume"
		public Keyword getDelete_volumeDelete_volumeKeyword_3_0() { return cDelete_volumeDelete_volumeKeyword_3_0; }
	}
	public class RunorCreateElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group20.docker.Docker.RunorCreate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cRunEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cRunRunKeyword_0_0 = (Keyword)cRunEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCreateEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCreateCreateKeyword_1_0 = (Keyword)cCreateEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum RunorCreate:
		//	run | create;
		public EnumRule getRule() { return rule; }
		
		//run | create
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//run
		public EnumLiteralDeclaration getRunEnumLiteralDeclaration_0() { return cRunEnumLiteralDeclaration_0; }
		
		//"run"
		public Keyword getRunRunKeyword_0_0() { return cRunRunKeyword_0_0; }
		
		//create
		public EnumLiteralDeclaration getCreateEnumLiteralDeclaration_1() { return cCreateEnumLiteralDeclaration_1; }
		
		//"create"
		public Keyword getCreateCreateKeyword_1_0() { return cCreateCreateKeyword_1_0; }
	}
	public class ImageElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group20.docker.Docker.Image");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUbuntuEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUbuntuUbuntuKeyword_0_0 = (Keyword)cUbuntuEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCentosEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCentosCentosKeyword_1_0 = (Keyword)cCentosEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNginxEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNginxNginxKeyword_2_0 = (Keyword)cNginxEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPHPEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPHPPHPKeyword_3_0 = (Keyword)cPHPEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cApacheEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cApacheApacheKeyword_4_0 = (Keyword)cApacheEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum Image:
		//	Ubuntu | Centos | Nginx | PHP | Apache;
		public EnumRule getRule() { return rule; }
		
		//Ubuntu | Centos | Nginx | PHP | Apache
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Ubuntu
		public EnumLiteralDeclaration getUbuntuEnumLiteralDeclaration_0() { return cUbuntuEnumLiteralDeclaration_0; }
		
		//"Ubuntu"
		public Keyword getUbuntuUbuntuKeyword_0_0() { return cUbuntuUbuntuKeyword_0_0; }
		
		//Centos
		public EnumLiteralDeclaration getCentosEnumLiteralDeclaration_1() { return cCentosEnumLiteralDeclaration_1; }
		
		//"Centos"
		public Keyword getCentosCentosKeyword_1_0() { return cCentosCentosKeyword_1_0; }
		
		//Nginx
		public EnumLiteralDeclaration getNginxEnumLiteralDeclaration_2() { return cNginxEnumLiteralDeclaration_2; }
		
		//"Nginx"
		public Keyword getNginxNginxKeyword_2_0() { return cNginxNginxKeyword_2_0; }
		
		//PHP
		public EnumLiteralDeclaration getPHPEnumLiteralDeclaration_3() { return cPHPEnumLiteralDeclaration_3; }
		
		//"PHP"
		public Keyword getPHPPHPKeyword_3_0() { return cPHPPHPKeyword_3_0; }
		
		//Apache
		public EnumLiteralDeclaration getApacheEnumLiteralDeclaration_4() { return cApacheEnumLiteralDeclaration_4; }
		
		//"Apache"
		public Keyword getApacheApacheKeyword_4_0() { return cApacheApacheKeyword_4_0; }
	}
	public class OutTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.group20.docker.Docker.OutType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cININKeyword_0_0 = (Keyword)cINEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOUTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOUTOUTKeyword_1_0 = (Keyword)cOUTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cERREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cERRERRKeyword_2_0 = (Keyword)cERREnumLiteralDeclaration_2.eContents().get(0);
		
		//enum OutType:
		//	IN | OUT | ERR;
		public EnumRule getRule() { return rule; }
		
		//IN | OUT | ERR
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IN
		public EnumLiteralDeclaration getINEnumLiteralDeclaration_0() { return cINEnumLiteralDeclaration_0; }
		
		//"IN"
		public Keyword getININKeyword_0_0() { return cININKeyword_0_0; }
		
		//OUT
		public EnumLiteralDeclaration getOUTEnumLiteralDeclaration_1() { return cOUTEnumLiteralDeclaration_1; }
		
		//"OUT"
		public Keyword getOUTOUTKeyword_1_0() { return cOUTOUTKeyword_1_0; }
		
		//ERR
		public EnumLiteralDeclaration getERREnumLiteralDeclaration_2() { return cERREnumLiteralDeclaration_2; }
		
		//"ERR"
		public Keyword getERRERRKeyword_2_0() { return cERRERRKeyword_2_0; }
	}
	
	private final ModelElements pModel;
	private final StatementsElements pStatements;
	private final RemoveImageStatementElements pRemoveImageStatement;
	private final RemoveImageOptionsElements eRemoveImageOptions;
	private final ImageStatementElements pImageStatement;
	private final ImageOptionsElements pImageOptions;
	private final DiffStatementElements pDiffStatement;
	private final CpStatementElements pCpStatement;
	private final LinkOptionElements eLinkOption;
	private final SourceOptionElements pSourceOption;
	private final CommitStatementElements pCommitStatement;
	private final CommitOptionsElements pCommitOptions;
	private final PortStatementElements pPortStatement;
	private final ExportStatementElements pExportStatement;
	private final WaitStatementElements pWaitStatement;
	private final LogsStatementElements pLogsStatement;
	private final LogOptionsElements pLogOptions;
	private final EventStatementElements pEventStatement;
	private final EventOptionsElements pEventOptions;
	private final SigOptionElements eSigOption;
	private final AttachStatementElements pAttachStatement;
	private final AttachOptionElements eAttachOption;
	private final InspectStatementElements pInspectStatement;
	private final InspectOptionsElements pInspectOptions;
	private final PsStatementElements pPsStatement;
	private final PsOptionsElements pPsOptions;
	private final ExecStatementElements pExecStatement;
	private final ExecOptionElements eExecOption;
	private final UnpauseStatementElements pUnpauseStatement;
	private final PauseStatementElements pPauseStatement;
	private final RestartStatementElements pRestartStatement;
	private final StopStatementElements pStopStatement;
	private final StartStatementElements pStartStatement;
	private final KillStatementElements pKillStatement;
	private final KillOptionElements eKillOption;
	private final RemoveStatementElements pRemoveStatement;
	private final RmOptionsElements eRmOptions;
	private final RunCreateStatementElements pRunCreateStatement;
	private final RunorCreateElements eRunorCreate;
	private final ImageElements eImage;
	private final RunOptionElements pRunOption;
	private final ContainerNameDeclarationElements pContainerNameDeclaration;
	private final OutTypeElements eOutType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DockerGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pStatements = new StatementsElements();
		this.pRemoveImageStatement = new RemoveImageStatementElements();
		this.eRemoveImageOptions = new RemoveImageOptionsElements();
		this.pImageStatement = new ImageStatementElements();
		this.pImageOptions = new ImageOptionsElements();
		this.pDiffStatement = new DiffStatementElements();
		this.pCpStatement = new CpStatementElements();
		this.eLinkOption = new LinkOptionElements();
		this.pSourceOption = new SourceOptionElements();
		this.pCommitStatement = new CommitStatementElements();
		this.pCommitOptions = new CommitOptionsElements();
		this.pPortStatement = new PortStatementElements();
		this.pExportStatement = new ExportStatementElements();
		this.pWaitStatement = new WaitStatementElements();
		this.pLogsStatement = new LogsStatementElements();
		this.pLogOptions = new LogOptionsElements();
		this.pEventStatement = new EventStatementElements();
		this.pEventOptions = new EventOptionsElements();
		this.eSigOption = new SigOptionElements();
		this.pAttachStatement = new AttachStatementElements();
		this.eAttachOption = new AttachOptionElements();
		this.pInspectStatement = new InspectStatementElements();
		this.pInspectOptions = new InspectOptionsElements();
		this.pPsStatement = new PsStatementElements();
		this.pPsOptions = new PsOptionsElements();
		this.pExecStatement = new ExecStatementElements();
		this.eExecOption = new ExecOptionElements();
		this.pUnpauseStatement = new UnpauseStatementElements();
		this.pPauseStatement = new PauseStatementElements();
		this.pRestartStatement = new RestartStatementElements();
		this.pStopStatement = new StopStatementElements();
		this.pStartStatement = new StartStatementElements();
		this.pKillStatement = new KillStatementElements();
		this.eKillOption = new KillOptionElements();
		this.pRemoveStatement = new RemoveStatementElements();
		this.eRmOptions = new RmOptionsElements();
		this.pRunCreateStatement = new RunCreateStatementElements();
		this.eRunorCreate = new RunorCreateElements();
		this.eImage = new ImageElements();
		this.pRunOption = new RunOptionElements();
		this.pContainerNameDeclaration = new ContainerNameDeclarationElements();
		this.eOutType = new OutTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.kcl.inf.group20.docker.Docker".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	statements+=Statements*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Statements:
	//	RunCreateStatement | ContainerNameDeclaration | StartStatement | StopStatement | RestartStatement | KillStatement |
	//	RemoveStatement | PauseStatement | UnpauseStatement | ExecStatement | PsStatement | InspectStatement |
	//	AttachStatement | EventStatement | LogsStatement | WaitStatement | ExportStatement | PortStatement | CommitStatement
	//	| CpStatement | DiffStatement | ImageStatement | RemoveImageStatement;
	public StatementsElements getStatementsAccess() {
		return pStatements;
	}
	
	public ParserRule getStatementsRule() {
		return getStatementsAccess().getRule();
	}
	
	////Remove image statement
	//RemoveImageStatement:
	//	'removeImg' removeimageOptions+=RemoveImageOptions* image=STRING;
	public RemoveImageStatementElements getRemoveImageStatementAccess() {
		return pRemoveImageStatement;
	}
	
	public ParserRule getRemoveImageStatementRule() {
		return getRemoveImageStatementAccess().getRule();
	}
	
	//enum RemoveImageOptions:
	//	force | no_remove_process_image;
	public RemoveImageOptionsElements getRemoveImageOptionsAccess() {
		return eRemoveImageOptions;
	}
	
	public EnumRule getRemoveImageOptionsRule() {
		return getRemoveImageOptionsAccess().getRule();
	}
	
	////Image Statement
	//ImageStatement:
	//	'image' imageOptions+=ImageOptions* repository=STRING;
	public ImageStatementElements getImageStatementAccess() {
		return pImageStatement;
	}
	
	public ParserRule getImageStatementRule() {
		return getImageStatementAccess().getRule();
	}
	
	////Image options
	//ImageOptions:
	//	{ImageOptions} option='show_all' | {ImageOptions} option='show_digests' | option='filter' condition=STRING | option=
	//	'format' formats=STRING | {ImageOptions} option='complete' | {ImageOptions} option='show_ID';
	public ImageOptionsElements getImageOptionsAccess() {
		return pImageOptions;
	}
	
	public ParserRule getImageOptionsRule() {
		return getImageOptionsAccess().getRule();
	}
	
	////Difference statement
	//DiffStatement:
	//	'check_different' containerName=[ContainerNameDeclaration];
	public DiffStatementElements getDiffStatementAccess() {
		return pDiffStatement;
	}
	
	public ParserRule getDiffStatementRule() {
		return getDiffStatementAccess().getRule();
	}
	
	////Copy statement
	//CpStatement:
	//	'copy' link=LinkOption source=SourceOption destination=STRING;
	public CpStatementElements getCpStatementAccess() {
		return pCpStatement;
	}
	
	public ParserRule getCpStatementRule() {
		return getCpStatementAccess().getRule();
	}
	
	//enum LinkOption:
	//	no_maintain_link | maintain_link;
	public LinkOptionElements getLinkOptionAccess() {
		return eLinkOption;
	}
	
	public EnumRule getLinkOptionRule() {
		return getLinkOptionAccess().getRule();
	}
	
	//SourceOption:
	//	option1=STRING | option2=[ContainerNameDeclaration];
	public SourceOptionElements getSourceOptionAccess() {
		return pSourceOption;
	}
	
	public ParserRule getSourceOptionRule() {
		return getSourceOptionAccess().getRule();
	}
	
	////Commit statement
	//CommitStatement:
	//	'commit' commitOptions+=CommitOptions* containerName=[ContainerNameDeclaration] repository=STRING;
	public CommitStatementElements getCommitStatementAccess() {
		return pCommitStatement;
	}
	
	public ParserRule getCommitStatementRule() {
		return getCommitStatementAccess().getRule();
	}
	
	////Commit options
	//CommitOptions:
	//	option='author' author=STRING | {CommitOptions} option='create' | option='commit_description' description=STRING |
	//	{CommitOptions} option='pause_when_commit';
	public CommitOptionsElements getCommitOptionsAccess() {
		return pCommitOptions;
	}
	
	public ParserRule getCommitOptionsRule() {
		return getCommitOptionsAccess().getRule();
	}
	
	////Port Statement
	//PortStatement:
	//	'port' containerName=[ContainerNameDeclaration] private_port=STRING;
	public PortStatementElements getPortStatementAccess() {
		return pPortStatement;
	}
	
	public ParserRule getPortStatementRule() {
		return getPortStatementAccess().getRule();
	}
	
	////Export statement
	//ExportStatement:
	//	'export' file_path=STRING containerName=[ContainerNameDeclaration];
	public ExportStatementElements getExportStatementAccess() {
		return pExportStatement;
	}
	
	public ParserRule getExportStatementRule() {
		return getExportStatementAccess().getRule();
	}
	
	////Wait statement
	//WaitStatement:
	//	'wait' containerName=[ContainerNameDeclaration];
	public WaitStatementElements getWaitStatementAccess() {
		return pWaitStatement;
	}
	
	public ParserRule getWaitStatementRule() {
		return getWaitStatementAccess().getRule();
	}
	
	////Log statement
	//LogsStatement:
	//	'logs' logOptions+=LogOptions* containerName=[ContainerNameDeclaration];
	public LogsStatementElements getLogsStatementAccess() {
		return pLogsStatement;
	}
	
	public ParserRule getLogsStatementRule() {
		return getLogsStatementAccess().getRule();
	}
	
	////Log options
	//LogOptions:
	//	{LogOptions} option='track_output' | option='since' time=STRING | {LogOptions} option='show_timestamp' | option=
	//	'show_tail_n_logs' number=INT;
	public LogOptionsElements getLogOptionsAccess() {
		return pLogOptions;
	}
	
	public ParserRule getLogOptionsRule() {
		return getLogOptionsAccess().getRule();
	}
	
	////Event statement
	//EventStatement:
	//	'events' eventOptions+=EventOptions+;
	public EventStatementElements getEventStatementAccess() {
		return pEventStatement;
	}
	
	public ParserRule getEventStatementRule() {
		return getEventStatementAccess().getRule();
	}
	
	////Event options
	//EventOptions:
	//	option='filter' commands=STRING | option='since' timeS=STRING | option='until' timeU=STRING;
	public EventOptionsElements getEventOptionsAccess() {
		return pEventOptions;
	}
	
	public ParserRule getEventOptionsRule() {
		return getEventOptionsAccess().getRule();
	}
	
	//enum SigOption:
	//	False | True;
	public SigOptionElements getSigOptionAccess() {
		return eSigOption;
	}
	
	public EnumRule getSigOptionRule() {
		return getSigOptionAccess().getRule();
	}
	
	////Attach statement
	//AttachStatement:
	//	'attach' attachOption=AttachOption containerName=[ContainerNameDeclaration];
	public AttachStatementElements getAttachStatementAccess() {
		return pAttachStatement;
	}
	
	public ParserRule getAttachStatementRule() {
		return getAttachStatementAccess().getRule();
	}
	
	//enum AttachOption:
	//	detach_keys | no_stdin | sig_proxy_true | sig_proxy_false;
	public AttachOptionElements getAttachOptionAccess() {
		return eAttachOption;
	}
	
	public EnumRule getAttachOptionRule() {
		return getAttachOptionAccess().getRule();
	}
	
	////Inspect statement
	//InspectStatement:
	//	'inspect' inspectOptions+=InspectOptions+;
	public InspectStatementElements getInspectStatementAccess() {
		return pInspectStatement;
	}
	
	public ParserRule getInspectStatementRule() {
		return getInspectStatementAccess().getRule();
	}
	
	////Inspect options
	//InspectOptions:
	//	option='format' formats=STRING | option='show_size' | option='type' types=STRING;
	public InspectOptionsElements getInspectOptionsAccess() {
		return pInspectOptions;
	}
	
	public ParserRule getInspectOptionsRule() {
		return getInspectOptionsAccess().getRule();
	}
	
	////Ps statement
	//PsStatement:
	//	'ps' psOptions+=PsOptions+;
	public PsStatementElements getPsStatementAccess() {
		return pPsStatement;
	}
	
	public ParserRule getPsStatementRule() {
		return getPsStatementAccess().getRule();
	}
	
	////Ps options
	//PsOptions:
	//	option='show_container' | option='show_all_containers' | option='filter' commands=STRING | option='format'
	//	formats=STRING | option='show_last_container' | option='list_last_n_containers' n=INT | option='complete' | option=
	//	'only_show_id' | option='show_size';
	public PsOptionsElements getPsOptionsAccess() {
		return pPsOptions;
	}
	
	public ParserRule getPsOptionsRule() {
		return getPsOptionsAccess().getRule();
	}
	
	////Execute statement 
	//ExecStatement:
	//	'execute' execOptions+=ExecOption* containerName=[ContainerNameDeclaration] commands=STRING;
	public ExecStatementElements getExecStatementAccess() {
		return pExecStatement;
	}
	
	public ParserRule getExecStatementRule() {
		return getExecStatementAccess().getRule();
	}
	
	//enum ExecOption:
	//	backstage | open_STDIN | terminate;
	public ExecOptionElements getExecOptionAccess() {
		return eExecOption;
	}
	
	public EnumRule getExecOptionRule() {
		return getExecOptionAccess().getRule();
	}
	
	////Unpause statement
	//UnpauseStatement:
	//	'unpause' containerName=[ContainerNameDeclaration];
	public UnpauseStatementElements getUnpauseStatementAccess() {
		return pUnpauseStatement;
	}
	
	public ParserRule getUnpauseStatementRule() {
		return getUnpauseStatementAccess().getRule();
	}
	
	////Pause statement
	//PauseStatement:
	//	'pause' containerName=[ContainerNameDeclaration];
	public PauseStatementElements getPauseStatementAccess() {
		return pPauseStatement;
	}
	
	public ParserRule getPauseStatementRule() {
		return getPauseStatementAccess().getRule();
	}
	
	////Restart statement
	//RestartStatement:
	//	'restart' containerName=[ContainerNameDeclaration];
	public RestartStatementElements getRestartStatementAccess() {
		return pRestartStatement;
	}
	
	public ParserRule getRestartStatementRule() {
		return getRestartStatementAccess().getRule();
	}
	
	////Stop statement
	//StopStatement:
	//	'stop' containerName=[ContainerNameDeclaration];
	public StopStatementElements getStopStatementAccess() {
		return pStopStatement;
	}
	
	public ParserRule getStopStatementRule() {
		return getStopStatementAccess().getRule();
	}
	
	////Start statement
	//StartStatement:
	//	'start' containerName=[ContainerNameDeclaration];
	public StartStatementElements getStartStatementAccess() {
		return pStartStatement;
	}
	
	public ParserRule getStartStatementRule() {
		return getStartStatementAccess().getRule();
	}
	
	////Kill statement
	//KillStatement:
	//	kill=KillOption containerName=[ContainerNameDeclaration];
	public KillStatementElements getKillStatementAccess() {
		return pKillStatement;
	}
	
	public ParserRule getKillStatementRule() {
		return getKillStatementAccess().getRule();
	}
	
	//enum KillOption:
	//	kill | kill_sign;
	public KillOptionElements getKillOptionAccess() {
		return eKillOption;
	}
	
	public EnumRule getKillOptionRule() {
		return getKillOptionAccess().getRule();
	}
	
	////Remove statement
	//RemoveStatement:
	//	'remove' rmOptions=RmOptions? containerName=[ContainerNameDeclaration];
	public RemoveStatementElements getRemoveStatementAccess() {
		return pRemoveStatement;
	}
	
	public ParserRule getRemoveStatementRule() {
		return getRemoveStatementAccess().getRule();
	}
	
	//enum RmOptions:
	//	no_option | force | delete_link | delete_volume;
	public RmOptionsElements getRmOptionsAccess() {
		return eRmOptions;
	}
	
	public EnumRule getRmOptionsRule() {
		return getRmOptionsAccess().getRule();
	}
	
	////Run statement
	//RunCreateStatement:
	//	order=RunorCreate runOptions+=RunOption* image=Image commands=STRING;
	public RunCreateStatementElements getRunCreateStatementAccess() {
		return pRunCreateStatement;
	}
	
	public ParserRule getRunCreateStatementRule() {
		return getRunCreateStatementAccess().getRule();
	}
	
	//enum RunorCreate:
	//	run | create;
	public RunorCreateElements getRunorCreateAccess() {
		return eRunorCreate;
	}
	
	public EnumRule getRunorCreateRule() {
		return getRunorCreateAccess().getRule();
	}
	
	//enum Image:
	//	Ubuntu | Centos | Nginx | PHP | Apache;
	public ImageElements getImageAccess() {
		return eImage;
	}
	
	public EnumRule getImageRule() {
		return getImageAccess().getRule();
	}
	
	////Run option
	//RunOption:
	//	condition='standard' outType=OutType | {RunOption} condition='backstage' | {RunOption} condition='interface' |
	//	{RunOption} condition='random_port' | condition='specify_port' portName=STRING | {RunOption} condition='terminate' |
	//	condition='DNS' server=STRING | condition='search_DNS'domainName=STRING | condition='hostname' hostname=STRING |
	//	condition='environment' environmentVariable=STRING '=' setEnvironmentVariable=STRING | condition='network'
	//	connectType=STRING | condition='name' containerName=[ContainerNameDeclaration];
	public RunOptionElements getRunOptionAccess() {
		return pRunOption;
	}
	
	public ParserRule getRunOptionRule() {
		return getRunOptionAccess().getRule();
	}
	
	//ContainerNameDeclaration:
	//	"var" name=ID;
	public ContainerNameDeclarationElements getContainerNameDeclarationAccess() {
		return pContainerNameDeclaration;
	}
	
	public ParserRule getContainerNameDeclarationRule() {
		return getContainerNameDeclarationAccess().getRule();
	}
	
	//enum OutType:
	//	IN | OUT | ERR;
	public OutTypeElements getOutTypeAccess() {
		return eOutType;
	}
	
	public EnumRule getOutTypeRule() {
		return getOutTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
