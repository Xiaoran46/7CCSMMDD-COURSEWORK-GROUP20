/**
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.inf.group20.docker.docker;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.eclipse.emf.common.util.Enumerator;

/**
 * <!-- begin-user-doc -->
 * A representation of the literals of the enumeration '<em><b>Image</b></em>',
 * and utility methods for working with them.
 * <!-- end-user-doc -->
 * @see uk.ac.kcl.inf.group20.docker.docker.DockerPackage#getImage()
 * @model
 * @generated
 */
public enum Image implements Enumerator
{
  /**
   * The '<em><b>Ubuntu</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #UBUNTU_VALUE
   * @generated
   * @ordered
   */
  UBUNTU(0, "Ubuntu", "Ubuntu"),

  /**
   * The '<em><b>Centos</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #CENTOS_VALUE
   * @generated
   * @ordered
   */
  CENTOS(1, "Centos", "Centos"),

  /**
   * The '<em><b>Nginx</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #NGINX_VALUE
   * @generated
   * @ordered
   */
  NGINX(2, "Nginx", "Nginx"),

  /**
   * The '<em><b>PHP</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #PHP_VALUE
   * @generated
   * @ordered
   */
  PHP(3, "PHP", "PHP"),

  /**
   * The '<em><b>Apache</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #APACHE_VALUE
   * @generated
   * @ordered
   */
  APACHE(4, "Apache", "Apache");

  /**
   * The '<em><b>Ubuntu</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #UBUNTU
   * @model name="Ubuntu"
   * @generated
   * @ordered
   */
  public static final int UBUNTU_VALUE = 0;

  /**
   * The '<em><b>Centos</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #CENTOS
   * @model name="Centos"
   * @generated
   * @ordered
   */
  public static final int CENTOS_VALUE = 1;

  /**
   * The '<em><b>Nginx</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #NGINX
   * @model name="Nginx"
   * @generated
   * @ordered
   */
  public static final int NGINX_VALUE = 2;

  /**
   * The '<em><b>PHP</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #PHP
   * @model
   * @generated
   * @ordered
   */
  public static final int PHP_VALUE = 3;

  /**
   * The '<em><b>Apache</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #APACHE
   * @model name="Apache"
   * @generated
   * @ordered
   */
  public static final int APACHE_VALUE = 4;

  /**
   * An array of all the '<em><b>Image</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static final Image[] VALUES_ARRAY =
    new Image[]
    {
      UBUNTU,
      CENTOS,
      NGINX,
      PHP,
      APACHE,
    };

  /**
   * A public read-only list of all the '<em><b>Image</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static final List<Image> VALUES = Collections.unmodifiableList(Arrays.asList(VALUES_ARRAY));

  /**
   * Returns the '<em><b>Image</b></em>' literal with the specified literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param literal the literal.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static Image get(String literal)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      Image result = VALUES_ARRAY[i];
      if (result.toString().equals(literal))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>Image</b></em>' literal with the specified name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param name the name.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static Image getByName(String name)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      Image result = VALUES_ARRAY[i];
      if (result.getName().equals(name))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>Image</b></em>' literal with the specified integer value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the integer value.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static Image get(int value)
  {
    switch (value)
    {
      case UBUNTU_VALUE: return UBUNTU;
      case CENTOS_VALUE: return CENTOS;
      case NGINX_VALUE: return NGINX;
      case PHP_VALUE: return PHP;
      case APACHE_VALUE: return APACHE;
    }
    return null;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final int value;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String name;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String literal;

  /**
   * Only this class can construct instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private Image(int value, String name, String literal)
  {
    this.value = value;
    this.name = name;
    this.literal = literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getLiteral()
  {
    return literal;
  }

  /**
   * Returns the literal value of the enumerator, which is its string representation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    return literal;
  }
  
} //Image
