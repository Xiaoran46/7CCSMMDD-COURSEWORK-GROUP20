/*
 * generated by Xtext 2.24.0
 */
grammar InternalDocker;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package uk.ac.kcl.inf.group20.docker.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package uk.ac.kcl.inf.group20.docker.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import uk.ac.kcl.inf.group20.docker.services.DockerGrammarAccess;

}

@parser::members {

 	private DockerGrammarAccess grammarAccess;

    public InternalDockerParser(TokenStream input, DockerGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected DockerGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getStatementsStatementsParserRuleCall_0());
			}
			lv_statements_0_0=ruleStatements
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"statements",
					lv_statements_0_0,
					"uk.ac.kcl.inf.group20.docker.Docker.Statements");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleStatements
entryRuleStatements returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementsRule()); }
	iv_ruleStatements=ruleStatements
	{ $current=$iv_ruleStatements.current; }
	EOF;

// Rule Statements
ruleStatements returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementsAccess().getRunCreateStatementParserRuleCall_0());
		}
		this_RunCreateStatement_0=ruleRunCreateStatement
		{
			$current = $this_RunCreateStatement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementsAccess().getContainerNameDeclarationParserRuleCall_1());
		}
		this_ContainerNameDeclaration_1=ruleContainerNameDeclaration
		{
			$current = $this_ContainerNameDeclaration_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementsAccess().getStartStatementParserRuleCall_2());
		}
		this_StartStatement_2=ruleStartStatement
		{
			$current = $this_StartStatement_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementsAccess().getStopStatementParserRuleCall_3());
		}
		this_StopStatement_3=ruleStopStatement
		{
			$current = $this_StopStatement_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementsAccess().getRestartStatementParserRuleCall_4());
		}
		this_RestartStatement_4=ruleRestartStatement
		{
			$current = $this_RestartStatement_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementsAccess().getKillStatementParserRuleCall_5());
		}
		this_KillStatement_5=ruleKillStatement
		{
			$current = $this_KillStatement_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementsAccess().getRemoveStatementParserRuleCall_6());
		}
		this_RemoveStatement_6=ruleRemoveStatement
		{
			$current = $this_RemoveStatement_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementsAccess().getPauseStatementParserRuleCall_7());
		}
		this_PauseStatement_7=rulePauseStatement
		{
			$current = $this_PauseStatement_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementsAccess().getUnpauseStatementParserRuleCall_8());
		}
		this_UnpauseStatement_8=ruleUnpauseStatement
		{
			$current = $this_UnpauseStatement_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementsAccess().getExecStatementParserRuleCall_9());
		}
		this_ExecStatement_9=ruleExecStatement
		{
			$current = $this_ExecStatement_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementsAccess().getPsStatementParserRuleCall_10());
		}
		this_PsStatement_10=rulePsStatement
		{
			$current = $this_PsStatement_10.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementsAccess().getInspectStatementParserRuleCall_11());
		}
		this_InspectStatement_11=ruleInspectStatement
		{
			$current = $this_InspectStatement_11.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementsAccess().getAttachStatementParserRuleCall_12());
		}
		this_AttachStatement_12=ruleAttachStatement
		{
			$current = $this_AttachStatement_12.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementsAccess().getEventStatementParserRuleCall_13());
		}
		this_EventStatement_13=ruleEventStatement
		{
			$current = $this_EventStatement_13.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementsAccess().getLogsStatementParserRuleCall_14());
		}
		this_LogsStatement_14=ruleLogsStatement
		{
			$current = $this_LogsStatement_14.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementsAccess().getWaitStatementParserRuleCall_15());
		}
		this_WaitStatement_15=ruleWaitStatement
		{
			$current = $this_WaitStatement_15.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementsAccess().getExportStatementParserRuleCall_16());
		}
		this_ExportStatement_16=ruleExportStatement
		{
			$current = $this_ExportStatement_16.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementsAccess().getPortStatementParserRuleCall_17());
		}
		this_PortStatement_17=rulePortStatement
		{
			$current = $this_PortStatement_17.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementsAccess().getCommitStatementParserRuleCall_18());
		}
		this_CommitStatement_18=ruleCommitStatement
		{
			$current = $this_CommitStatement_18.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementsAccess().getCpStatementParserRuleCall_19());
		}
		this_CpStatement_19=ruleCpStatement
		{
			$current = $this_CpStatement_19.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementsAccess().getDiffStatementParserRuleCall_20());
		}
		this_DiffStatement_20=ruleDiffStatement
		{
			$current = $this_DiffStatement_20.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementsAccess().getImageStatementParserRuleCall_21());
		}
		this_ImageStatement_21=ruleImageStatement
		{
			$current = $this_ImageStatement_21.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementsAccess().getRemoveImageStatementParserRuleCall_22());
		}
		this_RemoveImageStatement_22=ruleRemoveImageStatement
		{
			$current = $this_RemoveImageStatement_22.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRemoveImageStatement
entryRuleRemoveImageStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRemoveImageStatementRule()); }
	iv_ruleRemoveImageStatement=ruleRemoveImageStatement
	{ $current=$iv_ruleRemoveImageStatement.current; }
	EOF;

// Rule RemoveImageStatement
ruleRemoveImageStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='removeImg'
		{
			newLeafNode(otherlv_0, grammarAccess.getRemoveImageStatementAccess().getRemoveImgKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRemoveImageStatementAccess().getRemoveimageOptionsRemoveImageOptionsEnumRuleCall_1_0());
				}
				lv_removeimageOptions_1_0=ruleRemoveImageOptions
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRemoveImageStatementRule());
					}
					add(
						$current,
						"removeimageOptions",
						lv_removeimageOptions_1_0,
						"uk.ac.kcl.inf.group20.docker.Docker.RemoveImageOptions");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				lv_image_2_0=RULE_STRING
				{
					newLeafNode(lv_image_2_0, grammarAccess.getRemoveImageStatementAccess().getImageSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRemoveImageStatementRule());
					}
					setWithLastConsumed(
						$current,
						"image",
						lv_image_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleImageStatement
entryRuleImageStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImageStatementRule()); }
	iv_ruleImageStatement=ruleImageStatement
	{ $current=$iv_ruleImageStatement.current; }
	EOF;

// Rule ImageStatement
ruleImageStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='image'
		{
			newLeafNode(otherlv_0, grammarAccess.getImageStatementAccess().getImageKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getImageStatementAccess().getImageOptionsImageOptionsParserRuleCall_1_0());
				}
				lv_imageOptions_1_0=ruleImageOptions
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getImageStatementRule());
					}
					add(
						$current,
						"imageOptions",
						lv_imageOptions_1_0,
						"uk.ac.kcl.inf.group20.docker.Docker.ImageOptions");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				lv_repository_2_0=RULE_STRING
				{
					newLeafNode(lv_repository_2_0, grammarAccess.getImageStatementAccess().getRepositorySTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getImageStatementRule());
					}
					setWithLastConsumed(
						$current,
						"repository",
						lv_repository_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleImageOptions
entryRuleImageOptions returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImageOptionsRule()); }
	iv_ruleImageOptions=ruleImageOptions
	{ $current=$iv_ruleImageOptions.current; }
	EOF;

// Rule ImageOptions
ruleImageOptions returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getImageOptionsAccess().getImageOptionsAction_0_0(),
						$current);
				}
			)
			(
				(
					lv_option_1_0='show_all'
					{
						newLeafNode(lv_option_1_0, grammarAccess.getImageOptionsAccess().getOptionShow_allKeyword_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getImageOptionsRule());
						}
						setWithLastConsumed($current, "option", lv_option_1_0, "show_all");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getImageOptionsAccess().getImageOptionsAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_option_3_0='show_digests'
					{
						newLeafNode(lv_option_3_0, grammarAccess.getImageOptionsAccess().getOptionShow_digestsKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getImageOptionsRule());
						}
						setWithLastConsumed($current, "option", lv_option_3_0, "show_digests");
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_option_4_0='filter'
					{
						newLeafNode(lv_option_4_0, grammarAccess.getImageOptionsAccess().getOptionFilterKeyword_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getImageOptionsRule());
						}
						setWithLastConsumed($current, "option", lv_option_4_0, "filter");
					}
				)
			)
			(
				(
					lv_condition_5_0=RULE_STRING
					{
						newLeafNode(lv_condition_5_0, grammarAccess.getImageOptionsAccess().getConditionSTRINGTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getImageOptionsRule());
						}
						setWithLastConsumed(
							$current,
							"condition",
							lv_condition_5_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_option_6_0='format'
					{
						newLeafNode(lv_option_6_0, grammarAccess.getImageOptionsAccess().getOptionFormatKeyword_3_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getImageOptionsRule());
						}
						setWithLastConsumed($current, "option", lv_option_6_0, "format");
					}
				)
			)
			(
				(
					lv_formats_7_0=RULE_STRING
					{
						newLeafNode(lv_formats_7_0, grammarAccess.getImageOptionsAccess().getFormatsSTRINGTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getImageOptionsRule());
						}
						setWithLastConsumed(
							$current,
							"formats",
							lv_formats_7_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getImageOptionsAccess().getImageOptionsAction_4_0(),
						$current);
				}
			)
			(
				(
					lv_option_9_0='complete'
					{
						newLeafNode(lv_option_9_0, grammarAccess.getImageOptionsAccess().getOptionCompleteKeyword_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getImageOptionsRule());
						}
						setWithLastConsumed($current, "option", lv_option_9_0, "complete");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getImageOptionsAccess().getImageOptionsAction_5_0(),
						$current);
				}
			)
			(
				(
					lv_option_11_0='show_ID'
					{
						newLeafNode(lv_option_11_0, grammarAccess.getImageOptionsAccess().getOptionShow_IDKeyword_5_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getImageOptionsRule());
						}
						setWithLastConsumed($current, "option", lv_option_11_0, "show_ID");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleDiffStatement
entryRuleDiffStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDiffStatementRule()); }
	iv_ruleDiffStatement=ruleDiffStatement
	{ $current=$iv_ruleDiffStatement.current; }
	EOF;

// Rule DiffStatement
ruleDiffStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='check_different'
		{
			newLeafNode(otherlv_0, grammarAccess.getDiffStatementAccess().getCheck_differentKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDiffStatementRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getDiffStatementAccess().getContainerNameContainerNameDeclarationCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleCpStatement
entryRuleCpStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCpStatementRule()); }
	iv_ruleCpStatement=ruleCpStatement
	{ $current=$iv_ruleCpStatement.current; }
	EOF;

// Rule CpStatement
ruleCpStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='copy'
		{
			newLeafNode(otherlv_0, grammarAccess.getCpStatementAccess().getCopyKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCpStatementAccess().getLinkLinkOptionEnumRuleCall_1_0());
				}
				lv_link_1_0=ruleLinkOption
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCpStatementRule());
					}
					set(
						$current,
						"link",
						lv_link_1_0,
						"uk.ac.kcl.inf.group20.docker.Docker.LinkOption");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCpStatementAccess().getSourceSourceOptionParserRuleCall_2_0());
				}
				lv_source_2_0=ruleSourceOption
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCpStatementRule());
					}
					set(
						$current,
						"source",
						lv_source_2_0,
						"uk.ac.kcl.inf.group20.docker.Docker.SourceOption");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_destination_3_0=RULE_STRING
				{
					newLeafNode(lv_destination_3_0, grammarAccess.getCpStatementAccess().getDestinationSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCpStatementRule());
					}
					setWithLastConsumed(
						$current,
						"destination",
						lv_destination_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleSourceOption
entryRuleSourceOption returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSourceOptionRule()); }
	iv_ruleSourceOption=ruleSourceOption
	{ $current=$iv_ruleSourceOption.current; }
	EOF;

// Rule SourceOption
ruleSourceOption returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_option1_0_0=RULE_STRING
				{
					newLeafNode(lv_option1_0_0, grammarAccess.getSourceOptionAccess().getOption1STRINGTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSourceOptionRule());
					}
					setWithLastConsumed(
						$current,
						"option1",
						lv_option1_0_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		    |
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSourceOptionRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getSourceOptionAccess().getOption2ContainerNameDeclarationCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleCommitStatement
entryRuleCommitStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommitStatementRule()); }
	iv_ruleCommitStatement=ruleCommitStatement
	{ $current=$iv_ruleCommitStatement.current; }
	EOF;

// Rule CommitStatement
ruleCommitStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='commit'
		{
			newLeafNode(otherlv_0, grammarAccess.getCommitStatementAccess().getCommitKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCommitStatementAccess().getCommitOptionsCommitOptionsParserRuleCall_1_0());
				}
				lv_commitOptions_1_0=ruleCommitOptions
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCommitStatementRule());
					}
					add(
						$current,
						"commitOptions",
						lv_commitOptions_1_0,
						"uk.ac.kcl.inf.group20.docker.Docker.CommitOptions");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCommitStatementRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getCommitStatementAccess().getContainerNameContainerNameDeclarationCrossReference_2_0());
				}
			)
		)
		(
			(
				lv_repository_3_0=RULE_STRING
				{
					newLeafNode(lv_repository_3_0, grammarAccess.getCommitStatementAccess().getRepositorySTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCommitStatementRule());
					}
					setWithLastConsumed(
						$current,
						"repository",
						lv_repository_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleCommitOptions
entryRuleCommitOptions returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommitOptionsRule()); }
	iv_ruleCommitOptions=ruleCommitOptions
	{ $current=$iv_ruleCommitOptions.current; }
	EOF;

// Rule CommitOptions
ruleCommitOptions returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_option_0_0='author'
					{
						newLeafNode(lv_option_0_0, grammarAccess.getCommitOptionsAccess().getOptionAuthorKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCommitOptionsRule());
						}
						setWithLastConsumed($current, "option", lv_option_0_0, "author");
					}
				)
			)
			(
				(
					lv_author_1_0=RULE_STRING
					{
						newLeafNode(lv_author_1_0, grammarAccess.getCommitOptionsAccess().getAuthorSTRINGTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCommitOptionsRule());
						}
						setWithLastConsumed(
							$current,
							"author",
							lv_author_1_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getCommitOptionsAccess().getCommitOptionsAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_option_3_0='create'
					{
						newLeafNode(lv_option_3_0, grammarAccess.getCommitOptionsAccess().getOptionCreateKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCommitOptionsRule());
						}
						setWithLastConsumed($current, "option", lv_option_3_0, "create");
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_option_4_0='commit_description'
					{
						newLeafNode(lv_option_4_0, grammarAccess.getCommitOptionsAccess().getOptionCommit_descriptionKeyword_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCommitOptionsRule());
						}
						setWithLastConsumed($current, "option", lv_option_4_0, "commit_description");
					}
				)
			)
			(
				(
					lv_description_5_0=RULE_STRING
					{
						newLeafNode(lv_description_5_0, grammarAccess.getCommitOptionsAccess().getDescriptionSTRINGTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCommitOptionsRule());
						}
						setWithLastConsumed(
							$current,
							"description",
							lv_description_5_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getCommitOptionsAccess().getCommitOptionsAction_3_0(),
						$current);
				}
			)
			(
				(
					lv_option_7_0='pause_when_commit'
					{
						newLeafNode(lv_option_7_0, grammarAccess.getCommitOptionsAccess().getOptionPause_when_commitKeyword_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCommitOptionsRule());
						}
						setWithLastConsumed($current, "option", lv_option_7_0, "pause_when_commit");
					}
				)
			)
		)
	)
;

// Entry rule entryRulePortStatement
entryRulePortStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPortStatementRule()); }
	iv_rulePortStatement=rulePortStatement
	{ $current=$iv_rulePortStatement.current; }
	EOF;

// Rule PortStatement
rulePortStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='port'
		{
			newLeafNode(otherlv_0, grammarAccess.getPortStatementAccess().getPortKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPortStatementRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getPortStatementAccess().getContainerNameContainerNameDeclarationCrossReference_1_0());
				}
			)
		)
		(
			(
				lv_private_port_2_0=RULE_STRING
				{
					newLeafNode(lv_private_port_2_0, grammarAccess.getPortStatementAccess().getPrivate_portSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPortStatementRule());
					}
					setWithLastConsumed(
						$current,
						"private_port",
						lv_private_port_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleExportStatement
entryRuleExportStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExportStatementRule()); }
	iv_ruleExportStatement=ruleExportStatement
	{ $current=$iv_ruleExportStatement.current; }
	EOF;

// Rule ExportStatement
ruleExportStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='export'
		{
			newLeafNode(otherlv_0, grammarAccess.getExportStatementAccess().getExportKeyword_0());
		}
		(
			(
				lv_file_path_1_0=RULE_STRING
				{
					newLeafNode(lv_file_path_1_0, grammarAccess.getExportStatementAccess().getFile_pathSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExportStatementRule());
					}
					setWithLastConsumed(
						$current,
						"file_path",
						lv_file_path_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExportStatementRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getExportStatementAccess().getContainerNameContainerNameDeclarationCrossReference_2_0());
				}
			)
		)
	)
;

// Entry rule entryRuleWaitStatement
entryRuleWaitStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWaitStatementRule()); }
	iv_ruleWaitStatement=ruleWaitStatement
	{ $current=$iv_ruleWaitStatement.current; }
	EOF;

// Rule WaitStatement
ruleWaitStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='wait'
		{
			newLeafNode(otherlv_0, grammarAccess.getWaitStatementAccess().getWaitKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWaitStatementRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getWaitStatementAccess().getContainerNameContainerNameDeclarationCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleLogsStatement
entryRuleLogsStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogsStatementRule()); }
	iv_ruleLogsStatement=ruleLogsStatement
	{ $current=$iv_ruleLogsStatement.current; }
	EOF;

// Rule LogsStatement
ruleLogsStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='logs'
		{
			newLeafNode(otherlv_0, grammarAccess.getLogsStatementAccess().getLogsKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLogsStatementAccess().getLogOptionsLogOptionsParserRuleCall_1_0());
				}
				lv_logOptions_1_0=ruleLogOptions
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLogsStatementRule());
					}
					add(
						$current,
						"logOptions",
						lv_logOptions_1_0,
						"uk.ac.kcl.inf.group20.docker.Docker.LogOptions");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLogsStatementRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getLogsStatementAccess().getContainerNameContainerNameDeclarationCrossReference_2_0());
				}
			)
		)
	)
;

// Entry rule entryRuleLogOptions
entryRuleLogOptions returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogOptionsRule()); }
	iv_ruleLogOptions=ruleLogOptions
	{ $current=$iv_ruleLogOptions.current; }
	EOF;

// Rule LogOptions
ruleLogOptions returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getLogOptionsAccess().getLogOptionsAction_0_0(),
						$current);
				}
			)
			(
				(
					lv_option_1_0='track_output'
					{
						newLeafNode(lv_option_1_0, grammarAccess.getLogOptionsAccess().getOptionTrack_outputKeyword_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLogOptionsRule());
						}
						setWithLastConsumed($current, "option", lv_option_1_0, "track_output");
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_option_2_0='since'
					{
						newLeafNode(lv_option_2_0, grammarAccess.getLogOptionsAccess().getOptionSinceKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLogOptionsRule());
						}
						setWithLastConsumed($current, "option", lv_option_2_0, "since");
					}
				)
			)
			(
				(
					lv_time_3_0=RULE_STRING
					{
						newLeafNode(lv_time_3_0, grammarAccess.getLogOptionsAccess().getTimeSTRINGTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLogOptionsRule());
						}
						setWithLastConsumed(
							$current,
							"time",
							lv_time_3_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getLogOptionsAccess().getLogOptionsAction_2_0(),
						$current);
				}
			)
			(
				(
					lv_option_5_0='show_timestamp'
					{
						newLeafNode(lv_option_5_0, grammarAccess.getLogOptionsAccess().getOptionShow_timestampKeyword_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLogOptionsRule());
						}
						setWithLastConsumed($current, "option", lv_option_5_0, "show_timestamp");
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_option_6_0='show_tail_n_logs'
					{
						newLeafNode(lv_option_6_0, grammarAccess.getLogOptionsAccess().getOptionShow_tail_n_logsKeyword_3_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLogOptionsRule());
						}
						setWithLastConsumed($current, "option", lv_option_6_0, "show_tail_n_logs");
					}
				)
			)
			(
				(
					lv_number_7_0=RULE_INT
					{
						newLeafNode(lv_number_7_0, grammarAccess.getLogOptionsAccess().getNumberINTTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLogOptionsRule());
						}
						setWithLastConsumed(
							$current,
							"number",
							lv_number_7_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleEventStatement
entryRuleEventStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEventStatementRule()); }
	iv_ruleEventStatement=ruleEventStatement
	{ $current=$iv_ruleEventStatement.current; }
	EOF;

// Rule EventStatement
ruleEventStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='events'
		{
			newLeafNode(otherlv_0, grammarAccess.getEventStatementAccess().getEventsKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEventStatementAccess().getEventOptionsEventOptionsParserRuleCall_1_0());
				}
				lv_eventOptions_1_0=ruleEventOptions
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEventStatementRule());
					}
					add(
						$current,
						"eventOptions",
						lv_eventOptions_1_0,
						"uk.ac.kcl.inf.group20.docker.Docker.EventOptions");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleEventOptions
entryRuleEventOptions returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEventOptionsRule()); }
	iv_ruleEventOptions=ruleEventOptions
	{ $current=$iv_ruleEventOptions.current; }
	EOF;

// Rule EventOptions
ruleEventOptions returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_option_0_0='filter'
					{
						newLeafNode(lv_option_0_0, grammarAccess.getEventOptionsAccess().getOptionFilterKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEventOptionsRule());
						}
						setWithLastConsumed($current, "option", lv_option_0_0, "filter");
					}
				)
			)
			(
				(
					lv_commands_1_0=RULE_STRING
					{
						newLeafNode(lv_commands_1_0, grammarAccess.getEventOptionsAccess().getCommandsSTRINGTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEventOptionsRule());
						}
						setWithLastConsumed(
							$current,
							"commands",
							lv_commands_1_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_option_2_0='since'
					{
						newLeafNode(lv_option_2_0, grammarAccess.getEventOptionsAccess().getOptionSinceKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEventOptionsRule());
						}
						setWithLastConsumed($current, "option", lv_option_2_0, "since");
					}
				)
			)
			(
				(
					lv_timeS_3_0=RULE_STRING
					{
						newLeafNode(lv_timeS_3_0, grammarAccess.getEventOptionsAccess().getTimeSSTRINGTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEventOptionsRule());
						}
						setWithLastConsumed(
							$current,
							"timeS",
							lv_timeS_3_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_option_4_0='until'
					{
						newLeafNode(lv_option_4_0, grammarAccess.getEventOptionsAccess().getOptionUntilKeyword_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEventOptionsRule());
						}
						setWithLastConsumed($current, "option", lv_option_4_0, "until");
					}
				)
			)
			(
				(
					lv_timeU_5_0=RULE_STRING
					{
						newLeafNode(lv_timeU_5_0, grammarAccess.getEventOptionsAccess().getTimeUSTRINGTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEventOptionsRule());
						}
						setWithLastConsumed(
							$current,
							"timeU",
							lv_timeU_5_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleAttachStatement
entryRuleAttachStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttachStatementRule()); }
	iv_ruleAttachStatement=ruleAttachStatement
	{ $current=$iv_ruleAttachStatement.current; }
	EOF;

// Rule AttachStatement
ruleAttachStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='attach'
		{
			newLeafNode(otherlv_0, grammarAccess.getAttachStatementAccess().getAttachKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAttachStatementAccess().getAttachOptionAttachOptionEnumRuleCall_1_0());
				}
				lv_attachOption_1_0=ruleAttachOption
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttachStatementRule());
					}
					set(
						$current,
						"attachOption",
						lv_attachOption_1_0,
						"uk.ac.kcl.inf.group20.docker.Docker.AttachOption");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttachStatementRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getAttachStatementAccess().getContainerNameContainerNameDeclarationCrossReference_2_0());
				}
			)
		)
	)
;

// Entry rule entryRuleInspectStatement
entryRuleInspectStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInspectStatementRule()); }
	iv_ruleInspectStatement=ruleInspectStatement
	{ $current=$iv_ruleInspectStatement.current; }
	EOF;

// Rule InspectStatement
ruleInspectStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='inspect'
		{
			newLeafNode(otherlv_0, grammarAccess.getInspectStatementAccess().getInspectKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInspectStatementAccess().getInspectOptionsInspectOptionsParserRuleCall_1_0());
				}
				lv_inspectOptions_1_0=ruleInspectOptions
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInspectStatementRule());
					}
					add(
						$current,
						"inspectOptions",
						lv_inspectOptions_1_0,
						"uk.ac.kcl.inf.group20.docker.Docker.InspectOptions");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleInspectOptions
entryRuleInspectOptions returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInspectOptionsRule()); }
	iv_ruleInspectOptions=ruleInspectOptions
	{ $current=$iv_ruleInspectOptions.current; }
	EOF;

// Rule InspectOptions
ruleInspectOptions returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_option_0_0='format'
					{
						newLeafNode(lv_option_0_0, grammarAccess.getInspectOptionsAccess().getOptionFormatKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getInspectOptionsRule());
						}
						setWithLastConsumed($current, "option", lv_option_0_0, "format");
					}
				)
			)
			(
				(
					lv_formats_1_0=RULE_STRING
					{
						newLeafNode(lv_formats_1_0, grammarAccess.getInspectOptionsAccess().getFormatsSTRINGTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getInspectOptionsRule());
						}
						setWithLastConsumed(
							$current,
							"formats",
							lv_formats_1_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		(
			(
				lv_option_2_0='show_size'
				{
					newLeafNode(lv_option_2_0, grammarAccess.getInspectOptionsAccess().getOptionShow_sizeKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInspectOptionsRule());
					}
					setWithLastConsumed($current, "option", lv_option_2_0, "show_size");
				}
			)
		)
		    |
		(
			(
				(
					lv_option_3_0='type'
					{
						newLeafNode(lv_option_3_0, grammarAccess.getInspectOptionsAccess().getOptionTypeKeyword_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getInspectOptionsRule());
						}
						setWithLastConsumed($current, "option", lv_option_3_0, "type");
					}
				)
			)
			(
				(
					lv_types_4_0=RULE_STRING
					{
						newLeafNode(lv_types_4_0, grammarAccess.getInspectOptionsAccess().getTypesSTRINGTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getInspectOptionsRule());
						}
						setWithLastConsumed(
							$current,
							"types",
							lv_types_4_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
	)
;

// Entry rule entryRulePsStatement
entryRulePsStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPsStatementRule()); }
	iv_rulePsStatement=rulePsStatement
	{ $current=$iv_rulePsStatement.current; }
	EOF;

// Rule PsStatement
rulePsStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ps'
		{
			newLeafNode(otherlv_0, grammarAccess.getPsStatementAccess().getPsKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPsStatementAccess().getPsOptionsPsOptionsParserRuleCall_1_0());
				}
				lv_psOptions_1_0=rulePsOptions
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPsStatementRule());
					}
					add(
						$current,
						"psOptions",
						lv_psOptions_1_0,
						"uk.ac.kcl.inf.group20.docker.Docker.PsOptions");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRulePsOptions
entryRulePsOptions returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPsOptionsRule()); }
	iv_rulePsOptions=rulePsOptions
	{ $current=$iv_rulePsOptions.current; }
	EOF;

// Rule PsOptions
rulePsOptions returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_option_0_0='show_container'
				{
					newLeafNode(lv_option_0_0, grammarAccess.getPsOptionsAccess().getOptionShow_containerKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPsOptionsRule());
					}
					setWithLastConsumed($current, "option", lv_option_0_0, "show_container");
				}
			)
		)
		    |
		(
			(
				lv_option_1_0='show_all_containers'
				{
					newLeafNode(lv_option_1_0, grammarAccess.getPsOptionsAccess().getOptionShow_all_containersKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPsOptionsRule());
					}
					setWithLastConsumed($current, "option", lv_option_1_0, "show_all_containers");
				}
			)
		)
		    |
		(
			(
				(
					lv_option_2_0='filter'
					{
						newLeafNode(lv_option_2_0, grammarAccess.getPsOptionsAccess().getOptionFilterKeyword_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPsOptionsRule());
						}
						setWithLastConsumed($current, "option", lv_option_2_0, "filter");
					}
				)
			)
			(
				(
					lv_commands_3_0=RULE_STRING
					{
						newLeafNode(lv_commands_3_0, grammarAccess.getPsOptionsAccess().getCommandsSTRINGTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPsOptionsRule());
						}
						setWithLastConsumed(
							$current,
							"commands",
							lv_commands_3_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_option_4_0='format'
					{
						newLeafNode(lv_option_4_0, grammarAccess.getPsOptionsAccess().getOptionFormatKeyword_3_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPsOptionsRule());
						}
						setWithLastConsumed($current, "option", lv_option_4_0, "format");
					}
				)
			)
			(
				(
					lv_formats_5_0=RULE_STRING
					{
						newLeafNode(lv_formats_5_0, grammarAccess.getPsOptionsAccess().getFormatsSTRINGTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPsOptionsRule());
						}
						setWithLastConsumed(
							$current,
							"formats",
							lv_formats_5_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		(
			(
				lv_option_6_0='show_last_container'
				{
					newLeafNode(lv_option_6_0, grammarAccess.getPsOptionsAccess().getOptionShow_last_containerKeyword_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPsOptionsRule());
					}
					setWithLastConsumed($current, "option", lv_option_6_0, "show_last_container");
				}
			)
		)
		    |
		(
			(
				(
					lv_option_7_0='list_last_n_containers'
					{
						newLeafNode(lv_option_7_0, grammarAccess.getPsOptionsAccess().getOptionList_last_n_containersKeyword_5_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPsOptionsRule());
						}
						setWithLastConsumed($current, "option", lv_option_7_0, "list_last_n_containers");
					}
				)
			)
			(
				(
					lv_n_8_0=RULE_INT
					{
						newLeafNode(lv_n_8_0, grammarAccess.getPsOptionsAccess().getNINTTerminalRuleCall_5_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPsOptionsRule());
						}
						setWithLastConsumed(
							$current,
							"n",
							lv_n_8_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)
		    |
		(
			(
				lv_option_9_0='complete'
				{
					newLeafNode(lv_option_9_0, grammarAccess.getPsOptionsAccess().getOptionCompleteKeyword_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPsOptionsRule());
					}
					setWithLastConsumed($current, "option", lv_option_9_0, "complete");
				}
			)
		)
		    |
		(
			(
				lv_option_10_0='only_show_id'
				{
					newLeafNode(lv_option_10_0, grammarAccess.getPsOptionsAccess().getOptionOnly_show_idKeyword_7_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPsOptionsRule());
					}
					setWithLastConsumed($current, "option", lv_option_10_0, "only_show_id");
				}
			)
		)
		    |
		(
			(
				lv_option_11_0='show_size'
				{
					newLeafNode(lv_option_11_0, grammarAccess.getPsOptionsAccess().getOptionShow_sizeKeyword_8_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPsOptionsRule());
					}
					setWithLastConsumed($current, "option", lv_option_11_0, "show_size");
				}
			)
		)
	)
;

// Entry rule entryRuleExecStatement
entryRuleExecStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExecStatementRule()); }
	iv_ruleExecStatement=ruleExecStatement
	{ $current=$iv_ruleExecStatement.current; }
	EOF;

// Rule ExecStatement
ruleExecStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='execute'
		{
			newLeafNode(otherlv_0, grammarAccess.getExecStatementAccess().getExecuteKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExecStatementAccess().getExecOptionsExecOptionEnumRuleCall_1_0());
				}
				lv_execOptions_1_0=ruleExecOption
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExecStatementRule());
					}
					add(
						$current,
						"execOptions",
						lv_execOptions_1_0,
						"uk.ac.kcl.inf.group20.docker.Docker.ExecOption");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExecStatementRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getExecStatementAccess().getContainerNameContainerNameDeclarationCrossReference_2_0());
				}
			)
		)
		(
			(
				lv_commands_3_0=RULE_STRING
				{
					newLeafNode(lv_commands_3_0, grammarAccess.getExecStatementAccess().getCommandsSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExecStatementRule());
					}
					setWithLastConsumed(
						$current,
						"commands",
						lv_commands_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleUnpauseStatement
entryRuleUnpauseStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnpauseStatementRule()); }
	iv_ruleUnpauseStatement=ruleUnpauseStatement
	{ $current=$iv_ruleUnpauseStatement.current; }
	EOF;

// Rule UnpauseStatement
ruleUnpauseStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='unpause'
		{
			newLeafNode(otherlv_0, grammarAccess.getUnpauseStatementAccess().getUnpauseKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUnpauseStatementRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getUnpauseStatementAccess().getContainerNameContainerNameDeclarationCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRulePauseStatement
entryRulePauseStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPauseStatementRule()); }
	iv_rulePauseStatement=rulePauseStatement
	{ $current=$iv_rulePauseStatement.current; }
	EOF;

// Rule PauseStatement
rulePauseStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='pause'
		{
			newLeafNode(otherlv_0, grammarAccess.getPauseStatementAccess().getPauseKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPauseStatementRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getPauseStatementAccess().getContainerNameContainerNameDeclarationCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleRestartStatement
entryRuleRestartStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRestartStatementRule()); }
	iv_ruleRestartStatement=ruleRestartStatement
	{ $current=$iv_ruleRestartStatement.current; }
	EOF;

// Rule RestartStatement
ruleRestartStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='restart'
		{
			newLeafNode(otherlv_0, grammarAccess.getRestartStatementAccess().getRestartKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRestartStatementRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getRestartStatementAccess().getContainerNameContainerNameDeclarationCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleStopStatement
entryRuleStopStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStopStatementRule()); }
	iv_ruleStopStatement=ruleStopStatement
	{ $current=$iv_ruleStopStatement.current; }
	EOF;

// Rule StopStatement
ruleStopStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='stop'
		{
			newLeafNode(otherlv_0, grammarAccess.getStopStatementAccess().getStopKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStopStatementRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getStopStatementAccess().getContainerNameContainerNameDeclarationCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleStartStatement
entryRuleStartStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStartStatementRule()); }
	iv_ruleStartStatement=ruleStartStatement
	{ $current=$iv_ruleStartStatement.current; }
	EOF;

// Rule StartStatement
ruleStartStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='start'
		{
			newLeafNode(otherlv_0, grammarAccess.getStartStatementAccess().getStartKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStartStatementRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getStartStatementAccess().getContainerNameContainerNameDeclarationCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleKillStatement
entryRuleKillStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getKillStatementRule()); }
	iv_ruleKillStatement=ruleKillStatement
	{ $current=$iv_ruleKillStatement.current; }
	EOF;

// Rule KillStatement
ruleKillStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getKillStatementAccess().getKillKillOptionEnumRuleCall_0_0());
				}
				lv_kill_0_0=ruleKillOption
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getKillStatementRule());
					}
					set(
						$current,
						"kill",
						lv_kill_0_0,
						"uk.ac.kcl.inf.group20.docker.Docker.KillOption");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getKillStatementRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getKillStatementAccess().getContainerNameContainerNameDeclarationCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleRemoveStatement
entryRuleRemoveStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRemoveStatementRule()); }
	iv_ruleRemoveStatement=ruleRemoveStatement
	{ $current=$iv_ruleRemoveStatement.current; }
	EOF;

// Rule RemoveStatement
ruleRemoveStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='remove'
		{
			newLeafNode(otherlv_0, grammarAccess.getRemoveStatementAccess().getRemoveKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRemoveStatementAccess().getRmOptionsRmOptionsEnumRuleCall_1_0());
				}
				lv_rmOptions_1_0=ruleRmOptions
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRemoveStatementRule());
					}
					set(
						$current,
						"rmOptions",
						lv_rmOptions_1_0,
						"uk.ac.kcl.inf.group20.docker.Docker.RmOptions");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRemoveStatementRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getRemoveStatementAccess().getContainerNameContainerNameDeclarationCrossReference_2_0());
				}
			)
		)
	)
;

// Entry rule entryRuleRunCreateStatement
entryRuleRunCreateStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRunCreateStatementRule()); }
	iv_ruleRunCreateStatement=ruleRunCreateStatement
	{ $current=$iv_ruleRunCreateStatement.current; }
	EOF;

// Rule RunCreateStatement
ruleRunCreateStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRunCreateStatementAccess().getOrderRunorCreateEnumRuleCall_0_0());
				}
				lv_order_0_0=ruleRunorCreate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRunCreateStatementRule());
					}
					set(
						$current,
						"order",
						lv_order_0_0,
						"uk.ac.kcl.inf.group20.docker.Docker.RunorCreate");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRunCreateStatementAccess().getRunOptionsRunOptionParserRuleCall_1_0());
				}
				lv_runOptions_1_0=ruleRunOption
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRunCreateStatementRule());
					}
					add(
						$current,
						"runOptions",
						lv_runOptions_1_0,
						"uk.ac.kcl.inf.group20.docker.Docker.RunOption");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getRunCreateStatementAccess().getImageImageEnumRuleCall_2_0());
				}
				lv_image_2_0=ruleImage
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRunCreateStatementRule());
					}
					set(
						$current,
						"image",
						lv_image_2_0,
						"uk.ac.kcl.inf.group20.docker.Docker.Image");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_commands_3_0=RULE_STRING
				{
					newLeafNode(lv_commands_3_0, grammarAccess.getRunCreateStatementAccess().getCommandsSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRunCreateStatementRule());
					}
					setWithLastConsumed(
						$current,
						"commands",
						lv_commands_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleRunOption
entryRuleRunOption returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRunOptionRule()); }
	iv_ruleRunOption=ruleRunOption
	{ $current=$iv_ruleRunOption.current; }
	EOF;

// Rule RunOption
ruleRunOption returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_condition_0_0='standard'
					{
						newLeafNode(lv_condition_0_0, grammarAccess.getRunOptionAccess().getConditionStandardKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRunOptionRule());
						}
						setWithLastConsumed($current, "condition", lv_condition_0_0, "standard");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRunOptionAccess().getOutTypeOutTypeEnumRuleCall_0_1_0());
					}
					lv_outType_1_0=ruleOutType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRunOptionRule());
						}
						set(
							$current,
							"outType",
							lv_outType_1_0,
							"uk.ac.kcl.inf.group20.docker.Docker.OutType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getRunOptionAccess().getRunOptionAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_condition_3_0='backstage'
					{
						newLeafNode(lv_condition_3_0, grammarAccess.getRunOptionAccess().getConditionBackstageKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRunOptionRule());
						}
						setWithLastConsumed($current, "condition", lv_condition_3_0, "backstage");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getRunOptionAccess().getRunOptionAction_2_0(),
						$current);
				}
			)
			(
				(
					lv_condition_5_0='interface'
					{
						newLeafNode(lv_condition_5_0, grammarAccess.getRunOptionAccess().getConditionInterfaceKeyword_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRunOptionRule());
						}
						setWithLastConsumed($current, "condition", lv_condition_5_0, "interface");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getRunOptionAccess().getRunOptionAction_3_0(),
						$current);
				}
			)
			(
				(
					lv_condition_7_0='random_port'
					{
						newLeafNode(lv_condition_7_0, grammarAccess.getRunOptionAccess().getConditionRandom_portKeyword_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRunOptionRule());
						}
						setWithLastConsumed($current, "condition", lv_condition_7_0, "random_port");
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_condition_8_0='specify_port'
					{
						newLeafNode(lv_condition_8_0, grammarAccess.getRunOptionAccess().getConditionSpecify_portKeyword_4_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRunOptionRule());
						}
						setWithLastConsumed($current, "condition", lv_condition_8_0, "specify_port");
					}
				)
			)
			(
				(
					lv_portName_9_0=RULE_STRING
					{
						newLeafNode(lv_portName_9_0, grammarAccess.getRunOptionAccess().getPortNameSTRINGTerminalRuleCall_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRunOptionRule());
						}
						setWithLastConsumed(
							$current,
							"portName",
							lv_portName_9_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getRunOptionAccess().getRunOptionAction_5_0(),
						$current);
				}
			)
			(
				(
					lv_condition_11_0='terminate'
					{
						newLeafNode(lv_condition_11_0, grammarAccess.getRunOptionAccess().getConditionTerminateKeyword_5_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRunOptionRule());
						}
						setWithLastConsumed($current, "condition", lv_condition_11_0, "terminate");
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_condition_12_0='DNS'
					{
						newLeafNode(lv_condition_12_0, grammarAccess.getRunOptionAccess().getConditionDNSKeyword_6_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRunOptionRule());
						}
						setWithLastConsumed($current, "condition", lv_condition_12_0, "DNS");
					}
				)
			)
			(
				(
					lv_server_13_0=RULE_STRING
					{
						newLeafNode(lv_server_13_0, grammarAccess.getRunOptionAccess().getServerSTRINGTerminalRuleCall_6_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRunOptionRule());
						}
						setWithLastConsumed(
							$current,
							"server",
							lv_server_13_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_condition_14_0='search_DNS'
					{
						newLeafNode(lv_condition_14_0, grammarAccess.getRunOptionAccess().getConditionSearch_DNSKeyword_7_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRunOptionRule());
						}
						setWithLastConsumed($current, "condition", lv_condition_14_0, "search_DNS");
					}
				)
			)
			(
				(
					lv_domainName_15_0=RULE_STRING
					{
						newLeafNode(lv_domainName_15_0, grammarAccess.getRunOptionAccess().getDomainNameSTRINGTerminalRuleCall_7_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRunOptionRule());
						}
						setWithLastConsumed(
							$current,
							"domainName",
							lv_domainName_15_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_condition_16_0='hostname'
					{
						newLeafNode(lv_condition_16_0, grammarAccess.getRunOptionAccess().getConditionHostnameKeyword_8_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRunOptionRule());
						}
						setWithLastConsumed($current, "condition", lv_condition_16_0, "hostname");
					}
				)
			)
			(
				(
					lv_hostname_17_0=RULE_STRING
					{
						newLeafNode(lv_hostname_17_0, grammarAccess.getRunOptionAccess().getHostnameSTRINGTerminalRuleCall_8_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRunOptionRule());
						}
						setWithLastConsumed(
							$current,
							"hostname",
							lv_hostname_17_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_condition_18_0='environment'
					{
						newLeafNode(lv_condition_18_0, grammarAccess.getRunOptionAccess().getConditionEnvironmentKeyword_9_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRunOptionRule());
						}
						setWithLastConsumed($current, "condition", lv_condition_18_0, "environment");
					}
				)
			)
			(
				(
					lv_environmentVariable_19_0=RULE_STRING
					{
						newLeafNode(lv_environmentVariable_19_0, grammarAccess.getRunOptionAccess().getEnvironmentVariableSTRINGTerminalRuleCall_9_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRunOptionRule());
						}
						setWithLastConsumed(
							$current,
							"environmentVariable",
							lv_environmentVariable_19_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
			otherlv_20='='
			{
				newLeafNode(otherlv_20, grammarAccess.getRunOptionAccess().getEqualsSignKeyword_9_2());
			}
			(
				(
					lv_setEnvironmentVariable_21_0=RULE_STRING
					{
						newLeafNode(lv_setEnvironmentVariable_21_0, grammarAccess.getRunOptionAccess().getSetEnvironmentVariableSTRINGTerminalRuleCall_9_3_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRunOptionRule());
						}
						setWithLastConsumed(
							$current,
							"setEnvironmentVariable",
							lv_setEnvironmentVariable_21_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_condition_22_0='network'
					{
						newLeafNode(lv_condition_22_0, grammarAccess.getRunOptionAccess().getConditionNetworkKeyword_10_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRunOptionRule());
						}
						setWithLastConsumed($current, "condition", lv_condition_22_0, "network");
					}
				)
			)
			(
				(
					lv_connectType_23_0=RULE_STRING
					{
						newLeafNode(lv_connectType_23_0, grammarAccess.getRunOptionAccess().getConnectTypeSTRINGTerminalRuleCall_10_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRunOptionRule());
						}
						setWithLastConsumed(
							$current,
							"connectType",
							lv_connectType_23_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_condition_24_0='name'
					{
						newLeafNode(lv_condition_24_0, grammarAccess.getRunOptionAccess().getConditionNameKeyword_11_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRunOptionRule());
						}
						setWithLastConsumed($current, "condition", lv_condition_24_0, "name");
					}
				)
			)
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRunOptionRule());
						}
					}
					otherlv_25=RULE_ID
					{
						newLeafNode(otherlv_25, grammarAccess.getRunOptionAccess().getContainerNameContainerNameDeclarationCrossReference_11_1_0());
					}
				)
			)
		)
	)
;

// Entry rule entryRuleContainerNameDeclaration
entryRuleContainerNameDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContainerNameDeclarationRule()); }
	iv_ruleContainerNameDeclaration=ruleContainerNameDeclaration
	{ $current=$iv_ruleContainerNameDeclaration.current; }
	EOF;

// Rule ContainerNameDeclaration
ruleContainerNameDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='var'
		{
			newLeafNode(otherlv_0, grammarAccess.getContainerNameDeclarationAccess().getVarKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getContainerNameDeclarationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getContainerNameDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Rule RemoveImageOptions
ruleRemoveImageOptions returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='force'
			{
				$current = grammarAccess.getRemoveImageOptionsAccess().getForceEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getRemoveImageOptionsAccess().getForceEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='no_remove_process_image'
			{
				$current = grammarAccess.getRemoveImageOptionsAccess().getNo_remove_process_imageEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getRemoveImageOptionsAccess().getNo_remove_process_imageEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule LinkOption
ruleLinkOption returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='no_maintain_link'
			{
				$current = grammarAccess.getLinkOptionAccess().getNo_maintain_linkEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getLinkOptionAccess().getNo_maintain_linkEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='maintain_link'
			{
				$current = grammarAccess.getLinkOptionAccess().getMaintain_linkEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getLinkOptionAccess().getMaintain_linkEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule AttachOption
ruleAttachOption returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='detach_keys'
			{
				$current = grammarAccess.getAttachOptionAccess().getDetach_keysEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getAttachOptionAccess().getDetach_keysEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='no_stdin'
			{
				$current = grammarAccess.getAttachOptionAccess().getNo_stdinEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getAttachOptionAccess().getNo_stdinEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='sig_proxy_true'
			{
				$current = grammarAccess.getAttachOptionAccess().getSig_proxy_trueEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getAttachOptionAccess().getSig_proxy_trueEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='sig_proxy_false'
			{
				$current = grammarAccess.getAttachOptionAccess().getSig_proxy_falseEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getAttachOptionAccess().getSig_proxy_falseEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule ExecOption
ruleExecOption returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='backstage'
			{
				$current = grammarAccess.getExecOptionAccess().getBackstageEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getExecOptionAccess().getBackstageEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='open_STDIN'
			{
				$current = grammarAccess.getExecOptionAccess().getOpen_STDINEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getExecOptionAccess().getOpen_STDINEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='terminate'
			{
				$current = grammarAccess.getExecOptionAccess().getTerminateEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getExecOptionAccess().getTerminateEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule KillOption
ruleKillOption returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='kill'
			{
				$current = grammarAccess.getKillOptionAccess().getKillEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getKillOptionAccess().getKillEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='kill_sign'
			{
				$current = grammarAccess.getKillOptionAccess().getKill_signEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getKillOptionAccess().getKill_signEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule RmOptions
ruleRmOptions returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='no_option'
			{
				$current = grammarAccess.getRmOptionsAccess().getNo_optionEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getRmOptionsAccess().getNo_optionEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='force'
			{
				$current = grammarAccess.getRmOptionsAccess().getForceEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getRmOptionsAccess().getForceEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='delete_link'
			{
				$current = grammarAccess.getRmOptionsAccess().getDelete_linkEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getRmOptionsAccess().getDelete_linkEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='delete_volume'
			{
				$current = grammarAccess.getRmOptionsAccess().getDelete_volumeEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getRmOptionsAccess().getDelete_volumeEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule RunorCreate
ruleRunorCreate returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='run'
			{
				$current = grammarAccess.getRunorCreateAccess().getRunEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getRunorCreateAccess().getRunEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='create'
			{
				$current = grammarAccess.getRunorCreateAccess().getCreateEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getRunorCreateAccess().getCreateEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule Image
ruleImage returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Ubuntu'
			{
				$current = grammarAccess.getImageAccess().getUbuntuEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getImageAccess().getUbuntuEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='Centos'
			{
				$current = grammarAccess.getImageAccess().getCentosEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getImageAccess().getCentosEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='Nginx'
			{
				$current = grammarAccess.getImageAccess().getNginxEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getImageAccess().getNginxEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='PHP'
			{
				$current = grammarAccess.getImageAccess().getPHPEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getImageAccess().getPHPEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='Apache'
			{
				$current = grammarAccess.getImageAccess().getApacheEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getImageAccess().getApacheEnumLiteralDeclaration_4());
			}
		)
	)
;

// Rule OutType
ruleOutType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='IN'
			{
				$current = grammarAccess.getOutTypeAccess().getINEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getOutTypeAccess().getINEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='OUT'
			{
				$current = grammarAccess.getOutTypeAccess().getOUTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getOutTypeAccess().getOUTEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='ERR'
			{
				$current = grammarAccess.getOutTypeAccess().getERREnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getOutTypeAccess().getERREnumLiteralDeclaration_2());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
