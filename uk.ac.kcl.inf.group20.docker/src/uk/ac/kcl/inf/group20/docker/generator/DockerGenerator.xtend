/*
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.inf.group20.docker.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import uk.ac.kcl.inf.group20.docker.docker.Model
import uk.ac.kcl.inf.group20.docker.docker.ExecStatement
import uk.ac.kcl.inf.group20.docker.docker.UnpauseStatement
import uk.ac.kcl.inf.group20.docker.docker.Statements
import uk.ac.kcl.inf.group20.docker.docker.PauseStatement
import uk.ac.kcl.inf.group20.docker.docker.RunCreateStatement
import uk.ac.kcl.inf.group20.docker.docker.ContainerNameDeclaration
import uk.ac.kcl.inf.group20.docker.docker.StartStatement
import uk.ac.kcl.inf.group20.docker.services.DockerGrammarAccess.StopStatementElements
import uk.ac.kcl.inf.group20.docker.docker.StopStatement
import uk.ac.kcl.inf.group20.docker.docker.RestartStatement
import uk.ac.kcl.inf.group20.docker.docker.KillStatement
import uk.ac.kcl.inf.group20.docker.docker.RemoveStatement
import uk.ac.kcl.inf.group20.docker.docker.PsStatement
import uk.ac.kcl.inf.group20.docker.docker.PsOptions
import org.eclipse.emf.common.util.EList
import uk.ac.kcl.inf.group20.docker.docker.InspectStatement
import uk.ac.kcl.inf.group20.docker.docker.AttachStatement
import uk.ac.kcl.inf.group20.docker.docker.EventStatement
import uk.ac.kcl.inf.group20.docker.docker.LogsStatement
import uk.ac.kcl.inf.group20.docker.docker.WaitStatement
import uk.ac.kcl.inf.group20.docker.docker.ExportStatement
import uk.ac.kcl.inf.group20.docker.docker.CommitStatement
import uk.ac.kcl.inf.group20.docker.docker.CpStatement
import uk.ac.kcl.inf.group20.docker.docker.DiffStatement
import uk.ac.kcl.inf.group20.docker.docker.ImageStatement
import uk.ac.kcl.inf.group20.docker.docker.RemoveImageStatement
import uk.ac.kcl.inf.group20.docker.docker.PortStatement

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class DockerGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val model = resource.contents.head as Model
		val dockerName = resource.deriveDockerName
		fsa.generateFile(dockerName + '.txt', model.generate)
	}
		
	def deriveDockerName(Resource resource){
		val origFileName = resource.URI.lastSegment
		origFileName.substring(0, origFileName.indexOf('.')).toFirstUpper + 'Docker'
	}
		
	def deriveTargetFileNameFor(Model model, Resource resource) {
		resource.URI.appendFileExtension('txt').lastSegment
	}
	
	def generate(Model model) '''«model.statements.map[generateDockerStatement].join('\n')»'''	
	
	dispatch def generateDockerStatement(Statements stmt) ''''''
	
	dispatch def generateDockerStatement(RunCreateStatement stmt)'''docker «stmt.order.getName» «
	if (!stmt.runOptions.empty) '''«
		FOR idx: (0..stmt.runOptions.size-1)»«
			if (stmt.runOptions.get(idx).condition.equals("standard")) '''-a «
				if(stmt.runOptions.get(idx).outType.value===0) '''stdin'''
				else if(stmt.runOptions.get(idx).outType.value===1) '''stdout'''
				else if(stmt.runOptions.get(idx).outType.value===2) '''stderr'''
			»''' 
			else if (stmt.runOptions.get(idx).condition.equals("backstage")) '''-d'''
			else if (stmt.runOptions.get(idx).condition.equals("interface")) '''-i'''
			else if (stmt.runOptions.get(idx).condition.equals("random_port")) '''-P'''
			else if (stmt.runOptions.get(idx).condition.equals("specify_port")) '''-p «stmt.runOptions.get(idx).portName»'''
			else if (stmt.runOptions.get(idx).condition.equals("terminate")) '''-t'''
			else if (stmt.runOptions.get(idx).condition.equals("DNS")) '''--dns «stmt.runOptions.get(idx).server»'''
			else if (stmt.runOptions.get(idx).condition.equals("search_DNS")) '''--dns-search «stmt.runOptions.get(idx).domainName»'''
			else if (stmt.runOptions.get(idx).condition.equals("hostname")) '''-h "«stmt.runOptions.get(idx).hostname»"'''
			else if (stmt.runOptions.get(idx).condition.equals("environment")) '''-e «stmt.runOptions.get(idx).environmentVariable»=«stmt.runOptions.get(idx).setEnvironmentVariable»'''
			else if (stmt.runOptions.get(idx).condition.equals("network")) '''--net=«stmt.runOptions.get(idx).connectType»'''
			else if (stmt.runOptions.get(idx).condition.equals("name")) '''--name «stmt.runOptions.get(idx).containerName.name»'''» «
		ENDFOR»'''
	»«stmt.image.getName» «stmt.commands»'''
	
	dispatch def generateDockerStatement(ContainerNameDeclaration stmt)''''''
	
	dispatch def generateDockerStatement(StartStatement stmt)'''docker start «stmt.containerName.name»'''
	
	dispatch def generateDockerStatement(StopStatement stmt)'''docker stop «stmt.containerName.name»'''
	
	dispatch def generateDockerStatement(RestartStatement stmt)'''docker restart «stmt.containerName.name»'''
	
	dispatch def generateDockerStatement(KillStatement stmt)'''docker kill «if (stmt.kill.value === 1) '''-s '''»«stmt.containerName.name»'''
	
	dispatch def generateDockerStatement(RemoveStatement stmt)'''docker rm«if (stmt.rmOptions.value===1) ''' -f''' else if (stmt.rmOptions.value===2) ''' -l''' else if (stmt.rmOptions.value===3) ''' -v'''» «stmt.containerName.name»'''
	
	dispatch def generateDockerStatement(PauseStatement stmt)'''docker pause «stmt.containerName.name»'''
	
	dispatch def generateDockerStatement(UnpauseStatement stmt)'''docker unpause «stmt.containerName.name»'''
	
	dispatch def generateDockerStatement(ExecStatement stmt)'''docker exec «
		if (!stmt.execOptions.empty)'''«
			FOR idx: (0..stmt.execOptions.size-1)»«
				if (stmt.execOptions.get(idx).value===0)'''-d'''
				else if (stmt.execOptions.get(idx).value===1)'''-i'''
				else if (stmt.execOptions.get(idx).value===2)'''-t'''» «
			ENDFOR»'''
		»«stmt.containerName.name» «stmt.commands»'''

	dispatch def generateDockerStatement(PsStatement stmt)'''docker ps «
		if (!stmt.psOptions.empty)'''«
			FOR idx: (0..stmt.psOptions.size-1)»«
				if (stmt.psOptions.get(idx).option.equals("show_all_containers"))'''-a'''
				else if (stmt.psOptions.get(idx).option.equals("filter"))'''-f «stmt.psOptions.get(idx).commands»'''
				else if (stmt.psOptions.get(idx).option.equals("format"))'''--format «stmt.psOptions.get(idx).formats»'''
				else if (stmt.psOptions.get(idx).option.equals("show_last_container"))'''-l'''
				else if (stmt.psOptions.get(idx).option.equals("list_last_n_containers"))'''-n «stmt.psOptions.get(idx).n»'''
				else if (stmt.psOptions.get(idx).option.equals("complete"))'''--no-trunc'''
				else if (stmt.psOptions.get(idx).option.equals("only_show_id"))'''-q'''
				else if (stmt.psOptions.get(idx).option.equals("show_size"))'''-s'''» «
			ENDFOR»'''»'''
	
	dispatch def generateDockerStatement(InspectStatement stmt) '''docker inspect «
		if (!stmt.inspectOptions.empty)'''«
			FOR idx: (0..stmt.inspectOptions.size-1)»«
				if (stmt.inspectOptions.get(idx).option.equals("format"))'''-f «stmt.inspectOptions.get(idx).formats»'''
				else if (stmt.inspectOptions.get(idx).option.equals("show_size"))'''-s'''
				else if (stmt.inspectOptions.get(idx).option.equals("type"))'''--type «stmt.inspectOptions.get(idx).types»'''
			» «
			ENDFOR»'''»'''
	
	dispatch def generateDockerStatement(AttachStatement stmt) '''docker attach «if (stmt.attachOption.value === 0) '''--detach-keys''' else if (stmt.attachOption.value === 1) '''--no-stdin''' else if (stmt.attachOption.value === 2) '''--sig-proxy=true''' else if (stmt.attachOption.value === 3) '''--sig-proxy=false'''» «stmt.containerName.name»'''
	
	dispatch def generateDockerStatement(EventStatement stmt) '''docker events «
		if (!stmt.eventOptions.empty)'''«
			FOR idx: (0..stmt.eventOptions.size-1)»«
				if (stmt.eventOptions.get(idx).option.equals("filter"))'''-f «stmt.eventOptions.get(idx).commands»'''
				else if (stmt.eventOptions.get(idx).option.equals("since"))'''--since «stmt.eventOptions.get(idx).timeS»'''
				else if (stmt.eventOptions.get(idx).option.equals("until"))'''--until «stmt.eventOptions.get(idx).timeU»'''
				» «
			ENDFOR»'''»'''
	
	dispatch def generateDockerStatement(LogsStatement stmt)'''docker logs «
			if (!stmt.logOptions.empty)'''«
				FOR idx: (0..stmt.logOptions.size-1)»«
					if (stmt.logOptions.get(idx).option.equals("track_output"))'''-f'''
					else if (stmt.logOptions.get(idx).option.equals("since"))'''--since «stmt.logOptions.get(idx).time»'''
					else if (stmt.logOptions.get(idx).option.equals("show_timestamp"))'''--t'''
					else if (stmt.logOptions.get(idx).option.equals("show_tail_n_logs"))'''--tail «stmt.logOptions.get(idx).number»'''
					» «
				ENDFOR»'''»«stmt.containerName.name»'''
	
	dispatch def generateDockerStatement(WaitStatement stmt)'''docker wait «stmt.containerName.name»'''
	
	dispatch def generateDockerStatement(ExportStatement stmt)'''docker export --output=«stmt.file_path» «stmt.containerName.name»'''
	
	dispatch def generateDockerStatement(PortStatement stmt)'''docker port «stmt.containerName.name» «stmt.private_port»'''
	
	dispatch def generateDockerStatement(CommitStatement stmt)'''docker commit «
				if (!stmt.commitOptions.empty)'''«
					FOR idx: (0..stmt.commitOptions.size-1)»«
						if (stmt.commitOptions.get(idx).option.equals("author"))'''-a «stmt.commitOptions.get(idx).author»'''
						else if (stmt.commitOptions.get(idx).option.equals("create"))'''-c'''
						else if (stmt.commitOptions.get(idx).option.equals("commit_description"))'''-m «stmt.commitOptions.get(idx).description»'''
						else if (stmt.commitOptions.get(idx).option.equals("pause_when_commit"))'''-p'''
						» «
					ENDFOR»'''»«stmt.containerName.name» «stmt.repository»'''
	
	dispatch def generateDockerStatement(CpStatement stmt)'''docker cp «if (stmt.link.value === 1) '''-l '''»«stmt.source.option1»«if (stmt.source.option1.isNullOrEmpty)'''«stmt.source.option2.name»'''» «stmt.destination»'''
	
	dispatch def generateDockerStatement(DiffStatement stmt)'''docker diff «stmt.containerName.name»'''
	
	dispatch def generateDockerStatement(ImageStatement stmt)'''docker images «
					if (!stmt.imageOptions.empty)'''«
						FOR idx: (0..stmt.imageOptions.size-1)»«
							if (stmt.imageOptions.get(idx).option.equals("show_all"))'''-a'''
							else if (stmt.imageOptions.get(idx).option.equals("show_digests"))'''--digests'''
							else if (stmt.imageOptions.get(idx).option.equals("filter"))'''-f «stmt.imageOptions.get(idx).condition»'''
							else if (stmt.imageOptions.get(idx).option.equals("format"))'''--format «stmt.imageOptions.get(idx).formats»'''
							else if (stmt.imageOptions.get(idx).option.equals("complete"))'''--no-trunc'''
							else if (stmt.imageOptions.get(idx).option.equals("show_ID"))'''-q'''
							» «
						ENDFOR»'''»«stmt.repository»'''
	
	dispatch def generateDockerStatement(RemoveImageStatement stmt)'''docker rmi «
						if (!stmt.removeimageOptions.empty)'''«
							FOR idx: (0..stmt.removeimageOptions.size-1)»«
								if (stmt.removeimageOptions.get(idx).value === 0)'''-f'''
								else if (stmt.removeimageOptions.get(idx).value === 1)'''--no-prune'''
								» «
							ENDFOR»'''»«stmt.image»'''	
}
