/**
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.inf.group20.docker.generator;

import java.util.Arrays;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IntegerRange;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import uk.ac.kcl.inf.group20.docker.docker.AttachStatement;
import uk.ac.kcl.inf.group20.docker.docker.CommitStatement;
import uk.ac.kcl.inf.group20.docker.docker.ContainerNameDeclaration;
import uk.ac.kcl.inf.group20.docker.docker.CpStatement;
import uk.ac.kcl.inf.group20.docker.docker.DiffStatement;
import uk.ac.kcl.inf.group20.docker.docker.EventStatement;
import uk.ac.kcl.inf.group20.docker.docker.ExecStatement;
import uk.ac.kcl.inf.group20.docker.docker.ExportStatement;
import uk.ac.kcl.inf.group20.docker.docker.ImageStatement;
import uk.ac.kcl.inf.group20.docker.docker.InspectStatement;
import uk.ac.kcl.inf.group20.docker.docker.KillStatement;
import uk.ac.kcl.inf.group20.docker.docker.LogsStatement;
import uk.ac.kcl.inf.group20.docker.docker.Model;
import uk.ac.kcl.inf.group20.docker.docker.PauseStatement;
import uk.ac.kcl.inf.group20.docker.docker.PortStatement;
import uk.ac.kcl.inf.group20.docker.docker.PsStatement;
import uk.ac.kcl.inf.group20.docker.docker.RemoveImageStatement;
import uk.ac.kcl.inf.group20.docker.docker.RemoveStatement;
import uk.ac.kcl.inf.group20.docker.docker.RestartStatement;
import uk.ac.kcl.inf.group20.docker.docker.RunCreateStatement;
import uk.ac.kcl.inf.group20.docker.docker.StartStatement;
import uk.ac.kcl.inf.group20.docker.docker.Statements;
import uk.ac.kcl.inf.group20.docker.docker.StopStatement;
import uk.ac.kcl.inf.group20.docker.docker.UnpauseStatement;
import uk.ac.kcl.inf.group20.docker.docker.WaitStatement;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class DockerGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IterableExtensions.<EObject>head(resource.getContents());
    final Model model = ((Model) _head);
    final String dockerName = this.deriveDockerName(resource);
    fsa.generateFile((dockerName + ".txt"), this.generate(model));
  }
  
  public String deriveDockerName(final Resource resource) {
    String _xblockexpression = null;
    {
      final String origFileName = resource.getURI().lastSegment();
      String _firstUpper = StringExtensions.toFirstUpper(origFileName.substring(0, origFileName.indexOf(".")));
      _xblockexpression = (_firstUpper + "Docker");
    }
    return _xblockexpression;
  }
  
  public String deriveTargetFileNameFor(final Model model, final Resource resource) {
    return resource.getURI().appendFileExtension("txt").lastSegment();
  }
  
  public CharSequence generate(final Model model) {
    StringConcatenation _builder = new StringConcatenation();
    final Function1<Statements, CharSequence> _function = (Statements it) -> {
      return this.generateDockerStatement(it);
    };
    String _join = IterableExtensions.join(ListExtensions.<Statements, CharSequence>map(model.getStatements(), _function), "\n");
    _builder.append(_join);
    return _builder;
  }
  
  protected CharSequence _generateDockerStatement(final Statements stmt) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder;
  }
  
  protected CharSequence _generateDockerStatement(final RunCreateStatement stmt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("docker ");
    String _name = stmt.getOrder().getName();
    _builder.append(_name);
    _builder.append(" ");
    CharSequence _xifexpression = null;
    boolean _isEmpty = stmt.getRunOptions().isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      StringConcatenation _builder_1 = new StringConcatenation();
      {
        int _size = stmt.getRunOptions().size();
        int _minus = (_size - 1);
        IntegerRange _upTo = new IntegerRange(0, _minus);
        for(final Integer idx : _upTo) {
          CharSequence _xifexpression_1 = null;
          boolean _equals = stmt.getRunOptions().get((idx).intValue()).getCondition().equals("standard");
          if (_equals) {
            StringConcatenation _builder_2 = new StringConcatenation();
            _builder_2.append("-a ");
            CharSequence _xifexpression_2 = null;
            int _value = stmt.getRunOptions().get((idx).intValue()).getOutType().getValue();
            boolean _tripleEquals = (_value == 0);
            if (_tripleEquals) {
              StringConcatenation _builder_3 = new StringConcatenation();
              _builder_3.append("stdin");
              _xifexpression_2 = _builder_3;
            } else {
              CharSequence _xifexpression_3 = null;
              int _value_1 = stmt.getRunOptions().get((idx).intValue()).getOutType().getValue();
              boolean _tripleEquals_1 = (_value_1 == 1);
              if (_tripleEquals_1) {
                StringConcatenation _builder_4 = new StringConcatenation();
                _builder_4.append("stdout");
                _xifexpression_3 = _builder_4;
              } else {
                CharSequence _xifexpression_4 = null;
                int _value_2 = stmt.getRunOptions().get((idx).intValue()).getOutType().getValue();
                boolean _tripleEquals_2 = (_value_2 == 2);
                if (_tripleEquals_2) {
                  StringConcatenation _builder_5 = new StringConcatenation();
                  _builder_5.append("stderr");
                  _xifexpression_4 = _builder_5;
                }
                _xifexpression_3 = _xifexpression_4;
              }
              _xifexpression_2 = _xifexpression_3;
            }
            _builder_2.append(_xifexpression_2);
            _xifexpression_1 = _builder_2;
          } else {
            CharSequence _xifexpression_5 = null;
            boolean _equals_1 = stmt.getRunOptions().get((idx).intValue()).getCondition().equals("backstage");
            if (_equals_1) {
              StringConcatenation _builder_6 = new StringConcatenation();
              _builder_6.append("-d");
              _xifexpression_5 = _builder_6;
            } else {
              CharSequence _xifexpression_6 = null;
              boolean _equals_2 = stmt.getRunOptions().get((idx).intValue()).getCondition().equals("interface");
              if (_equals_2) {
                StringConcatenation _builder_7 = new StringConcatenation();
                _builder_7.append("-i");
                _xifexpression_6 = _builder_7;
              } else {
                CharSequence _xifexpression_7 = null;
                boolean _equals_3 = stmt.getRunOptions().get((idx).intValue()).getCondition().equals("random_port");
                if (_equals_3) {
                  StringConcatenation _builder_8 = new StringConcatenation();
                  _builder_8.append("-P");
                  _xifexpression_7 = _builder_8;
                } else {
                  CharSequence _xifexpression_8 = null;
                  boolean _equals_4 = stmt.getRunOptions().get((idx).intValue()).getCondition().equals("specify_port");
                  if (_equals_4) {
                    StringConcatenation _builder_9 = new StringConcatenation();
                    _builder_9.append("-p ");
                    String _portName = stmt.getRunOptions().get((idx).intValue()).getPortName();
                    _builder_9.append(_portName);
                    _xifexpression_8 = _builder_9;
                  } else {
                    CharSequence _xifexpression_9 = null;
                    boolean _equals_5 = stmt.getRunOptions().get((idx).intValue()).getCondition().equals("terminate");
                    if (_equals_5) {
                      StringConcatenation _builder_10 = new StringConcatenation();
                      _builder_10.append("-t");
                      _xifexpression_9 = _builder_10;
                    } else {
                      CharSequence _xifexpression_10 = null;
                      boolean _equals_6 = stmt.getRunOptions().get((idx).intValue()).getCondition().equals("DNS");
                      if (_equals_6) {
                        StringConcatenation _builder_11 = new StringConcatenation();
                        _builder_11.append("--dns ");
                        String _server = stmt.getRunOptions().get((idx).intValue()).getServer();
                        _builder_11.append(_server);
                        _xifexpression_10 = _builder_11;
                      } else {
                        CharSequence _xifexpression_11 = null;
                        boolean _equals_7 = stmt.getRunOptions().get((idx).intValue()).getCondition().equals("search_DNS");
                        if (_equals_7) {
                          StringConcatenation _builder_12 = new StringConcatenation();
                          _builder_12.append("--dns-search ");
                          String _domainName = stmt.getRunOptions().get((idx).intValue()).getDomainName();
                          _builder_12.append(_domainName);
                          _xifexpression_11 = _builder_12;
                        } else {
                          CharSequence _xifexpression_12 = null;
                          boolean _equals_8 = stmt.getRunOptions().get((idx).intValue()).getCondition().equals("hostname");
                          if (_equals_8) {
                            StringConcatenation _builder_13 = new StringConcatenation();
                            _builder_13.append("-h \"");
                            String _hostname = stmt.getRunOptions().get((idx).intValue()).getHostname();
                            _builder_13.append(_hostname);
                            _builder_13.append("\"");
                            _xifexpression_12 = _builder_13;
                          } else {
                            CharSequence _xifexpression_13 = null;
                            boolean _equals_9 = stmt.getRunOptions().get((idx).intValue()).getCondition().equals("environment");
                            if (_equals_9) {
                              StringConcatenation _builder_14 = new StringConcatenation();
                              _builder_14.append("-e ");
                              String _environmentVariable = stmt.getRunOptions().get((idx).intValue()).getEnvironmentVariable();
                              _builder_14.append(_environmentVariable);
                              _builder_14.append("=");
                              String _setEnvironmentVariable = stmt.getRunOptions().get((idx).intValue()).getSetEnvironmentVariable();
                              _builder_14.append(_setEnvironmentVariable);
                              _xifexpression_13 = _builder_14;
                            } else {
                              CharSequence _xifexpression_14 = null;
                              boolean _equals_10 = stmt.getRunOptions().get((idx).intValue()).getCondition().equals("network");
                              if (_equals_10) {
                                StringConcatenation _builder_15 = new StringConcatenation();
                                _builder_15.append("--net=");
                                String _connectType = stmt.getRunOptions().get((idx).intValue()).getConnectType();
                                _builder_15.append(_connectType);
                                _xifexpression_14 = _builder_15;
                              } else {
                                CharSequence _xifexpression_15 = null;
                                boolean _equals_11 = stmt.getRunOptions().get((idx).intValue()).getCondition().equals("name");
                                if (_equals_11) {
                                  StringConcatenation _builder_16 = new StringConcatenation();
                                  _builder_16.append("--name ");
                                  String _name_1 = stmt.getRunOptions().get((idx).intValue()).getContainerName().getName();
                                  _builder_16.append(_name_1);
                                  _xifexpression_15 = _builder_16;
                                }
                                _xifexpression_14 = _xifexpression_15;
                              }
                              _xifexpression_13 = _xifexpression_14;
                            }
                            _xifexpression_12 = _xifexpression_13;
                          }
                          _xifexpression_11 = _xifexpression_12;
                        }
                        _xifexpression_10 = _xifexpression_11;
                      }
                      _xifexpression_9 = _xifexpression_10;
                    }
                    _xifexpression_8 = _xifexpression_9;
                  }
                  _xifexpression_7 = _xifexpression_8;
                }
                _xifexpression_6 = _xifexpression_7;
              }
              _xifexpression_5 = _xifexpression_6;
            }
            _xifexpression_1 = _xifexpression_5;
          }
          _builder_1.append(_xifexpression_1);
          _builder_1.append(" ");
        }
      }
      _xifexpression = _builder_1;
    }
    _builder.append(_xifexpression);
    String _name_2 = stmt.getImage().getName();
    _builder.append(_name_2);
    _builder.append(" ");
    String _commands = stmt.getCommands();
    _builder.append(_commands);
    return _builder;
  }
  
  protected CharSequence _generateDockerStatement(final ContainerNameDeclaration stmt) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder;
  }
  
  protected CharSequence _generateDockerStatement(final StartStatement stmt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("docker start ");
    String _name = stmt.getContainerName().getName();
    _builder.append(_name);
    return _builder;
  }
  
  protected CharSequence _generateDockerStatement(final StopStatement stmt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("docker stop ");
    String _name = stmt.getContainerName().getName();
    _builder.append(_name);
    return _builder;
  }
  
  protected CharSequence _generateDockerStatement(final RestartStatement stmt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("docker restart ");
    String _name = stmt.getContainerName().getName();
    _builder.append(_name);
    return _builder;
  }
  
  protected CharSequence _generateDockerStatement(final KillStatement stmt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("docker kill ");
    CharSequence _xifexpression = null;
    int _value = stmt.getKill().getValue();
    boolean _tripleEquals = (_value == 1);
    if (_tripleEquals) {
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("-s ");
      _xifexpression = _builder_1;
    }
    _builder.append(_xifexpression);
    String _name = stmt.getContainerName().getName();
    _builder.append(_name);
    return _builder;
  }
  
  protected CharSequence _generateDockerStatement(final RemoveStatement stmt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("docker rm");
    CharSequence _xifexpression = null;
    int _value = stmt.getRmOptions().getValue();
    boolean _tripleEquals = (_value == 1);
    if (_tripleEquals) {
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append(" ");
      _builder_1.append("-f");
      _xifexpression = _builder_1;
    } else {
      CharSequence _xifexpression_1 = null;
      int _value_1 = stmt.getRmOptions().getValue();
      boolean _tripleEquals_1 = (_value_1 == 2);
      if (_tripleEquals_1) {
        StringConcatenation _builder_2 = new StringConcatenation();
        _builder_2.append(" ");
        _builder_2.append("-l");
        _xifexpression_1 = _builder_2;
      } else {
        CharSequence _xifexpression_2 = null;
        int _value_2 = stmt.getRmOptions().getValue();
        boolean _tripleEquals_2 = (_value_2 == 3);
        if (_tripleEquals_2) {
          StringConcatenation _builder_3 = new StringConcatenation();
          _builder_3.append(" ");
          _builder_3.append("-v");
          _xifexpression_2 = _builder_3;
        }
        _xifexpression_1 = _xifexpression_2;
      }
      _xifexpression = _xifexpression_1;
    }
    _builder.append(_xifexpression);
    _builder.append(" ");
    String _name = stmt.getContainerName().getName();
    _builder.append(_name);
    return _builder;
  }
  
  protected CharSequence _generateDockerStatement(final PauseStatement stmt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("docker pause ");
    String _name = stmt.getContainerName().getName();
    _builder.append(_name);
    return _builder;
  }
  
  protected CharSequence _generateDockerStatement(final UnpauseStatement stmt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("docker unpause ");
    String _name = stmt.getContainerName().getName();
    _builder.append(_name);
    return _builder;
  }
  
  protected CharSequence _generateDockerStatement(final ExecStatement stmt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("docker exec ");
    CharSequence _xifexpression = null;
    boolean _isEmpty = stmt.getExecOptions().isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      StringConcatenation _builder_1 = new StringConcatenation();
      {
        int _size = stmt.getExecOptions().size();
        int _minus = (_size - 1);
        IntegerRange _upTo = new IntegerRange(0, _minus);
        for(final Integer idx : _upTo) {
          CharSequence _xifexpression_1 = null;
          int _value = stmt.getExecOptions().get((idx).intValue()).getValue();
          boolean _tripleEquals = (_value == 0);
          if (_tripleEquals) {
            StringConcatenation _builder_2 = new StringConcatenation();
            _builder_2.append("-d");
            _xifexpression_1 = _builder_2;
          } else {
            CharSequence _xifexpression_2 = null;
            int _value_1 = stmt.getExecOptions().get((idx).intValue()).getValue();
            boolean _tripleEquals_1 = (_value_1 == 1);
            if (_tripleEquals_1) {
              StringConcatenation _builder_3 = new StringConcatenation();
              _builder_3.append("-i");
              _xifexpression_2 = _builder_3;
            } else {
              CharSequence _xifexpression_3 = null;
              int _value_2 = stmt.getExecOptions().get((idx).intValue()).getValue();
              boolean _tripleEquals_2 = (_value_2 == 2);
              if (_tripleEquals_2) {
                StringConcatenation _builder_4 = new StringConcatenation();
                _builder_4.append("-t");
                _xifexpression_3 = _builder_4;
              }
              _xifexpression_2 = _xifexpression_3;
            }
            _xifexpression_1 = _xifexpression_2;
          }
          _builder_1.append(_xifexpression_1);
          _builder_1.append(" ");
        }
      }
      _xifexpression = _builder_1;
    }
    _builder.append(_xifexpression);
    String _name = stmt.getContainerName().getName();
    _builder.append(_name);
    _builder.append(" ");
    String _commands = stmt.getCommands();
    _builder.append(_commands);
    return _builder;
  }
  
  protected CharSequence _generateDockerStatement(final PsStatement stmt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("docker ps ");
    CharSequence _xifexpression = null;
    boolean _isEmpty = stmt.getPsOptions().isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      StringConcatenation _builder_1 = new StringConcatenation();
      {
        int _size = stmt.getPsOptions().size();
        int _minus = (_size - 1);
        IntegerRange _upTo = new IntegerRange(0, _minus);
        for(final Integer idx : _upTo) {
          CharSequence _xifexpression_1 = null;
          boolean _equals = stmt.getPsOptions().get((idx).intValue()).getOption().equals("show_all_containers");
          if (_equals) {
            StringConcatenation _builder_2 = new StringConcatenation();
            _builder_2.append("-a");
            _xifexpression_1 = _builder_2;
          } else {
            CharSequence _xifexpression_2 = null;
            boolean _equals_1 = stmt.getPsOptions().get((idx).intValue()).getOption().equals("filter");
            if (_equals_1) {
              StringConcatenation _builder_3 = new StringConcatenation();
              _builder_3.append("-f ");
              String _commands = stmt.getPsOptions().get((idx).intValue()).getCommands();
              _builder_3.append(_commands);
              _xifexpression_2 = _builder_3;
            } else {
              CharSequence _xifexpression_3 = null;
              boolean _equals_2 = stmt.getPsOptions().get((idx).intValue()).getOption().equals("format");
              if (_equals_2) {
                StringConcatenation _builder_4 = new StringConcatenation();
                _builder_4.append("--format ");
                String _formats = stmt.getPsOptions().get((idx).intValue()).getFormats();
                _builder_4.append(_formats);
                _xifexpression_3 = _builder_4;
              } else {
                CharSequence _xifexpression_4 = null;
                boolean _equals_3 = stmt.getPsOptions().get((idx).intValue()).getOption().equals("show_last_container");
                if (_equals_3) {
                  StringConcatenation _builder_5 = new StringConcatenation();
                  _builder_5.append("-l");
                  _xifexpression_4 = _builder_5;
                } else {
                  CharSequence _xifexpression_5 = null;
                  boolean _equals_4 = stmt.getPsOptions().get((idx).intValue()).getOption().equals("list_last_n_containers");
                  if (_equals_4) {
                    StringConcatenation _builder_6 = new StringConcatenation();
                    _builder_6.append("-n ");
                    int _n = stmt.getPsOptions().get((idx).intValue()).getN();
                    _builder_6.append(_n);
                    _xifexpression_5 = _builder_6;
                  } else {
                    CharSequence _xifexpression_6 = null;
                    boolean _equals_5 = stmt.getPsOptions().get((idx).intValue()).getOption().equals("complete");
                    if (_equals_5) {
                      StringConcatenation _builder_7 = new StringConcatenation();
                      _builder_7.append("--no-trunc");
                      _xifexpression_6 = _builder_7;
                    } else {
                      CharSequence _xifexpression_7 = null;
                      boolean _equals_6 = stmt.getPsOptions().get((idx).intValue()).getOption().equals("only_show_id");
                      if (_equals_6) {
                        StringConcatenation _builder_8 = new StringConcatenation();
                        _builder_8.append("-q");
                        _xifexpression_7 = _builder_8;
                      } else {
                        CharSequence _xifexpression_8 = null;
                        boolean _equals_7 = stmt.getPsOptions().get((idx).intValue()).getOption().equals("show_size");
                        if (_equals_7) {
                          StringConcatenation _builder_9 = new StringConcatenation();
                          _builder_9.append("-s");
                          _xifexpression_8 = _builder_9;
                        }
                        _xifexpression_7 = _xifexpression_8;
                      }
                      _xifexpression_6 = _xifexpression_7;
                    }
                    _xifexpression_5 = _xifexpression_6;
                  }
                  _xifexpression_4 = _xifexpression_5;
                }
                _xifexpression_3 = _xifexpression_4;
              }
              _xifexpression_2 = _xifexpression_3;
            }
            _xifexpression_1 = _xifexpression_2;
          }
          _builder_1.append(_xifexpression_1);
          _builder_1.append(" ");
        }
      }
      _xifexpression = _builder_1;
    }
    _builder.append(_xifexpression);
    return _builder;
  }
  
  protected CharSequence _generateDockerStatement(final InspectStatement stmt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("docker inspect ");
    CharSequence _xifexpression = null;
    boolean _isEmpty = stmt.getInspectOptions().isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      StringConcatenation _builder_1 = new StringConcatenation();
      {
        int _size = stmt.getInspectOptions().size();
        int _minus = (_size - 1);
        IntegerRange _upTo = new IntegerRange(0, _minus);
        for(final Integer idx : _upTo) {
          CharSequence _xifexpression_1 = null;
          boolean _equals = stmt.getInspectOptions().get((idx).intValue()).getOption().equals("format");
          if (_equals) {
            StringConcatenation _builder_2 = new StringConcatenation();
            _builder_2.append("-f ");
            String _formats = stmt.getInspectOptions().get((idx).intValue()).getFormats();
            _builder_2.append(_formats);
            _xifexpression_1 = _builder_2;
          } else {
            CharSequence _xifexpression_2 = null;
            boolean _equals_1 = stmt.getInspectOptions().get((idx).intValue()).getOption().equals("show_size");
            if (_equals_1) {
              StringConcatenation _builder_3 = new StringConcatenation();
              _builder_3.append("-s");
              _xifexpression_2 = _builder_3;
            } else {
              CharSequence _xifexpression_3 = null;
              boolean _equals_2 = stmt.getInspectOptions().get((idx).intValue()).getOption().equals("type");
              if (_equals_2) {
                StringConcatenation _builder_4 = new StringConcatenation();
                _builder_4.append("--type ");
                String _types = stmt.getInspectOptions().get((idx).intValue()).getTypes();
                _builder_4.append(_types);
                _xifexpression_3 = _builder_4;
              }
              _xifexpression_2 = _xifexpression_3;
            }
            _xifexpression_1 = _xifexpression_2;
          }
          _builder_1.append(_xifexpression_1);
          _builder_1.append(" ");
        }
      }
      _xifexpression = _builder_1;
    }
    _builder.append(_xifexpression);
    return _builder;
  }
  
  protected CharSequence _generateDockerStatement(final AttachStatement stmt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("docker attach ");
    CharSequence _xifexpression = null;
    int _value = stmt.getAttachOption().getValue();
    boolean _tripleEquals = (_value == 0);
    if (_tripleEquals) {
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("--detach-keys");
      _xifexpression = _builder_1;
    } else {
      CharSequence _xifexpression_1 = null;
      int _value_1 = stmt.getAttachOption().getValue();
      boolean _tripleEquals_1 = (_value_1 == 1);
      if (_tripleEquals_1) {
        StringConcatenation _builder_2 = new StringConcatenation();
        _builder_2.append("--no-stdin");
        _xifexpression_1 = _builder_2;
      } else {
        CharSequence _xifexpression_2 = null;
        int _value_2 = stmt.getAttachOption().getValue();
        boolean _tripleEquals_2 = (_value_2 == 2);
        if (_tripleEquals_2) {
          StringConcatenation _builder_3 = new StringConcatenation();
          _builder_3.append("--sig-proxy=true");
          _xifexpression_2 = _builder_3;
        } else {
          CharSequence _xifexpression_3 = null;
          int _value_3 = stmt.getAttachOption().getValue();
          boolean _tripleEquals_3 = (_value_3 == 3);
          if (_tripleEquals_3) {
            StringConcatenation _builder_4 = new StringConcatenation();
            _builder_4.append("--sig-proxy=false");
            _xifexpression_3 = _builder_4;
          }
          _xifexpression_2 = _xifexpression_3;
        }
        _xifexpression_1 = _xifexpression_2;
      }
      _xifexpression = _xifexpression_1;
    }
    _builder.append(_xifexpression);
    _builder.append(" ");
    String _name = stmt.getContainerName().getName();
    _builder.append(_name);
    return _builder;
  }
  
  protected CharSequence _generateDockerStatement(final EventStatement stmt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("docker events ");
    CharSequence _xifexpression = null;
    boolean _isEmpty = stmt.getEventOptions().isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      StringConcatenation _builder_1 = new StringConcatenation();
      {
        int _size = stmt.getEventOptions().size();
        int _minus = (_size - 1);
        IntegerRange _upTo = new IntegerRange(0, _minus);
        for(final Integer idx : _upTo) {
          CharSequence _xifexpression_1 = null;
          boolean _equals = stmt.getEventOptions().get((idx).intValue()).getOption().equals("filter");
          if (_equals) {
            StringConcatenation _builder_2 = new StringConcatenation();
            _builder_2.append("-f ");
            String _commands = stmt.getEventOptions().get((idx).intValue()).getCommands();
            _builder_2.append(_commands);
            _xifexpression_1 = _builder_2;
          } else {
            CharSequence _xifexpression_2 = null;
            boolean _equals_1 = stmt.getEventOptions().get((idx).intValue()).getOption().equals("since");
            if (_equals_1) {
              StringConcatenation _builder_3 = new StringConcatenation();
              _builder_3.append("--since ");
              String _timeS = stmt.getEventOptions().get((idx).intValue()).getTimeS();
              _builder_3.append(_timeS);
              _xifexpression_2 = _builder_3;
            } else {
              CharSequence _xifexpression_3 = null;
              boolean _equals_2 = stmt.getEventOptions().get((idx).intValue()).getOption().equals("until");
              if (_equals_2) {
                StringConcatenation _builder_4 = new StringConcatenation();
                _builder_4.append("--until ");
                String _timeU = stmt.getEventOptions().get((idx).intValue()).getTimeU();
                _builder_4.append(_timeU);
                _xifexpression_3 = _builder_4;
              }
              _xifexpression_2 = _xifexpression_3;
            }
            _xifexpression_1 = _xifexpression_2;
          }
          _builder_1.append(_xifexpression_1);
          _builder_1.append(" ");
        }
      }
      _xifexpression = _builder_1;
    }
    _builder.append(_xifexpression);
    return _builder;
  }
  
  protected CharSequence _generateDockerStatement(final LogsStatement stmt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("docker logs ");
    CharSequence _xifexpression = null;
    boolean _isEmpty = stmt.getLogOptions().isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      StringConcatenation _builder_1 = new StringConcatenation();
      {
        int _size = stmt.getLogOptions().size();
        int _minus = (_size - 1);
        IntegerRange _upTo = new IntegerRange(0, _minus);
        for(final Integer idx : _upTo) {
          CharSequence _xifexpression_1 = null;
          boolean _equals = stmt.getLogOptions().get((idx).intValue()).getOption().equals("track_output");
          if (_equals) {
            StringConcatenation _builder_2 = new StringConcatenation();
            _builder_2.append("-f");
            _xifexpression_1 = _builder_2;
          } else {
            CharSequence _xifexpression_2 = null;
            boolean _equals_1 = stmt.getLogOptions().get((idx).intValue()).getOption().equals("since");
            if (_equals_1) {
              StringConcatenation _builder_3 = new StringConcatenation();
              _builder_3.append("--since ");
              String _time = stmt.getLogOptions().get((idx).intValue()).getTime();
              _builder_3.append(_time);
              _xifexpression_2 = _builder_3;
            } else {
              CharSequence _xifexpression_3 = null;
              boolean _equals_2 = stmt.getLogOptions().get((idx).intValue()).getOption().equals("show_timestamp");
              if (_equals_2) {
                StringConcatenation _builder_4 = new StringConcatenation();
                _builder_4.append("--t");
                _xifexpression_3 = _builder_4;
              } else {
                CharSequence _xifexpression_4 = null;
                boolean _equals_3 = stmt.getLogOptions().get((idx).intValue()).getOption().equals("show_tail_n_logs");
                if (_equals_3) {
                  StringConcatenation _builder_5 = new StringConcatenation();
                  _builder_5.append("--tail ");
                  int _number = stmt.getLogOptions().get((idx).intValue()).getNumber();
                  _builder_5.append(_number);
                  _xifexpression_4 = _builder_5;
                }
                _xifexpression_3 = _xifexpression_4;
              }
              _xifexpression_2 = _xifexpression_3;
            }
            _xifexpression_1 = _xifexpression_2;
          }
          _builder_1.append(_xifexpression_1);
          _builder_1.append(" ");
        }
      }
      _xifexpression = _builder_1;
    }
    _builder.append(_xifexpression);
    String _name = stmt.getContainerName().getName();
    _builder.append(_name);
    return _builder;
  }
  
  protected CharSequence _generateDockerStatement(final WaitStatement stmt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("docker wait ");
    String _name = stmt.getContainerName().getName();
    _builder.append(_name);
    return _builder;
  }
  
  protected CharSequence _generateDockerStatement(final ExportStatement stmt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("docker export --output=");
    String _file_path = stmt.getFile_path();
    _builder.append(_file_path);
    _builder.append(" ");
    String _name = stmt.getContainerName().getName();
    _builder.append(_name);
    return _builder;
  }
  
  protected CharSequence _generateDockerStatement(final PortStatement stmt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("docker port ");
    String _name = stmt.getContainerName().getName();
    _builder.append(_name);
    _builder.append(" ");
    String _private_port = stmt.getPrivate_port();
    _builder.append(_private_port);
    return _builder;
  }
  
  protected CharSequence _generateDockerStatement(final CommitStatement stmt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("docker commit ");
    CharSequence _xifexpression = null;
    boolean _isEmpty = stmt.getCommitOptions().isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      StringConcatenation _builder_1 = new StringConcatenation();
      {
        int _size = stmt.getCommitOptions().size();
        int _minus = (_size - 1);
        IntegerRange _upTo = new IntegerRange(0, _minus);
        for(final Integer idx : _upTo) {
          CharSequence _xifexpression_1 = null;
          boolean _equals = stmt.getCommitOptions().get((idx).intValue()).getOption().equals("author");
          if (_equals) {
            StringConcatenation _builder_2 = new StringConcatenation();
            _builder_2.append("-a ");
            String _author = stmt.getCommitOptions().get((idx).intValue()).getAuthor();
            _builder_2.append(_author);
            _xifexpression_1 = _builder_2;
          } else {
            CharSequence _xifexpression_2 = null;
            boolean _equals_1 = stmt.getCommitOptions().get((idx).intValue()).getOption().equals("create");
            if (_equals_1) {
              StringConcatenation _builder_3 = new StringConcatenation();
              _builder_3.append("-c");
              _xifexpression_2 = _builder_3;
            } else {
              CharSequence _xifexpression_3 = null;
              boolean _equals_2 = stmt.getCommitOptions().get((idx).intValue()).getOption().equals("commit_description");
              if (_equals_2) {
                StringConcatenation _builder_4 = new StringConcatenation();
                _builder_4.append("-m ");
                String _description = stmt.getCommitOptions().get((idx).intValue()).getDescription();
                _builder_4.append(_description);
                _xifexpression_3 = _builder_4;
              } else {
                CharSequence _xifexpression_4 = null;
                boolean _equals_3 = stmt.getCommitOptions().get((idx).intValue()).getOption().equals("pause_when_commit");
                if (_equals_3) {
                  StringConcatenation _builder_5 = new StringConcatenation();
                  _builder_5.append("-p");
                  _xifexpression_4 = _builder_5;
                }
                _xifexpression_3 = _xifexpression_4;
              }
              _xifexpression_2 = _xifexpression_3;
            }
            _xifexpression_1 = _xifexpression_2;
          }
          _builder_1.append(_xifexpression_1);
          _builder_1.append(" ");
        }
      }
      _xifexpression = _builder_1;
    }
    _builder.append(_xifexpression);
    String _name = stmt.getContainerName().getName();
    _builder.append(_name);
    _builder.append(" ");
    String _repository = stmt.getRepository();
    _builder.append(_repository);
    return _builder;
  }
  
  protected CharSequence _generateDockerStatement(final CpStatement stmt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("docker cp ");
    CharSequence _xifexpression = null;
    int _value = stmt.getLink().getValue();
    boolean _tripleEquals = (_value == 1);
    if (_tripleEquals) {
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("-l ");
      _xifexpression = _builder_1;
    }
    _builder.append(_xifexpression);
    String _option1 = stmt.getSource().getOption1();
    _builder.append(_option1);
    CharSequence _xifexpression_1 = null;
    boolean _isNullOrEmpty = StringExtensions.isNullOrEmpty(stmt.getSource().getOption1());
    if (_isNullOrEmpty) {
      StringConcatenation _builder_2 = new StringConcatenation();
      String _name = stmt.getSource().getOption2().getName();
      _builder_2.append(_name);
      _xifexpression_1 = _builder_2;
    }
    _builder.append(_xifexpression_1);
    _builder.append(" ");
    String _destination = stmt.getDestination();
    _builder.append(_destination);
    return _builder;
  }
  
  protected CharSequence _generateDockerStatement(final DiffStatement stmt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("docker diff ");
    String _name = stmt.getContainerName().getName();
    _builder.append(_name);
    return _builder;
  }
  
  protected CharSequence _generateDockerStatement(final ImageStatement stmt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("docker images ");
    CharSequence _xifexpression = null;
    boolean _isEmpty = stmt.getImageOptions().isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      StringConcatenation _builder_1 = new StringConcatenation();
      {
        int _size = stmt.getImageOptions().size();
        int _minus = (_size - 1);
        IntegerRange _upTo = new IntegerRange(0, _minus);
        for(final Integer idx : _upTo) {
          CharSequence _xifexpression_1 = null;
          boolean _equals = stmt.getImageOptions().get((idx).intValue()).getOption().equals("show_all");
          if (_equals) {
            StringConcatenation _builder_2 = new StringConcatenation();
            _builder_2.append("-a");
            _xifexpression_1 = _builder_2;
          } else {
            CharSequence _xifexpression_2 = null;
            boolean _equals_1 = stmt.getImageOptions().get((idx).intValue()).getOption().equals("show_digests");
            if (_equals_1) {
              StringConcatenation _builder_3 = new StringConcatenation();
              _builder_3.append("--digests");
              _xifexpression_2 = _builder_3;
            } else {
              CharSequence _xifexpression_3 = null;
              boolean _equals_2 = stmt.getImageOptions().get((idx).intValue()).getOption().equals("filter");
              if (_equals_2) {
                StringConcatenation _builder_4 = new StringConcatenation();
                _builder_4.append("-f ");
                String _condition = stmt.getImageOptions().get((idx).intValue()).getCondition();
                _builder_4.append(_condition);
                _xifexpression_3 = _builder_4;
              } else {
                CharSequence _xifexpression_4 = null;
                boolean _equals_3 = stmt.getImageOptions().get((idx).intValue()).getOption().equals("format");
                if (_equals_3) {
                  StringConcatenation _builder_5 = new StringConcatenation();
                  _builder_5.append("--format ");
                  String _formats = stmt.getImageOptions().get((idx).intValue()).getFormats();
                  _builder_5.append(_formats);
                  _xifexpression_4 = _builder_5;
                } else {
                  CharSequence _xifexpression_5 = null;
                  boolean _equals_4 = stmt.getImageOptions().get((idx).intValue()).getOption().equals("complete");
                  if (_equals_4) {
                    StringConcatenation _builder_6 = new StringConcatenation();
                    _builder_6.append("--no-trunc");
                    _xifexpression_5 = _builder_6;
                  } else {
                    CharSequence _xifexpression_6 = null;
                    boolean _equals_5 = stmt.getImageOptions().get((idx).intValue()).getOption().equals("show_ID");
                    if (_equals_5) {
                      StringConcatenation _builder_7 = new StringConcatenation();
                      _builder_7.append("-q");
                      _xifexpression_6 = _builder_7;
                    }
                    _xifexpression_5 = _xifexpression_6;
                  }
                  _xifexpression_4 = _xifexpression_5;
                }
                _xifexpression_3 = _xifexpression_4;
              }
              _xifexpression_2 = _xifexpression_3;
            }
            _xifexpression_1 = _xifexpression_2;
          }
          _builder_1.append(_xifexpression_1);
          _builder_1.append(" ");
        }
      }
      _xifexpression = _builder_1;
    }
    _builder.append(_xifexpression);
    String _repository = stmt.getRepository();
    _builder.append(_repository);
    return _builder;
  }
  
  protected CharSequence _generateDockerStatement(final RemoveImageStatement stmt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("docker rmi ");
    CharSequence _xifexpression = null;
    boolean _isEmpty = stmt.getRemoveimageOptions().isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      StringConcatenation _builder_1 = new StringConcatenation();
      {
        int _size = stmt.getRemoveimageOptions().size();
        int _minus = (_size - 1);
        IntegerRange _upTo = new IntegerRange(0, _minus);
        for(final Integer idx : _upTo) {
          CharSequence _xifexpression_1 = null;
          int _value = stmt.getRemoveimageOptions().get((idx).intValue()).getValue();
          boolean _tripleEquals = (_value == 0);
          if (_tripleEquals) {
            StringConcatenation _builder_2 = new StringConcatenation();
            _builder_2.append("-f");
            _xifexpression_1 = _builder_2;
          } else {
            CharSequence _xifexpression_2 = null;
            int _value_1 = stmt.getRemoveimageOptions().get((idx).intValue()).getValue();
            boolean _tripleEquals_1 = (_value_1 == 1);
            if (_tripleEquals_1) {
              StringConcatenation _builder_3 = new StringConcatenation();
              _builder_3.append("--no-prune");
              _xifexpression_2 = _builder_3;
            }
            _xifexpression_1 = _xifexpression_2;
          }
          _builder_1.append(_xifexpression_1);
          _builder_1.append(" ");
        }
      }
      _xifexpression = _builder_1;
    }
    _builder.append(_xifexpression);
    String _image = stmt.getImage();
    _builder.append(_image);
    return _builder;
  }
  
  public CharSequence generateDockerStatement(final Statements stmt) {
    if (stmt instanceof AttachStatement) {
      return _generateDockerStatement((AttachStatement)stmt);
    } else if (stmt instanceof CommitStatement) {
      return _generateDockerStatement((CommitStatement)stmt);
    } else if (stmt instanceof ContainerNameDeclaration) {
      return _generateDockerStatement((ContainerNameDeclaration)stmt);
    } else if (stmt instanceof CpStatement) {
      return _generateDockerStatement((CpStatement)stmt);
    } else if (stmt instanceof DiffStatement) {
      return _generateDockerStatement((DiffStatement)stmt);
    } else if (stmt instanceof EventStatement) {
      return _generateDockerStatement((EventStatement)stmt);
    } else if (stmt instanceof ExecStatement) {
      return _generateDockerStatement((ExecStatement)stmt);
    } else if (stmt instanceof ExportStatement) {
      return _generateDockerStatement((ExportStatement)stmt);
    } else if (stmt instanceof ImageStatement) {
      return _generateDockerStatement((ImageStatement)stmt);
    } else if (stmt instanceof InspectStatement) {
      return _generateDockerStatement((InspectStatement)stmt);
    } else if (stmt instanceof KillStatement) {
      return _generateDockerStatement((KillStatement)stmt);
    } else if (stmt instanceof LogsStatement) {
      return _generateDockerStatement((LogsStatement)stmt);
    } else if (stmt instanceof PauseStatement) {
      return _generateDockerStatement((PauseStatement)stmt);
    } else if (stmt instanceof PortStatement) {
      return _generateDockerStatement((PortStatement)stmt);
    } else if (stmt instanceof PsStatement) {
      return _generateDockerStatement((PsStatement)stmt);
    } else if (stmt instanceof RemoveImageStatement) {
      return _generateDockerStatement((RemoveImageStatement)stmt);
    } else if (stmt instanceof RemoveStatement) {
      return _generateDockerStatement((RemoveStatement)stmt);
    } else if (stmt instanceof RestartStatement) {
      return _generateDockerStatement((RestartStatement)stmt);
    } else if (stmt instanceof RunCreateStatement) {
      return _generateDockerStatement((RunCreateStatement)stmt);
    } else if (stmt instanceof StartStatement) {
      return _generateDockerStatement((StartStatement)stmt);
    } else if (stmt instanceof StopStatement) {
      return _generateDockerStatement((StopStatement)stmt);
    } else if (stmt instanceof UnpauseStatement) {
      return _generateDockerStatement((UnpauseStatement)stmt);
    } else if (stmt instanceof WaitStatement) {
      return _generateDockerStatement((WaitStatement)stmt);
    } else if (stmt != null) {
      return _generateDockerStatement(stmt);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(stmt).toString());
    }
  }
}
